/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00008.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00008_H_
#define __PAU_REG00008_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


//>> PREP_[AME_AME0_MISC_CERR_RPT_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME0_MISC_CERR_RPT_MASK(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_CERR_RPT_MASK;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME0_MISC_CERR_RPT_MASK]

//>> GET_[AME_AME0_MISC_CERR_RPT_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME0_MISC_CERR_RPT_MASK(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_CERR_RPT_MASK;
#endif
    return fapi2::getScom(i_target, AME_AME0_MISC_CERR_RPT_MASK, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_MASK]

//>> PUT_[AME_AME0_MISC_CERR_RPT_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME0_MISC_CERR_RPT_MASK(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_MASK));
#endif
    return fapi2::putScom(i_target, AME_AME0_MISC_CERR_RPT_MASK, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME0_MISC_CERR_RPT_MASK]


//>> SET_[AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_MASK));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK,
           AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]

//>> SET_[AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_MASK));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK,
           AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]

//>> GET_[AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_MASK));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK,
           AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]

//>> PREP_[AME_AME0_MISC_PMU_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME0_MISC_PMU_CONFIG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_PMU_CONFIG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME0_MISC_PMU_CONFIG2]

//>> GET_[AME_AME0_MISC_PMU_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME0_MISC_PMU_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_PMU_CONFIG2;
#endif
    return fapi2::getScom(i_target, AME_AME0_MISC_PMU_CONFIG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME0_MISC_PMU_CONFIG2]

//>> PUT_[AME_AME0_MISC_PMU_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME0_MISC_PMU_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return fapi2::putScom(i_target, AME_AME0_MISC_PMU_CONFIG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME0_MISC_PMU_CONFIG2]


//>> SET_[AME_AME0_MISC_PMU_CONFIG2_PE_TYPE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_PE_TYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_PE_TYPE,
           AME_AME0_MISC_PMU_CONFIG2_PE_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PE_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_PE_TYPE]

//>> SET_[AME_AME0_MISC_PMU_CONFIG2_PE_TYPE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_PE_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_PE_TYPE,
           AME_AME0_MISC_PMU_CONFIG2_PE_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PE_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_PE_TYPE]

//>> GET_[AME_AME0_MISC_PMU_CONFIG2_PE_TYPE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_PMU_CONFIG2_PE_TYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME0_MISC_PMU_CONFIG2_PE_TYPE,
           AME_AME0_MISC_PMU_CONFIG2_PE_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PE_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_PMU_CONFIG2_PE_TYPE]

//>> SET_[AME_AME0_MISC_PMU_CONFIG2_INST_CAT]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_INST_CAT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_INST_CAT,
           AME_AME0_MISC_PMU_CONFIG2_INST_CAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_INST_CAT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_INST_CAT]

//>> SET_[AME_AME0_MISC_PMU_CONFIG2_INST_CAT]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_INST_CAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_INST_CAT,
           AME_AME0_MISC_PMU_CONFIG2_INST_CAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_INST_CAT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_INST_CAT]

//>> GET_[AME_AME0_MISC_PMU_CONFIG2_INST_CAT]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_PMU_CONFIG2_INST_CAT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME0_MISC_PMU_CONFIG2_INST_CAT,
           AME_AME0_MISC_PMU_CONFIG2_INST_CAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_INST_CAT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_PMU_CONFIG2_INST_CAT]

//>> SET_[AME_AME0_MISC_PMU_CONFIG2_PC0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_PC0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_PC0,
           AME_AME0_MISC_PMU_CONFIG2_PC0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PC0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_PC0]

//>> SET_[AME_AME0_MISC_PMU_CONFIG2_PC0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_PC0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_PC0,
           AME_AME0_MISC_PMU_CONFIG2_PC0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PC0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_PC0]

//>> GET_[AME_AME0_MISC_PMU_CONFIG2_PC0]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_PMU_CONFIG2_PC0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME0_MISC_PMU_CONFIG2_PC0,
           AME_AME0_MISC_PMU_CONFIG2_PC0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PC0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_PMU_CONFIG2_PC0]

//>> SET_[AME_AME0_MISC_PMU_CONFIG2_PC1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_PC1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_PC1,
           AME_AME0_MISC_PMU_CONFIG2_PC1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PC1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_PC1]

//>> SET_[AME_AME0_MISC_PMU_CONFIG2_PC1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_PC1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_PC1,
           AME_AME0_MISC_PMU_CONFIG2_PC1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PC1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_PC1]

//>> GET_[AME_AME0_MISC_PMU_CONFIG2_PC1]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_PMU_CONFIG2_PC1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME0_MISC_PMU_CONFIG2_PC1,
           AME_AME0_MISC_PMU_CONFIG2_PC1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PC1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_PMU_CONFIG2_PC1]

//>> SET_[AME_AME0_MISC_PMU_CONFIG2_PCR_S]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_PCR_S(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_PCR_S,
           AME_AME0_MISC_PMU_CONFIG2_PCR_S_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PCR_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_PCR_S]

//>> SET_[AME_AME0_MISC_PMU_CONFIG2_PCR_S]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_PCR_S(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_PCR_S,
           AME_AME0_MISC_PMU_CONFIG2_PCR_S_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PCR_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_PCR_S]

//>> GET_[AME_AME0_MISC_PMU_CONFIG2_PCR_S]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_PMU_CONFIG2_PCR_S(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME0_MISC_PMU_CONFIG2_PCR_S,
           AME_AME0_MISC_PMU_CONFIG2_PCR_S_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PCR_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_PMU_CONFIG2_PCR_S]

//>> SET_[AME_AME0_MISC_PMU_CONFIG2_PCR_E]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_PCR_E(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_PCR_E,
           AME_AME0_MISC_PMU_CONFIG2_PCR_E_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PCR_E chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_PCR_E]

//>> SET_[AME_AME0_MISC_PMU_CONFIG2_PCR_E]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_PMU_CONFIG2_PCR_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_PMU_CONFIG2_PCR_E,
           AME_AME0_MISC_PMU_CONFIG2_PCR_E_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PCR_E chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_PMU_CONFIG2_PCR_E]

//>> GET_[AME_AME0_MISC_PMU_CONFIG2_PCR_E]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_PMU_CONFIG2_PCR_E(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_PMU_CONFIG2));
#endif
    return i_data.extractToRight<AME_AME0_MISC_PMU_CONFIG2_PCR_E,
           AME_AME0_MISC_PMU_CONFIG2_PCR_E_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_PMU_CONFIG2_PCR_E chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_PMU_CONFIG2_PCR_E]

//>> PREP_[CS_CTL_MISC_BDF2PE_13_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_13_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_13_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_13_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_13_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_13_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_13_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_13_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_13_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_13_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_13_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_13_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_13_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_13_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_13_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_13_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_13_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_13_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_13_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_13_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_13_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_13_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_13_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_13_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_13_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_13_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_13_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_13_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_13_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_13_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_13_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_13_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_13_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_13_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_13_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_13_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_13_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_13_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_13_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_13_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_BDF2PE_8_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_8_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_8_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_8_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_8_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_8_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_8_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_8_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_8_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_8_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_8_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_8_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_8_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_8_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_8_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_8_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_8_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_8_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_8_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_8_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_8_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_8_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_8_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_8_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_8_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_8_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_8_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_8_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_8_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_8_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_8_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_8_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_8_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_8_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_8_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_8_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_8_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_8_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_8_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_8_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_CERR_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_CERR_HOLD1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_HOLD1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_CERR_HOLD1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_CERR_HOLD1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_HOLD1;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_CERR_HOLD1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1]

//>> PUT_[CS_CTL_MISC_CERR_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_CERR_HOLD1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_CERR_HOLD1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_CERR_HOLD1]


//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PEF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PEF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PEF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PEF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PEF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PEF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PEF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PEF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PEF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PEF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PEF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PEF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PEF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PEF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PEF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PEF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PEF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PEF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PEF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PEF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PEF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PEF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PEF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PEF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PEF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PEF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PEF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PEF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PEF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_4]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PEF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PEF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PEF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PEF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_4]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PEF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PEF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PEF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_5]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PEF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PEF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PEF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PEF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_5]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PEF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PEF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PEF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_6]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PEF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PEF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PEF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PEF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_6]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PEF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PEF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PEF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PEF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PEF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PEF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PEF_7]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PEF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PEF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PEF_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PEF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PEF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PEF_7]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PEF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PEF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PEF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PEF_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_4]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_4]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_5]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_5]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_6]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_6]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_7]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_7]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_8]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_8]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_8]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_8]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_8]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_8]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_8]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_8]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_9]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_9]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_9]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_9]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_9]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_9]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_9]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_9]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_10]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_10]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_10]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_10]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_10]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_10]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_10]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_10]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_11]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_11]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_11]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_11]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_11]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_11]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_11]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_11]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_12]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_12]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_12]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_12]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_12]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_12]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_12]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_12]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_13]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_13]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_13]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_13]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_13]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_13]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_13]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_13]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_14]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_14]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_14]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_14]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_14]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_14]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_14]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_14]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_15]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_15]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_15]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_15]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_15]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_15]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_15]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_15]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_16]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_16]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_16]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_16]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_16]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_16]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_16]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_16]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_17]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_17]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_17]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_17]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_17]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_17]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_17]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_17]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_18]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_18]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_18]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_18]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_18]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_18]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_18]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_18]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_19]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_19]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_NLG_19]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_NLG_19]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_19]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_NLG_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_NLG_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_19]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_NLG_19]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_NLG_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_NLG_19]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_FWD_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_FWD_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_FWD_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_FWD_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_FWD_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_FWD_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_FWD_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_FWD_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_FWD_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_FWD_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_FWD_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_FWD_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_FWD_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_FWD_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_FWD_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_FWD_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_FWD_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_4]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_4]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_5]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_5]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_6]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_6]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_AUE_7]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_AUE_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_AUE_7]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_AUE_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBP_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBP_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBP_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBP_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBP_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBP_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBP_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBP_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBP_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBP_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBP_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBP_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBP_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBP_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBP_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBP_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBP_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBP_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBP_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBP_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBP_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBP_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBP_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBP_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBP_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBP_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBP_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBP_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBP_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBP_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBP_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBP_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBP_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBP_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBP_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBP_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBP_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_4]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_4]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_4]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_4]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_5]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_5]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_5]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_5]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_6]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_6]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_6]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_6]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBF_7]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBF_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_7]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBF_7]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBF_7]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBC_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBC_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBC_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBC_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBC_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBC_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBC_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBC_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBC_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBC_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBC_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBC_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBC_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBC_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBC_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBC_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBC_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBC_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBC_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBC_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBC_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBC_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBC_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBC_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBC_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBC_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBC_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_PBC_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBC_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_PBC_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBC_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_PBC_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_PBC_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBC_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_PBC_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_PBC_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_PBC_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_LDA_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_LDA_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_LDA_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_LDA_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_LDA_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_LDA_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_LDA_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_LDA_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_LDA_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_LDA_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_LDA_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_LDA_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_LDA_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_LDA_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_LDA_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_LDA_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_LDA_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_0]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_STA_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_STA_0]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_STA_0]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_STA_0]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_1]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_STA_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_STA_1]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_STA_1]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_STA_1]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_2]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_STA_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_STA_2]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_STA_2]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_STA_2]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_HOLD1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_3]

//>> SET_[CS_CTL_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_HOLD1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_HOLD1_STA_3]

//>> CLEAR_[CS_CTL_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_HOLD1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_HOLD1_STA_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_HOLD1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_STA_3]

//>> GET_[CS_CTL_MISC_CERR_HOLD1_STA_3]
static inline bool GET_CS_CTL_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_HOLD1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_HOLD1_STA_3]

//>> PREP_[CS_CTL_MISC_STATUS2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_STATUS2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_STATUS2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_STATUS2]

//>> GET_[CS_CTL_MISC_STATUS2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_STATUS2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_STATUS2;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_STATUS2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2]

//>> PUT_[CS_CTL_MISC_STATUS2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_STATUS2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_STATUS2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_STATUS2]


//>> SET_[CS_CTL_MISC_STATUS2_FENCE1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_FENCE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_FENCE1,
           CS_CTL_MISC_STATUS2_FENCE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_FENCE1]

//>> SET_[CS_CTL_MISC_STATUS2_FENCE1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_FENCE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_FENCE1,
           CS_CTL_MISC_STATUS2_FENCE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_FENCE1]

//>> GET_[CS_CTL_MISC_STATUS2_FENCE1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_FENCE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_FENCE1,
           CS_CTL_MISC_STATUS2_FENCE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_FENCE1]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_RLX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK1_RLX,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_RLX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK1_RLX,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_RLX(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_BRK1_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_RLX]

//>> CLEAR_[CS_CTL_MISC_STATUS2_BRK1_RLX]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_BRK1_RLX(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_BRK1_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_BRK1_RLX]

//>> GET_[CS_CTL_MISC_STATUS2_BRK1_RLX]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK1_RLX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK1_RLX,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK1_RLX]

//>> GET_[CS_CTL_MISC_STATUS2_BRK1_RLX]
static inline bool GET_CS_CTL_MISC_STATUS2_BRK1_RLX(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_BRK1_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK1_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVREQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ1]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVREQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ1]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ1]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVREQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVREQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVREQ1]

//>> GET_[CS_CTL_MISC_STATUS2_NVREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVREQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVREQ1]

//>> GET_[CS_CTL_MISC_STATUS2_NVREQ1]
static inline bool GET_CS_CTL_MISC_STATUS2_NVREQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVREQ1]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVDGD1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD1]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVDGD1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD1]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVDGD1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD1]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVDGD1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVDGD1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVDGD1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVDGD1]

//>> GET_[CS_CTL_MISC_STATUS2_NVDGD1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVDGD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVDGD1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVDGD1]

//>> GET_[CS_CTL_MISC_STATUS2_NVDGD1]
static inline bool GET_CS_CTL_MISC_STATUS2_NVDGD1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVDGD1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVDGD1]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVRS1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS1]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVRS1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS1]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVRS1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS1]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVRS1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVRS1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVRS1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVRS1]

//>> GET_[CS_CTL_MISC_STATUS2_NVRS1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVRS1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVRS1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVRS1]

//>> GET_[CS_CTL_MISC_STATUS2_NVRS1]
static inline bool GET_CS_CTL_MISC_STATUS2_NVRS1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVRS1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVRS1]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_AM_FENCED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_AM_FENCED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK1_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK1_AM_FENCED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_AM_FENCED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_AM_FENCED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_AM_FENCED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK1_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK1_AM_FENCED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_AM_FENCED]

//>> GET_[CS_CTL_MISC_STATUS2_BRK1_AM_FENCED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK1_AM_FENCED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK1_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK1_AM_FENCED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK1_AM_FENCED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK1_NTL_REQ_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]

//>> CLEAR_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]
static inline bool GET_CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK1_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK1_RESERVED,
           CS_CTL_MISC_STATUS2_BRK1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_RESERVED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK1_RESERVED,
           CS_CTL_MISC_STATUS2_BRK1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK1_RESERVED]

//>> GET_[CS_CTL_MISC_STATUS2_BRK1_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK1_RESERVED,
           CS_CTL_MISC_STATUS2_BRK1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK1_RESERVED]

//>> SET_[CS_CTL_MISC_STATUS2_FENCE2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_FENCE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_FENCE2,
           CS_CTL_MISC_STATUS2_FENCE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_FENCE2]

//>> SET_[CS_CTL_MISC_STATUS2_FENCE2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_FENCE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_FENCE2,
           CS_CTL_MISC_STATUS2_FENCE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_FENCE2]

//>> GET_[CS_CTL_MISC_STATUS2_FENCE2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_FENCE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_FENCE2,
           CS_CTL_MISC_STATUS2_FENCE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_FENCE2]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_RLX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK2_RLX,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_RLX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK2_RLX,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_RLX(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_BRK2_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_RLX]

//>> CLEAR_[CS_CTL_MISC_STATUS2_BRK2_RLX]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_BRK2_RLX(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_BRK2_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_BRK2_RLX]

//>> GET_[CS_CTL_MISC_STATUS2_BRK2_RLX]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK2_RLX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK2_RLX,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK2_RLX]

//>> GET_[CS_CTL_MISC_STATUS2_BRK2_RLX]
static inline bool GET_CS_CTL_MISC_STATUS2_BRK2_RLX(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_BRK2_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK2_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVREQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ2]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVREQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ2]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ2]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVREQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVREQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVREQ2]

//>> GET_[CS_CTL_MISC_STATUS2_NVREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVREQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVREQ2]

//>> GET_[CS_CTL_MISC_STATUS2_NVREQ2]
static inline bool GET_CS_CTL_MISC_STATUS2_NVREQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVREQ2]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVDGD2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD2]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVDGD2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD2]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVDGD2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD2]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVDGD2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVDGD2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVDGD2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVDGD2]

//>> GET_[CS_CTL_MISC_STATUS2_NVDGD2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVDGD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVDGD2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVDGD2]

//>> GET_[CS_CTL_MISC_STATUS2_NVDGD2]
static inline bool GET_CS_CTL_MISC_STATUS2_NVDGD2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVDGD2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVDGD2]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVRS2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS2]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVRS2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS2]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVRS2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS2]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVRS2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVRS2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVRS2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVRS2]

//>> GET_[CS_CTL_MISC_STATUS2_NVRS2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVRS2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVRS2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVRS2]

//>> GET_[CS_CTL_MISC_STATUS2_NVRS2]
static inline bool GET_CS_CTL_MISC_STATUS2_NVRS2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVRS2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVRS2]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_AM_FENCED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_AM_FENCED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK2_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK2_AM_FENCED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_AM_FENCED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_AM_FENCED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_AM_FENCED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK2_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK2_AM_FENCED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_AM_FENCED]

//>> GET_[CS_CTL_MISC_STATUS2_BRK2_AM_FENCED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK2_AM_FENCED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK2_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK2_AM_FENCED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK2_AM_FENCED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK2_NTL_REQ_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]

//>> CLEAR_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]
static inline bool GET_CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK2_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK2_RESERVED,
           CS_CTL_MISC_STATUS2_BRK2_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_RESERVED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK2_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK2_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK2_RESERVED,
           CS_CTL_MISC_STATUS2_BRK2_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK2_RESERVED]

//>> GET_[CS_CTL_MISC_STATUS2_BRK2_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK2_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK2_RESERVED,
           CS_CTL_MISC_STATUS2_BRK2_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK2_RESERVED]

//>> SET_[CS_CTL_MISC_STATUS2_FENCE3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_FENCE3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_FENCE3,
           CS_CTL_MISC_STATUS2_FENCE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_FENCE3]

//>> SET_[CS_CTL_MISC_STATUS2_FENCE3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_FENCE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_FENCE3,
           CS_CTL_MISC_STATUS2_FENCE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_FENCE3]

//>> GET_[CS_CTL_MISC_STATUS2_FENCE3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_FENCE3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_FENCE3,
           CS_CTL_MISC_STATUS2_FENCE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_FENCE3]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_RLX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK3_RLX,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_RLX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK3_RLX,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_RLX(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_BRK3_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_RLX]

//>> CLEAR_[CS_CTL_MISC_STATUS2_BRK3_RLX]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_BRK3_RLX(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_BRK3_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_BRK3_RLX]

//>> GET_[CS_CTL_MISC_STATUS2_BRK3_RLX]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK3_RLX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK3_RLX,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK3_RLX]

//>> GET_[CS_CTL_MISC_STATUS2_BRK3_RLX]
static inline bool GET_CS_CTL_MISC_STATUS2_BRK3_RLX(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_BRK3_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK3_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVREQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ3]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVREQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ3]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ3]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVREQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVREQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVREQ3]

//>> GET_[CS_CTL_MISC_STATUS2_NVREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVREQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVREQ3]

//>> GET_[CS_CTL_MISC_STATUS2_NVREQ3]
static inline bool GET_CS_CTL_MISC_STATUS2_NVREQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVREQ3]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVDGD3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD3]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVDGD3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD3]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVDGD3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD3]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVDGD3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVDGD3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVDGD3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVDGD3]

//>> GET_[CS_CTL_MISC_STATUS2_NVDGD3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVDGD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVDGD3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVDGD3]

//>> GET_[CS_CTL_MISC_STATUS2_NVDGD3]
static inline bool GET_CS_CTL_MISC_STATUS2_NVDGD3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVDGD3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVDGD3]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVRS3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS3]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVRS3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS3]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVRS3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS3]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVRS3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVRS3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVRS3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVRS3]

//>> GET_[CS_CTL_MISC_STATUS2_NVRS3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVRS3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVRS3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVRS3]

//>> GET_[CS_CTL_MISC_STATUS2_NVRS3]
static inline bool GET_CS_CTL_MISC_STATUS2_NVRS3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVRS3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVRS3]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_AM_FENCED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_AM_FENCED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK3_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK3_AM_FENCED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_AM_FENCED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_AM_FENCED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_AM_FENCED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK3_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK3_AM_FENCED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_AM_FENCED]

//>> GET_[CS_CTL_MISC_STATUS2_BRK3_AM_FENCED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK3_AM_FENCED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK3_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK3_AM_FENCED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK3_AM_FENCED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK3_NTL_REQ_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]

//>> CLEAR_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]
static inline bool GET_CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK3_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK3_RESERVED,
           CS_CTL_MISC_STATUS2_BRK3_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_RESERVED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK3_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK3_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK3_RESERVED,
           CS_CTL_MISC_STATUS2_BRK3_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK3_RESERVED]

//>> GET_[CS_CTL_MISC_STATUS2_BRK3_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK3_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK3_RESERVED,
           CS_CTL_MISC_STATUS2_BRK3_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK3_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK3_RESERVED]

//>> SET_[CS_CTL_MISC_STATUS2_FENCE4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_FENCE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_FENCE4,
           CS_CTL_MISC_STATUS2_FENCE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_FENCE4]

//>> SET_[CS_CTL_MISC_STATUS2_FENCE4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_FENCE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_FENCE4,
           CS_CTL_MISC_STATUS2_FENCE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_FENCE4]

//>> GET_[CS_CTL_MISC_STATUS2_FENCE4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_FENCE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_FENCE4,
           CS_CTL_MISC_STATUS2_FENCE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_FENCE4]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_RLX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK4_RLX,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_RLX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK4_RLX,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_RLX]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_RLX(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_BRK4_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_RLX]

//>> CLEAR_[CS_CTL_MISC_STATUS2_BRK4_RLX]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_BRK4_RLX(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_BRK4_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_BRK4_RLX]

//>> GET_[CS_CTL_MISC_STATUS2_BRK4_RLX]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK4_RLX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK4_RLX,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK4_RLX]

//>> GET_[CS_CTL_MISC_STATUS2_BRK4_RLX]
static inline bool GET_CS_CTL_MISC_STATUS2_BRK4_RLX(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_BRK4_RLX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_RLX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK4_RLX]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVREQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ4]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVREQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ4]

//>> SET_[CS_CTL_MISC_STATUS2_NVREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVREQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVREQ4]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVREQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVREQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVREQ4]

//>> GET_[CS_CTL_MISC_STATUS2_NVREQ4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVREQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVREQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVREQ4]

//>> GET_[CS_CTL_MISC_STATUS2_NVREQ4]
static inline bool GET_CS_CTL_MISC_STATUS2_NVREQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVREQ4]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVDGD4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD4]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVDGD4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD4]

//>> SET_[CS_CTL_MISC_STATUS2_NVDGD4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVDGD4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVDGD4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVDGD4]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVDGD4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVDGD4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVDGD4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVDGD4]

//>> GET_[CS_CTL_MISC_STATUS2_NVDGD4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVDGD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVDGD4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVDGD4]

//>> GET_[CS_CTL_MISC_STATUS2_NVDGD4]
static inline bool GET_CS_CTL_MISC_STATUS2_NVDGD4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVDGD4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVDGD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVDGD4]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVRS4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS4]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_NVRS4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS4]

//>> SET_[CS_CTL_MISC_STATUS2_NVRS4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_NVRS4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_NVRS4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_NVRS4]

//>> CLEAR_[CS_CTL_MISC_STATUS2_NVRS4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_NVRS4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_NVRS4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_NVRS4]

//>> GET_[CS_CTL_MISC_STATUS2_NVRS4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_NVRS4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_NVRS4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVRS4]

//>> GET_[CS_CTL_MISC_STATUS2_NVRS4]
static inline bool GET_CS_CTL_MISC_STATUS2_NVRS4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_NVRS4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_NVRS4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_NVRS4]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_AM_FENCED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_AM_FENCED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK4_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK4_AM_FENCED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_AM_FENCED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_AM_FENCED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_AM_FENCED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK4_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK4_AM_FENCED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_AM_FENCED]

//>> GET_[CS_CTL_MISC_STATUS2_BRK4_AM_FENCED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK4_AM_FENCED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK4_AM_FENCED,
           CS_CTL_MISC_STATUS2_BRK4_AM_FENCED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_AM_FENCED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK4_AM_FENCED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE,
           CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK4_NTL_REQ_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.setBit<CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]

//>> CLEAR_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.clearBit<CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]

//>> GET_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]
static inline bool GET_CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.getBit<CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK4_MISC_FENCE]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK4_RESERVED,
           CS_CTL_MISC_STATUS2_BRK4_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_RESERVED]

//>> SET_[CS_CTL_MISC_STATUS2_BRK4_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_STATUS2_BRK4_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_STATUS2_BRK4_RESERVED,
           CS_CTL_MISC_STATUS2_BRK4_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_STATUS2_BRK4_RESERVED]

//>> GET_[CS_CTL_MISC_STATUS2_BRK4_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_STATUS2_BRK4_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_STATUS2));
#endif
    return i_data.extractToRight<CS_CTL_MISC_STATUS2_BRK4_RESERVED,
           CS_CTL_MISC_STATUS2_BRK4_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_STATUS2_BRK4_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_STATUS2_BRK4_RESERVED]

//>> PREP_[CS_CTL_MISC_MMIOPA0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_MMIOPA0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_MMIOPA0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_MMIOPA0_CONFIG]

//>> GET_[CS_CTL_MISC_MMIOPA0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_MMIOPA0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_MMIOPA0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_MMIOPA0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_MMIOPA0_CONFIG]

//>> PUT_[CS_CTL_MISC_MMIOPA0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_MMIOPA0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_MMIOPA0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_MMIOPA0_CONFIG]


//>> SET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]

//>> SET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]

//>> SET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]

//>> CLEAR_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]

//>> GET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]

//>> GET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]
static inline bool GET_CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED1]

//>> SET_[CS_CTL_MISC_MMIOPA0_CONFIG_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA0_CONFIG_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA0_CONFIG_ADDR,
           CS_CTL_MISC_MMIOPA0_CONFIG_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_MMIOPA0_CONFIG_ADDR]

//>> SET_[CS_CTL_MISC_MMIOPA0_CONFIG_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA0_CONFIG_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA0_CONFIG_ADDR,
           CS_CTL_MISC_MMIOPA0_CONFIG_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_MMIOPA0_CONFIG_ADDR]

//>> GET_[CS_CTL_MISC_MMIOPA0_CONFIG_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_MMIOPA0_CONFIG_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_MMIOPA0_CONFIG_ADDR,
           CS_CTL_MISC_MMIOPA0_CONFIG_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_MMIOPA0_CONFIG_ADDR]

//>> SET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2,
           CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2]

//>> SET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2,
           CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2]

//>> GET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2,
           CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_MMIOPA0_CONFIG_RESERVED2]

//>> SET_[CS_CTL_MISC_MMIOPA0_CONFIG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA0_CONFIG_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA0_CONFIG_SIZE,
           CS_CTL_MISC_MMIOPA0_CONFIG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_MMIOPA0_CONFIG_SIZE]

//>> SET_[CS_CTL_MISC_MMIOPA0_CONFIG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_MMIOPA0_CONFIG_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_MMIOPA0_CONFIG_SIZE,
           CS_CTL_MISC_MMIOPA0_CONFIG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_MMIOPA0_CONFIG_SIZE]

//>> GET_[CS_CTL_MISC_MMIOPA0_CONFIG_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_MMIOPA0_CONFIG_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_MMIOPA0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_MMIOPA0_CONFIG_SIZE,
           CS_CTL_MISC_MMIOPA0_CONFIG_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_MMIOPA0_CONFIG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_MMIOPA0_CONFIG_SIZE]

//>> PREP_[CS_SM0_MCP_MISC_EPSILON_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_EPSILON_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_EPSILON_CONFIG]

//>> GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_EPSILON_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_EPSILON_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG]

//>> PUT_[CS_SM0_MCP_MISC_EPSILON_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_EPSILON_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_EPSILON_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_EPSILON_CONFIG]


//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE]

//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE]

//>> GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_RATE]

//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT]

//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT]

//>> GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W0_COUNT]

//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT]

//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT]

//>> GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_W1_COUNT]

//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT]

//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT]

//>> GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R0_COUNT]

//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT]

//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT]

//>> GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R1_COUNT]

//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT]

//>> SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT]

//>> GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_EPSILON_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT,
           CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_EPSILON_CONFIG_R2_COUNT]

//>> PREP_[CS_SM0_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_PERF_CONFIG]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG]

//>> PUT_[CS_SM0_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_PERF_CONFIG]


//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATSTART]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> CLEAR_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline bool GET_CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> CLEAR_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline bool GET_CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]

//>> CLEAR_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]
static inline bool GET_CS_SM0_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_CONFIG_ACT]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG0]


//>> SET_[CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM,
           CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM,
           CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM,
           CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_MA_RSNOOP_OPT_DCLAIM]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_PBUS]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRAZOS_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_PCKT_BLK_PRB]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ADR_BAR_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_RESTRICT_CHIP_GROUP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3,
           CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3,
           CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3,
           CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK,
           CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK,
           CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK,
           CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_SNP_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_MRBGP_TRACK_ALL]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_MRBSP_TRACK_ALL]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_MRBCP_TRACK_ALL]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA,
           CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA,
           CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA,
           CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ADDR_EX_MASK_ENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_SINGLE_AFU_DUAL_BRICK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_OCAPI_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK0_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK1_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK2_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK3_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_BRK4_NVLINK_MODE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BLOCKING_RCMD_DIR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_DIR_POWERSAVE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_PRESP_POWERSAVE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK0_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK1_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK2_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK3_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_ENABLE_BRK4_OCAPI_C2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_CP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED4]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED5]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED6]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED7]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED8]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED9]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED10]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_DISABLE_CAN_BY_PROBE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0,
           CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0,
           CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0,
           CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG0_0_RESERVED0]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5]


//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> PREP_[CS_SM1_MCP_MISC_CERR_HOLD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_HOLD2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_HOLD2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_HOLD2;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_HOLD2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2]

//>> PUT_[CS_SM1_MCP_MISC_CERR_HOLD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_HOLD2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_HOLD2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_HOLD2]


//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_8]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_8]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_9]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_9]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_10]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_10]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_11]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_11]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_12]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_12]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_13]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_13]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_14]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_14]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_15]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_15]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_16]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_16]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_17]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_17]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_18]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_18]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_19]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_19]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_20]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_20]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_20]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_20]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_20]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_20]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_20]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_21]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_21]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_21]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_21]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_21]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_21]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_21]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_22]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_22]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_22]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_22]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_22]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_22]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_22]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_23]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_23]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_23]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_23]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_23]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_23]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_23]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_24]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_24]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_24]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_24]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_24]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_24]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_24]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_24]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_25]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_25]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_25]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_25]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_25]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_25]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_25]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_25]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_26]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_26]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_26]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_26]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_26]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_26]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_26]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_26]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_27]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_27]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_27]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_27]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_27]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_27]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_27]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_27]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_28]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_28]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_28]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_28]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_28]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_28]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_28]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_28]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_29]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_29]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_29]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_29]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_29]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_29]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_29]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_29]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_30]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_30]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_30]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_30]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_30]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_30]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_30]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_30]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_31]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_31]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_31]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_31]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_31]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_31]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_31]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_31]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_32]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_32]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_32]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_32]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_32]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_32]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_32]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_33]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_33]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_33]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_33]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_33]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_33]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_33]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_33]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_33]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_34]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_34]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_34]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_34]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_34]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_34]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_34]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_34]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_34]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_35]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_35]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_35]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_35]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_35]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_35]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_35]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_35]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_35]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_36]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_36]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_36]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_36]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_36]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_36]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_36]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_36]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_36]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_37]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_37]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_37]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_37]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_37]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_37]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_37]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_37]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_37]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_38]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_38]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_38]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_38]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_38]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_38]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_38]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_38]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_38]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_39]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_39]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_39]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_39]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_39]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_39]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_39]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_39]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_39]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_40]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_40]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_40]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_40]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_40]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_40]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_40]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_40]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_40]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_41]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_41]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_41]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_41]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_41]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_41]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_41]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_41]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_41]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_42]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_42]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_42]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_42]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_42]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_42]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_42]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_42]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_42]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_43]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_43]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_43]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_43]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_43]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_43]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_43]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_43]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_43]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_44]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_44]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_44]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_44]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_44]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_44]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_44]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_44]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_44]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_45]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_45]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_45]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_45]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_45]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_45]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_45]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_45]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_45]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_46]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_46]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_46]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_46]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_46]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_46]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_46]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_46]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_46]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_47]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_47]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_47]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_47]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_47]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_47]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_47]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_47]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_47]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_48]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_48]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_48]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_48]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_48]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_48]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_48]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_48]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_48]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_49]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_49]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_49]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_49]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_49]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_49]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_49]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_49]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_49]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_50]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_50]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_50]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_50]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_50]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_50]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_50]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_50]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_50]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_51]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_51]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_51]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_51]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_51]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_51]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_51]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_51]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_51]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_52]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_52]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_52]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_52]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_52]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_52]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_52]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_52]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_52]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_53]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_53]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_53]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_53]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_53]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_53]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_53]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_53]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_53]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_54]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_54]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_54]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_54]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_54]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_54]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_54]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_54]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_54]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_55]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_55]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_55]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_55]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_55]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_55]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_55]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_55]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_55]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_56]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_56]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_56]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_56]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_56]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_56]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_56]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_56]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_56]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_57]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_57]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_57]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_57]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_57]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_57]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_57]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_57]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_57]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_58]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_58]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_58]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_58]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_58]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_58]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_58]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_58]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_58]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_59]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_59]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_59]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_59]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_59]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_59]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_59]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_59]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_59]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_60]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_60]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_60]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_60]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_60]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_60]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_60]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_60]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_60]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_61]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_61]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_61]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_61]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_61]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_61]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_61]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_61]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_61]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_62]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_62]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_62]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_62]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_62]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_62]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_62]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_62]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_62]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_63]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_63]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD2_63]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_63]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD2_63]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_63]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_63]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD2_63]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD2));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD2_63]

//>> PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE4;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE4]

//>> PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE4));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE4]


//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE4));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE4));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE4));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> PREP_[CS_SM1_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_PERF_CONFIG]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG]

//>> PUT_[CS_SM1_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_PERF_CONFIG]


//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATSTART]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> CLEAR_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline bool GET_CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> CLEAR_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline bool GET_CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]

//>> CLEAR_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]
static inline bool GET_CS_SM1_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_CONFIG_ACT]

//>> PREP_[CS_SM1_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GPU0_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_GPU0_BAR]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GPU0_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_GPU0_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR]

//>> PUT_[CS_SM1_SNP_MISC_GPU0_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_GPU0_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_GPU0_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_GPU0_BAR]


//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]
static inline bool GET_CS_SM1_SNP_MISC_GPU0_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU0_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_ADDR_MASK]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]
static inline bool GET_CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_4T_SELECT]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_MODE,
           CS_SM1_SNP_MISC_GPU0_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_MODE,
           CS_SM1_SNP_MISC_GPU0_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_MODE,
           CS_SM1_SNP_MISC_GPU0_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]
static inline bool GET_CS_SM1_SNP_MISC_GPU0_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU0_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]
static inline bool GET_CS_SM1_SNP_MISC_GPU0_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU0_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU0_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU0_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]
static inline bool GET_CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU0_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU0_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]

//>> GET_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]
static inline bool GET_CS_SM1_SNP_MISC_GPU0_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU0_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU0_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU0_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU0_BAR_RESERVED]

//>> PREP_[CS_SM1_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GPU1_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_GPU1_BAR]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GPU1_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_GPU1_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR]

//>> PUT_[CS_SM1_SNP_MISC_GPU1_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_GPU1_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_GPU1_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_GPU1_BAR]


//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]
static inline bool GET_CS_SM1_SNP_MISC_GPU1_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU1_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_ADDR_MASK]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]
static inline bool GET_CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_4T_SELECT]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_MODE,
           CS_SM1_SNP_MISC_GPU1_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_MODE,
           CS_SM1_SNP_MISC_GPU1_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_MODE,
           CS_SM1_SNP_MISC_GPU1_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]
static inline bool GET_CS_SM1_SNP_MISC_GPU1_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU1_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]
static inline bool GET_CS_SM1_SNP_MISC_GPU1_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU1_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU1_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU1_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]
static inline bool GET_CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU1_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU1_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]

//>> GET_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]
static inline bool GET_CS_SM1_SNP_MISC_GPU1_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU1_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU1_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU1_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU1_BAR_RESERVED]

//>> PREP_[CS_SM1_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GPU2_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_GPU2_BAR]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GPU2_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_GPU2_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR]

//>> PUT_[CS_SM1_SNP_MISC_GPU2_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_GPU2_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_GPU2_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_GPU2_BAR]


//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]
static inline bool GET_CS_SM1_SNP_MISC_GPU2_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU2_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_ADDR_MASK]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]
static inline bool GET_CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_4T_SELECT]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_MODE,
           CS_SM1_SNP_MISC_GPU2_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_MODE,
           CS_SM1_SNP_MISC_GPU2_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_MODE,
           CS_SM1_SNP_MISC_GPU2_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]
static inline bool GET_CS_SM1_SNP_MISC_GPU2_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU2_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]
static inline bool GET_CS_SM1_SNP_MISC_GPU2_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU2_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU2_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU2_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]
static inline bool GET_CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU2_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU2_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]

//>> GET_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]
static inline bool GET_CS_SM1_SNP_MISC_GPU2_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU2_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU2_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU2_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU2_BAR_RESERVED]

//>> PREP_[CS_SM1_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GPU3_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_GPU3_BAR]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GPU3_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_GPU3_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR]

//>> PUT_[CS_SM1_SNP_MISC_GPU3_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_GPU3_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_GPU3_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_GPU3_BAR]


//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]
static inline bool GET_CS_SM1_SNP_MISC_GPU3_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU3_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_ADDR_MASK]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]
static inline bool GET_CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_4T_SELECT]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_MODE,
           CS_SM1_SNP_MISC_GPU3_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_MODE,
           CS_SM1_SNP_MISC_GPU3_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_MODE,
           CS_SM1_SNP_MISC_GPU3_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]
static inline bool GET_CS_SM1_SNP_MISC_GPU3_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU3_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]
static inline bool GET_CS_SM1_SNP_MISC_GPU3_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU3_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU3_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU3_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]
static inline bool GET_CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU3_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU3_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]

//>> GET_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]
static inline bool GET_CS_SM1_SNP_MISC_GPU3_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU3_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU3_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU3_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU3_BAR_RESERVED]

//>> PREP_[CS_SM1_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GPU4_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_GPU4_BAR]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_GPU4_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_GPU4_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR]

//>> PUT_[CS_SM1_SNP_MISC_GPU4_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_GPU4_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_GPU4_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_GPU4_BAR]


//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]
static inline bool GET_CS_SM1_SNP_MISC_GPU4_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU4_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK,
           CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_ADDR_MASK]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_SL_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]
static inline bool GET_CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT,
           CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_4T_SELECT]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_MODE,
           CS_SM1_SNP_MISC_GPU4_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_MODE,
           CS_SM1_SNP_MISC_GPU4_BAR_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_MODE,
           CS_SM1_SNP_MISC_GPU4_BAR_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_GRANULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_GRANULE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_GRANULE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]
static inline bool GET_CS_SM1_SNP_MISC_GPU4_BAR_GRANULE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU4_BAR_GRANULE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_GRANULE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_GRANULE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]
static inline bool GET_CS_SM1_SNP_MISC_GPU4_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU4_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_POISON chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_M2MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_M2MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_M2MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU4_BAR_M2MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU4_BAR_M2MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_M2MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_M2MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_PA_IGNORE_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]
static inline bool GET_CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]
static inline bool GET_CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_CHIP_EQ_GROUP]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]
static inline bool GET_CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_EXTENDED_MODE]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_GPU4_BAR_RESERVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]

//>> SET_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]

//>> CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_GPU4_BAR_RESERVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]

//>> GET_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]
static inline bool GET_CS_SM1_SNP_MISC_GPU4_BAR_RESERVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_GPU4_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_GPU4_BAR_RESERVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_GPU4_BAR_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_GPU4_BAR_RESERVED]

//>> PREP_[CS_SM2_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_DIR_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_DIR_MISC_DEBUG1_CONFIG]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_DIR_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_DIR_MISC_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG]

//>> PUT_[CS_SM2_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_DIR_MISC_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_DIR_MISC_DEBUG1_CONFIG]


//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.setBit<CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> CLEAR_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline bool GET_CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.getBit<CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> PREP_[CS_SM2_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_PERF_CONFIG]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG]

//>> PUT_[CS_SM2_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_PERF_CONFIG]


//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATSTART]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> CLEAR_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline bool GET_CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> CLEAR_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline bool GET_CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]

//>> CLEAR_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]
static inline bool GET_CS_SM2_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_CONFIG_ACT]

//>> PREP_[CS_SM2_MCP_MISC_XTIMER2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_XTIMER2_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_XTIMER2_CONFIG]

//>> GET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_XTIMER2_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_XTIMER2_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG]

//>> PUT_[CS_SM2_MCP_MISC_XTIMER2_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_XTIMER2_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER2_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_XTIMER2_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_XTIMER2_CONFIG]


//>> SET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK]

//>> SET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK]

//>> GET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER2_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK,
           CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_2_TICK]

//>> SET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK]

//>> SET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER2_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK]

//>> GET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_XTIMER2_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK,
           CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_XTIMER2_CONFIG_3_TICK]

//>> PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5]

//>> PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5]


//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC5_WREND]

//>> PREP_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_TOPOLOGY_TABLE3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_TOPOLOGY_TABLE3;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_TOPOLOGY_TABLE3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3]

//>> PUT_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_TOPOLOGY_TABLE3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3]


//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> PREP_[CS_SM3_DIR_MISC_SCOM_L2_DATA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_DIR_MISC_SCOM_L2_DATA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_DIR_MISC_SCOM_L2_DATA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_DIR_MISC_SCOM_L2_DATA]

//>> GET_[CS_SM3_DIR_MISC_SCOM_L2_DATA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_DIR_MISC_SCOM_L2_DATA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_DIR_MISC_SCOM_L2_DATA;
#endif
    return fapi2::getScom(i_target, CS_SM3_DIR_MISC_SCOM_L2_DATA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_SCOM_L2_DATA]

//>> PUT_[CS_SM3_DIR_MISC_SCOM_L2_DATA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_DIR_MISC_SCOM_L2_DATA(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_SCOM_L2_DATA));
#endif
    return fapi2::putScom(i_target, CS_SM3_DIR_MISC_SCOM_L2_DATA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_DIR_MISC_SCOM_L2_DATA]


//>> SET_[CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_SCOM_L2_DATA));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA,
           CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]

//>> SET_[CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_SCOM_L2_DATA));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA,
           CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]

//>> GET_[CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_SCOM_L2_DATA));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA,
           CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_SCOM_L2_DATA_L2_SCOM_READ_DATA]

//>> PREP_[CS_SM3_MCP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MASK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_MASK0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MASK0;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_MASK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0]

//>> PUT_[CS_SM3_MCP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_MASK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_MASK0]


//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_NVF_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_ASBE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_REG_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK0_OCR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK0_OCR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK0_OCR_15]

//>> PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE1]

//>> PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE1));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE1]


//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> PREP_[CS_SM3_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_DEBUG1_CONFIG]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG]

//>> PUT_[CS_SM3_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_DEBUG1_CONFIG]


//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> CLEAR_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline bool GET_CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> PREP_[CS_SM3_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_PERF_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_PERF_CONFIG]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_PERF_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_PERF_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG]

//>> PUT_[CS_SM3_MCP_MISC_PERF_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_PERF_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_PERF_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_PERF_CONFIG]


//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART,
           CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATSTART]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL,
           CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATCANCEL]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH,
           CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFINISH]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> CLEAR_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]
static inline bool GET_CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED1]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT0]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT1]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT2]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3,
           CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_EVENT3]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2,
           CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_RESERVED2]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> CLEAR_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]
static inline bool GET_CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_LATFILTER]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_PERF_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]

//>> SET_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]

//>> CLEAR_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_PERF_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]

//>> GET_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]
static inline bool GET_CS_SM3_MCP_MISC_PERF_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_PERF_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_PERF_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_PERF_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_PERF_CONFIG_ACT]

//>> PREP_[CS_SM3_MCP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_SM_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_SM_STATUS]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_SM_STATUS;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_SM_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS]

//>> PUT_[CS_SM3_MCP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_SM_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_SM_STATUS]


//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBGP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MRBGP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_MRBGP,
           CS_SM3_MCP_MISC_SM_STATUS_MRBGP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MRBGP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBGP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBGP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MRBGP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_MRBGP,
           CS_SM3_MCP_MISC_SM_STATUS_MRBGP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MRBGP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBGP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_MRBGP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_MRBGP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_MRBGP,
           CS_SM3_MCP_MISC_SM_STATUS_MRBGP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MRBGP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_MRBGP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MRBSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_MRBSP,
           CS_SM3_MCP_MISC_SM_STATUS_MRBSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MRBSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MRBSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_MRBSP,
           CS_SM3_MCP_MISC_SM_STATUS_MRBSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MRBSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_MRBSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_MRBSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_MRBSP,
           CS_SM3_MCP_MISC_SM_STATUS_MRBSP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MRBSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_MRBSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FENCE0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE0,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE0]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FENCE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE0,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE0]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_FENCE0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE0,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE0]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FENCE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE1,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE1]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FENCE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE1,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE1]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_FENCE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE1,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE1]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FENCE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE2,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE2]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FENCE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE2,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE2]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_FENCE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE2,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE2]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FENCE3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE3,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE3]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FENCE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE3,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE3]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_FENCE3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE3,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE3]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FENCE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE4,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE4]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FENCE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE4,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE4]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_FENCE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_FENCE4,
           CS_SM3_MCP_MISC_SM_STATUS_FENCE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_FENCE4]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_PBLN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBLN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_PBLN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_PBLN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_PBLN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_PBLN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_PBLN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_PBLN]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_PBNNG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBNNG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_PBNNG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_PBNNG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_PBNNG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_PBNNG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_PBNNG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_PBNNG]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_PBRNVG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBRNVG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_PBRNVG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_PBRNVG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_PBRNVG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_PBRNVG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_PBRNVG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_PBRNVG]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B0REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B0REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B0REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B0REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B0REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B0REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B0REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B0REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B0DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B0DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B0DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B0DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B0DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B0DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B0DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B0DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B1REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B1REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B1REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B1REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B1REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B1REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B1REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B1REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B1DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B1DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B1DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B1DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B1DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B1DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B1DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B1DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B2REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B2REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B2REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B2REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B2REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B2REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B2REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B2REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B2DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B2DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B2DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B2DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B2DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B2DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B2DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B2DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B3REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B3REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B3REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B3REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B3REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B3REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B3REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B3REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B3DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B3DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B3DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B3DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B3DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B3DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B3DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B3DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B4REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B4REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B4REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B4REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B4REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B4REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B4REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B4REQ]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B4DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B4DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B4DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B4DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B4DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B4DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B4DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B4DGD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MMIO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_MMIO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_MMIO]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_MMIOSUE]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_ATSXLATE]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_REPLAY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_REPLAY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_REPLAY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_REPLAY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_REPLAY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_REPLAY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_REPLAY]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_PBRSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBRSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_PBRSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_PBRSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_PBRSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_PBRSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_PBRSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_PBRSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B0RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B0RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B0RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B0RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B0RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B0RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B0RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B0RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B1RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B1RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B1RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B1RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B1RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B1RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B1RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B1RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B2RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B2RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B2RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B2RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B2RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B2RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B2RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B2RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B3RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B3RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B3RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B3RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B3RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B3RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B3RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B3RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B4RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B4RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_B4RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_B4RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_B4RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_B4RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_B4RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_B4RSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_XARSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_XARSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_XARSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_XARSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_XARSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_XARSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_XARSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_XARSP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FREE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FREE]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FREE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_FREE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FREE]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_FREE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_FREE]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_FREE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_FREE]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_FREE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_FREE]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_FREE]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_FREE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_FREE]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_DIRUPD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_DIRUPD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_DIRUPD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_DIRUPD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_DIRUPD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_DIRUPD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_DIRUPD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_DIRUPD]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_SACOLL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_SACOLL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_SACOLL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_SM_STATUS_SACOLL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]

//>> CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_SM_STATUS_SACOLL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_SACOLL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]
static inline bool GET_CS_SM3_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_SM_STATUS_SACOLL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_SACOLL]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBCP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MRBCP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_MRBCP,
           CS_SM3_MCP_MISC_SM_STATUS_MRBCP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MRBCP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBCP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBCP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_MRBCP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_MRBCP,
           CS_SM3_MCP_MISC_SM_STATUS_MRBCP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MRBCP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_MRBCP]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_MRBCP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_MRBCP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_MRBCP,
           CS_SM3_MCP_MISC_SM_STATUS_MRBCP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_MRBCP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_MRBCP]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE,
           CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE,
           CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE,
           CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_PERF_LSTATE]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_RESERVED2,
           CS_SM3_MCP_MISC_SM_STATUS_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_RESERVED2]

//>> SET_[CS_SM3_MCP_MISC_SM_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_SM_STATUS_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_SM_STATUS_RESERVED2,
           CS_SM3_MCP_MISC_SM_STATUS_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_SM_STATUS_RESERVED2]

//>> GET_[CS_SM3_MCP_MISC_SM_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_SM_STATUS_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_SM_STATUS_RESERVED2,
           CS_SM3_MCP_MISC_SM_STATUS_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_SM_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_SM_STATUS_RESERVED2]

//>> PREP_[CS_SM3_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_MACHINE_ALLOC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_MACHINE_ALLOC]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_MACHINE_ALLOC;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_MACHINE_ALLOC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC]

//>> PUT_[CS_SM3_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_MACHINE_ALLOC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_MACHINE_ALLOC]


//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> CLEAR_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline bool GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> CLEAR_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline bool GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> PREP_[CS_SM3_SNP_MISC_SCOM_L2_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_SCOM_L2_ADDR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_SCOM_L2_ADDR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_SCOM_L2_ADDR]

//>> GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_SCOM_L2_ADDR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_SCOM_L2_ADDR;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_SCOM_L2_ADDR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR]

//>> PUT_[CS_SM3_SNP_MISC_SCOM_L2_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_SCOM_L2_ADDR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_SCOM_L2_ADDR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_SCOM_L2_ADDR]


//>> SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> CLEAR_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]
static inline bool GET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_VALID]

//>> SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1,
           CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1,
           CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1,
           CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_ADDR_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI,
           CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI]

//>> SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI,
           CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI]

//>> GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI,
           CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_CCI]

//>> SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY,
           CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY]

//>> SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY,
           CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY]

//>> GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_SCOM_L2_ADDR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY,
           CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_SCOM_L2_ADDR_WAY]

//>> PREP_[DAT_MISC_CERR_ECC_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_CERR_ECC_MASK(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_ECC_MASK;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DAT_MISC_CERR_ECC_MASK]

//>> GET_[DAT_MISC_CERR_ECC_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_CERR_ECC_MASK(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_ECC_MASK;
#endif
    return fapi2::getScom(i_target, DAT_MISC_CERR_ECC_MASK, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_MASK]

//>> PUT_[DAT_MISC_CERR_ECC_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_CERR_ECC_MASK(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_MASK));
#endif
    return fapi2::putScom(i_target, DAT_MISC_CERR_ECC_MASK, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DAT_MISC_CERR_ECC_MASK]


//>> SET_[DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_MASK));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS,
           DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS]

//>> SET_[DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_MASK));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS,
           DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS]

//>> GET_[DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_MASK));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS,
           DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_MASK_CERR_ECC_MASK_BITS]

//>> PREP_[MISC_REGS_BDF2PE_14_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_14_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_14_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_BDF2PE_14_CONFIG]

//>> GET_[MISC_REGS_BDF2PE_14_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_14_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_14_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_14_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_14_CONFIG]

//>> PUT_[MISC_REGS_BDF2PE_14_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_14_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_14_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_BDF2PE_14_CONFIG]


//>> SET_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_14_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_14_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_14_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_14_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_14_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_14_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_14_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_14_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_14_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_14_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_BDF2PE_14_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_14_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_14_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_14_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_14_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_14_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_14_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_14_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_14_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_14_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_14_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_14_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_14_CONFIG_RESERVED]

//>> GET_[MISC_REGS_BDF2PE_14_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_14_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_14_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_14_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_14_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_14_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_14_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_14_CONFIG_PE,
           MISC_REGS_BDF2PE_14_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_14_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_14_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_14_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_14_CONFIG_PE,
           MISC_REGS_BDF2PE_14_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_14_CONFIG_PE]

//>> GET_[MISC_REGS_BDF2PE_14_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_14_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_14_CONFIG_PE,
           MISC_REGS_BDF2PE_14_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_14_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_14_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_14_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_14_CONFIG_BDF,
           MISC_REGS_BDF2PE_14_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_14_CONFIG_BDF]

//>> SET_[MISC_REGS_BDF2PE_14_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_14_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_14_CONFIG_BDF,
           MISC_REGS_BDF2PE_14_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_14_CONFIG_BDF]

//>> GET_[MISC_REGS_BDF2PE_14_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_14_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_14_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_14_CONFIG_BDF,
           MISC_REGS_BDF2PE_14_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_14_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_14_CONFIG_BDF]

//>> PREP_[MISC_REGS_BDF2PE_8_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_8_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_8_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_BDF2PE_8_CONFIG]

//>> GET_[MISC_REGS_BDF2PE_8_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_8_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_8_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_8_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_8_CONFIG]

//>> PUT_[MISC_REGS_BDF2PE_8_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_8_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_8_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_BDF2PE_8_CONFIG]


//>> SET_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_8_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_8_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_8_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_8_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_8_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_8_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_8_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_8_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_8_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_8_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_BDF2PE_8_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_8_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_8_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_8_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_8_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_8_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_8_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_8_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_8_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_8_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_8_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_8_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_8_CONFIG_RESERVED]

//>> GET_[MISC_REGS_BDF2PE_8_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_8_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_8_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_8_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_8_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_8_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_8_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_8_CONFIG_PE,
           MISC_REGS_BDF2PE_8_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_8_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_8_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_8_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_8_CONFIG_PE,
           MISC_REGS_BDF2PE_8_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_8_CONFIG_PE]

//>> GET_[MISC_REGS_BDF2PE_8_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_8_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_8_CONFIG_PE,
           MISC_REGS_BDF2PE_8_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_8_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_8_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_8_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_8_CONFIG_BDF,
           MISC_REGS_BDF2PE_8_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_8_CONFIG_BDF]

//>> SET_[MISC_REGS_BDF2PE_8_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_8_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_8_CONFIG_BDF,
           MISC_REGS_BDF2PE_8_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_8_CONFIG_BDF]

//>> GET_[MISC_REGS_BDF2PE_8_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_8_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_8_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_8_CONFIG_BDF,
           MISC_REGS_BDF2PE_8_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_8_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_8_CONFIG_BDF]

//>> PREP_[MISC_REGS_ERR_INFO_PAU_RING_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_ERR_INFO_PAU_RING_ADDR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_ERR_INFO_PAU_RING_ADDR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_ERR_INFO_PAU_RING_ADDR]

//>> GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_ERR_INFO_PAU_RING_ADDR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_ERR_INFO_PAU_RING_ADDR;
#endif
    return fapi2::getScom(i_target, MISC_REGS_ERR_INFO_PAU_RING_ADDR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR]

//>> PUT_[MISC_REGS_ERR_INFO_PAU_RING_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_ERR_INFO_PAU_RING_ADDR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return fapi2::putScom(i_target, MISC_REGS_ERR_INFO_PAU_RING_ADDR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_ERR_INFO_PAU_RING_ADDR]


//>> SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR,
           MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR]

//>> SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR,
           MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR]

//>> GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return i_data.extractToRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR,
           MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_ADDR]

//>> SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR,
           MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR]

//>> SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR,
           MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR]

//>> GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return i_data.extractToRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR,
           MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_LENR]

//>> SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]

//>> SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]

//>> SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.setBit<MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]

//>> CLEAR_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.clearBit<MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]

//>> GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return i_data.extractToRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]

//>> GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]
static inline bool GET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return i_data.getBit<MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_RNW]

//>> SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]

//>> SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.insertFromRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]

//>> SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.setBit<MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]

//>> CLEAR_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return o_data.clearBit<MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]

//>> GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return i_data.extractToRight<MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]

//>> GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]
static inline bool GET_MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERR_INFO_PAU_RING_ADDR));
#endif
    return i_data.getBit<MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERR_INFO_PAU_RING_ADDR_DA_OP]

//>> PREP_[MISC_REGS_FENCE_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_FENCE_1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_FENCE_1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_FENCE_1_CONFIG]

//>> GET_[MISC_REGS_FENCE_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_FENCE_1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_FENCE_1_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_FENCE_1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_FENCE_1_CONFIG]

//>> PUT_[MISC_REGS_FENCE_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_FENCE_1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_1_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_FENCE_1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_FENCE_1_CONFIG]


//>> SET_[MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1,
           MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1]

//>> SET_[MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1,
           MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1]

//>> GET_[MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_FENCE_1_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1,
           MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_FENCE_1_CONFIG_CONFIG_FENCE_1]

//>> PREP_[OTL0_MISC_HAPPI_BAR2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_HAPPI_BAR2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_HAPPI_BAR2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_HAPPI_BAR2]

//>> GET_[OTL0_MISC_HAPPI_BAR2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_HAPPI_BAR2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_HAPPI_BAR2;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_HAPPI_BAR2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR2]

//>> PUT_[OTL0_MISC_HAPPI_BAR2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_HAPPI_BAR2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_HAPPI_BAR2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_HAPPI_BAR2]


//>> SET_[OTL0_MISC_HAPPI_BAR2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR2_ENABLE]

//>> SET_[OTL0_MISC_HAPPI_BAR2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR2_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR2_ENABLE]

//>> SET_[OTL0_MISC_HAPPI_BAR2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return o_data.setBit<OTL0_MISC_HAPPI_BAR2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR2_ENABLE]

//>> CLEAR_[OTL0_MISC_HAPPI_BAR2_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_HAPPI_BAR2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return o_data.clearBit<OTL0_MISC_HAPPI_BAR2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_HAPPI_BAR2_ENABLE]

//>> GET_[OTL0_MISC_HAPPI_BAR2_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR2_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR2_ENABLE]

//>> GET_[OTL0_MISC_HAPPI_BAR2_ENABLE]
static inline bool GET_OTL0_MISC_HAPPI_BAR2_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return i_data.getBit<OTL0_MISC_HAPPI_BAR2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR2_ENABLE]

//>> SET_[OTL0_MISC_HAPPI_BAR2_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR2_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR2_ADDR,
           OTL0_MISC_HAPPI_BAR2_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR2_ADDR]

//>> SET_[OTL0_MISC_HAPPI_BAR2_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR2_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR2_ADDR,
           OTL0_MISC_HAPPI_BAR2_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR2_ADDR]

//>> GET_[OTL0_MISC_HAPPI_BAR2_ADDR]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR2_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR2_ADDR,
           OTL0_MISC_HAPPI_BAR2_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR2_ADDR]

//>> SET_[OTL0_MISC_HAPPI_BAR2_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR2_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR2_MASK,
           OTL0_MISC_HAPPI_BAR2_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR2_MASK]

//>> SET_[OTL0_MISC_HAPPI_BAR2_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR2_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR2_MASK,
           OTL0_MISC_HAPPI_BAR2_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR2_MASK]

//>> GET_[OTL0_MISC_HAPPI_BAR2_MASK]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR2_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR2_MASK,
           OTL0_MISC_HAPPI_BAR2_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR2_MASK]

//>> SET_[OTL0_MISC_HAPPI_BAR2_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR2_SUB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR2_SUB,
           OTL0_MISC_HAPPI_BAR2_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR2_SUB]

//>> SET_[OTL0_MISC_HAPPI_BAR2_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR2_SUB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR2_SUB,
           OTL0_MISC_HAPPI_BAR2_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR2_SUB]

//>> GET_[OTL0_MISC_HAPPI_BAR2_SUB]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR2_SUB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR2));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR2_SUB,
           OTL0_MISC_HAPPI_BAR2_SUB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR2_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR2_SUB]

//>> PREP_[OTL1_MISC_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_CONFIG3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_CONFIG3]

//>> GET_[OTL1_MISC_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_CONFIG3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG3;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_CONFIG3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_CONFIG3]

//>> PUT_[OTL1_MISC_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_CONFIG3(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG3));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_CONFIG3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_CONFIG3]


//>> SET_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG3_ENABLE_HAPPI(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG3_ENABLE_HAPPI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]

//>> SET_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG3_ENABLE_HAPPI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG3_ENABLE_HAPPI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]

//>> SET_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG3_ENABLE_HAPPI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG3));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG3_ENABLE_HAPPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]

//>> CLEAR_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG3_ENABLE_HAPPI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG3));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG3_ENABLE_HAPPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]

//>> GET_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG3_ENABLE_HAPPI(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG3));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG3_ENABLE_HAPPI,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]

//>> GET_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]
static inline bool GET_OTL1_MISC_CONFIG3_ENABLE_HAPPI(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG3));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG3_ENABLE_HAPPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG3_ENABLE_HAPPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG3_ENABLE_HAPPI]

//>> SET_[OTL1_MISC_CONFIG3_CONFIG3_SPARE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG3_CONFIG3_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG3_CONFIG3_SPARE,
           OTL1_MISC_CONFIG3_CONFIG3_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG3_CONFIG3_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG3_CONFIG3_SPARE]

//>> SET_[OTL1_MISC_CONFIG3_CONFIG3_SPARE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG3_CONFIG3_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG3));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG3_CONFIG3_SPARE,
           OTL1_MISC_CONFIG3_CONFIG3_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG3_CONFIG3_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG3_CONFIG3_SPARE]

//>> GET_[OTL1_MISC_CONFIG3_CONFIG3_SPARE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG3_CONFIG3_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG3));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG3_CONFIG3_SPARE,
           OTL1_MISC_CONFIG3_CONFIG3_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG3_CONFIG3_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG3_CONFIG3_SPARE]

//>> PREP_[OTL1_MISC_CONFIG_ERAT_HASH]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_CONFIG_ERAT_HASH(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_ERAT_HASH;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_CONFIG_ERAT_HASH]

//>> GET_[OTL1_MISC_CONFIG_ERAT_HASH]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_CONFIG_ERAT_HASH(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_ERAT_HASH;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_CONFIG_ERAT_HASH, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_ERAT_HASH]

//>> PUT_[OTL1_MISC_CONFIG_ERAT_HASH]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_CONFIG_ERAT_HASH(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_CONFIG_ERAT_HASH, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_CONFIG_ERAT_HASH]


//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_0,
           OTL1_MISC_CONFIG_ERAT_HASH_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_0]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_0,
           OTL1_MISC_CONFIG_ERAT_HASH_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_0]

//>> GET_[OTL1_MISC_CONFIG_ERAT_HASH_0]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_ERAT_HASH_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_ERAT_HASH_0,
           OTL1_MISC_CONFIG_ERAT_HASH_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_ERAT_HASH_0]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_1,
           OTL1_MISC_CONFIG_ERAT_HASH_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_1]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_1,
           OTL1_MISC_CONFIG_ERAT_HASH_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_1]

//>> GET_[OTL1_MISC_CONFIG_ERAT_HASH_1]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_ERAT_HASH_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_ERAT_HASH_1,
           OTL1_MISC_CONFIG_ERAT_HASH_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_ERAT_HASH_1]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_2,
           OTL1_MISC_CONFIG_ERAT_HASH_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_2]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_2,
           OTL1_MISC_CONFIG_ERAT_HASH_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_2]

//>> GET_[OTL1_MISC_CONFIG_ERAT_HASH_2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_ERAT_HASH_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_ERAT_HASH_2,
           OTL1_MISC_CONFIG_ERAT_HASH_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_ERAT_HASH_2]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_3,
           OTL1_MISC_CONFIG_ERAT_HASH_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_3]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_3,
           OTL1_MISC_CONFIG_ERAT_HASH_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_3]

//>> GET_[OTL1_MISC_CONFIG_ERAT_HASH_3]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_ERAT_HASH_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_ERAT_HASH_3,
           OTL1_MISC_CONFIG_ERAT_HASH_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_ERAT_HASH_3]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_4]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_4,
           OTL1_MISC_CONFIG_ERAT_HASH_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_4]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_4]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_4,
           OTL1_MISC_CONFIG_ERAT_HASH_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_4]

//>> GET_[OTL1_MISC_CONFIG_ERAT_HASH_4]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_ERAT_HASH_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_ERAT_HASH_4,
           OTL1_MISC_CONFIG_ERAT_HASH_4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_ERAT_HASH_4]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_5]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_5,
           OTL1_MISC_CONFIG_ERAT_HASH_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_5]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_5]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_5,
           OTL1_MISC_CONFIG_ERAT_HASH_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_5]

//>> GET_[OTL1_MISC_CONFIG_ERAT_HASH_5]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_ERAT_HASH_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_ERAT_HASH_5,
           OTL1_MISC_CONFIG_ERAT_HASH_5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_ERAT_HASH_5]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_6]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_6,
           OTL1_MISC_CONFIG_ERAT_HASH_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_6]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_6]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_6,
           OTL1_MISC_CONFIG_ERAT_HASH_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_6]

//>> GET_[OTL1_MISC_CONFIG_ERAT_HASH_6]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_ERAT_HASH_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_ERAT_HASH_6,
           OTL1_MISC_CONFIG_ERAT_HASH_6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_ERAT_HASH_6]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_7]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_7,
           OTL1_MISC_CONFIG_ERAT_HASH_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_7]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_7]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_7,
           OTL1_MISC_CONFIG_ERAT_HASH_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_7]

//>> GET_[OTL1_MISC_CONFIG_ERAT_HASH_7]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_ERAT_HASH_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_ERAT_HASH_7,
           OTL1_MISC_CONFIG_ERAT_HASH_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_ERAT_HASH_7]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_8]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_8,
           OTL1_MISC_CONFIG_ERAT_HASH_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_8]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_8]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_8,
           OTL1_MISC_CONFIG_ERAT_HASH_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_8]

//>> GET_[OTL1_MISC_CONFIG_ERAT_HASH_8]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_ERAT_HASH_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_ERAT_HASH_8,
           OTL1_MISC_CONFIG_ERAT_HASH_8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_ERAT_HASH_8]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_9]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_9,
           OTL1_MISC_CONFIG_ERAT_HASH_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_9]

//>> SET_[OTL1_MISC_CONFIG_ERAT_HASH_9]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_ERAT_HASH_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_ERAT_HASH_9,
           OTL1_MISC_CONFIG_ERAT_HASH_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_ERAT_HASH_9]

//>> GET_[OTL1_MISC_CONFIG_ERAT_HASH_9]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_ERAT_HASH_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_ERAT_HASH));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_ERAT_HASH_9,
           OTL1_MISC_CONFIG_ERAT_HASH_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_ERAT_HASH_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_ERAT_HASH_9]

//>> PREP_[XSL_MAIN_WRAP_ERROR_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_WRAP_ERROR_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_WRAP_ERROR_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_WRAP_ERROR_1]

//>> GET_[XSL_MAIN_WRAP_ERROR_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_WRAP_ERROR_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_WRAP_ERROR_1;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_WRAP_ERROR_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1]

//>> PUT_[XSL_MAIN_WRAP_ERROR_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_WRAP_ERROR_1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_WRAP_ERROR_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_WRAP_ERROR_1]


//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT0_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT1_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT2_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_ERT3_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_TADB_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_TADB_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_TADB_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_COSB_LO_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_COSB_MID_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_COSB_HI_UE_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_RQDB_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_RQDB_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RQDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_RQDB_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_RQDB_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RQDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_RQDB_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_RQDB_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RQDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_RQDB_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_RQDB_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RQDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_RQDB_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_RQDB_PE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RQDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_RQDB_PE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_RQDB_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RQDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_RQDB_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_RSDB_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_RSDB_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RSDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_RSDB_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_RSDB_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RSDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_RSDB_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_RSDB_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RSDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_RSDB_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_RSDB_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RSDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_RSDB_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_RSDB_PE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RSDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_RSDB_PE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_RSDB_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_RSDB_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_RSDB_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_MDB0_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_MDB0_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB0_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_MDB0_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_MDB0_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB0_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_MDB0_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_MDB0_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB0_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_MDB0_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_MDB0_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB0_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_MDB0_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_MDB0_PE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB0_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_MDB0_PE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_MDB0_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB0_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_MDB0_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_MDB1_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_MDB1_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB1_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_MDB1_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_MDB1_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB1_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_MDB1_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_MDB1_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB1_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_MDB1_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_MDB1_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB1_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_MDB1_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_MDB1_PE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB1_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_MDB1_PE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_MDB1_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MDB1_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_MDB1_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_STLBI_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_STLBI_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_STLBI_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_STLBI_PE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_STLBI_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_STLBI_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_STLBI_PE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_STLBI_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_STLBI_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_STLBI_PE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_STLBI_PE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_STLBI_PE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_STLBI_PE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_STLBI_OVERFLOW_ERR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_CE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_UE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_CORESP_DATA_SUE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_CE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_UE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_PEE_DATA_SUE]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]

//>> SET_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.setBit<XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]

//>> CLEAR_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return o_data.clearBit<XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]

//>> GET_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]
static inline bool GET_XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERROR_1));
#endif
    return i_data.getBit<XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERROR_1_MEMHIT_W_BAR_MODE_NONZERO_ERROR]

//>> PREP_[XTS_ATSD_HYP7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_ATSD_HYP7(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP7;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_ATSD_HYP7]

//>> GET_[XTS_ATSD_HYP7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_ATSD_HYP7(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP7;
#endif
    return fapi2::getScom(i_target, XTS_ATSD_HYP7, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_ATSD_HYP7]

//>> PUT_[XTS_ATSD_HYP7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_ATSD_HYP7(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP7));
#endif
    return fapi2::putScom(i_target, XTS_ATSD_HYP7, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_ATSD_HYP7]


//>> SET_[XTS_ATSD_HYP7_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP7_MSRHV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP7));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP7_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP7_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP7_MSRHV]

//>> SET_[XTS_ATSD_HYP7_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP7_MSRHV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP7));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP7_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP7_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP7_MSRHV]

//>> SET_[XTS_ATSD_HYP7_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP7_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP7));
#endif
    return o_data.setBit<XTS_ATSD_HYP7_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_ATSD_HYP7_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP7_MSRHV]

//>> CLEAR_[XTS_ATSD_HYP7_MSRHV]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_ATSD_HYP7_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP7));
#endif
    return o_data.clearBit<XTS_ATSD_HYP7_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_ATSD_HYP7_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_ATSD_HYP7_MSRHV]

//>> GET_[XTS_ATSD_HYP7_MSRHV]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP7_MSRHV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP7));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP7_MSRHV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP7_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP7_MSRHV]

//>> GET_[XTS_ATSD_HYP7_MSRHV]
static inline bool GET_XTS_ATSD_HYP7_MSRHV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP7));
#endif
    return i_data.getBit<XTS_ATSD_HYP7_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_ATSD_HYP7_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP7_MSRHV]

//>> SET_[XTS_ATSD_HYP7_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP7_LPARID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP7));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP7_LPARID,
           XTS_ATSD_HYP7_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP7_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP7_LPARID]

//>> SET_[XTS_ATSD_HYP7_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP7_LPARID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP7));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP7_LPARID,
           XTS_ATSD_HYP7_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP7_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP7_LPARID]

//>> GET_[XTS_ATSD_HYP7_LPARID]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP7_LPARID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP7));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP7_LPARID,
           XTS_ATSD_HYP7_LPARID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP7_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP7_LPARID]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
