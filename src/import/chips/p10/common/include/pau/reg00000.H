/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00000.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00000_H_
#define __PAU_REG00000_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


//>> PREP_[AME_AME0_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME0_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_CERR_RPT_HOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME0_MISC_CERR_RPT_HOLD]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME0_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_CERR_RPT_HOLD;
#endif
    return fapi2::getScom(i_target, AME_AME0_MISC_CERR_RPT_HOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD]

//>> PUT_[AME_AME0_MISC_CERR_RPT_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME0_MISC_CERR_RPT_HOLD(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return fapi2::putScom(i_target, AME_AME0_MISC_CERR_RPT_HOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME0_MISC_CERR_RPT_HOLD]


//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_BREAK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_BREAK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_BREAK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_BREAK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_BREAK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_BREAK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_BREAK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_BREAK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_BREAK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_BREAK]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_FIRMWARE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGA_PERR]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_CREGM_PERR]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_FU_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_FU_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_FU_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_FU_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_FU_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_FU_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_FU_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_FU_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_FU_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_FU_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_PE_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PE_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_PE_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_PE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_PE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_PE_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_PE_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_PE_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_LDW_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_WB_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_WB_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_WB_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_WB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_WB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_WB_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_WB_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_WB_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_WB_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_WB_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_WB_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_WB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_WB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_WB_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_WB_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_WB_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_WB_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_WB_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_PCT_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_CBA_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_ERAT_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_PE_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PE_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_PE_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_PE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_PE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_PE_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_PE_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_PE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_PE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_PE_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.setBit<AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]

//>> CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return o_data.clearBit<AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]
static inline bool GET_AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_HOLD));
#endif
    return i_data.getBit<AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_HOLD_XCT_CE]

//>> PREP_[AME_AME0_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME0_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_CERR_RPT_INFO;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME0_MISC_CERR_RPT_INFO]

//>> GET_[AME_AME0_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME0_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_CERR_RPT_INFO;
#endif
    return fapi2::getScom(i_target, AME_AME0_MISC_CERR_RPT_INFO, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_INFO]

//>> PUT_[AME_AME0_MISC_CERR_RPT_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME0_MISC_CERR_RPT_INFO(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return fapi2::putScom(i_target, AME_AME0_MISC_CERR_RPT_INFO, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME0_MISC_CERR_RPT_INFO]


//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE,
           AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE,
           AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE]

//>> GET_[AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE,
           AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_INFO_FU_ETYPE]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE,
           AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE,
           AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE]

//>> GET_[AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE,
           AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_INFO_FW_ECODE]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_XCTS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_XCTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_XCTS,
           AME_AME0_MISC_CERR_RPT_INFO_XCTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_XCTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_XCTS]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_XCTS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_XCTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_XCTS,
           AME_AME0_MISC_CERR_RPT_INFO_XCTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_XCTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_XCTS]

//>> GET_[AME_AME0_MISC_CERR_RPT_INFO_XCTS]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_INFO_XCTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_INFO_XCTS,
           AME_AME0_MISC_CERR_RPT_INFO_XCTS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_XCTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_INFO_XCTS]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_ERATS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_ERATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_ERATS,
           AME_AME0_MISC_CERR_RPT_INFO_ERATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_ERATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_ERATS]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_ERATS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_ERATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_ERATS,
           AME_AME0_MISC_CERR_RPT_INFO_ERATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_ERATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_ERATS]

//>> GET_[AME_AME0_MISC_CERR_RPT_INFO_ERATS]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_INFO_ERATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_INFO_ERATS,
           AME_AME0_MISC_CERR_RPT_INFO_ERATS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_ERATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_INFO_ERATS]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_WBS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_WBS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_WBS,
           AME_AME0_MISC_CERR_RPT_INFO_WBS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_WBS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_WBS]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_WBS]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_WBS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_WBS,
           AME_AME0_MISC_CERR_RPT_INFO_WBS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_WBS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_WBS]

//>> GET_[AME_AME0_MISC_CERR_RPT_INFO_WBS]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_INFO_WBS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_INFO_WBS,
           AME_AME0_MISC_CERR_RPT_INFO_WBS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_WBS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_INFO_WBS]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES,
           AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES,
           AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES]

//>> GET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES,
           AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_AMES]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_AMES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_AMES,
           AME_AME0_MISC_CERR_RPT_INFO_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_AMES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_AMES]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_AMES]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_AMES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_AMES,
           AME_AME0_MISC_CERR_RPT_INFO_AMES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_AMES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_AMES]

//>> GET_[AME_AME0_MISC_CERR_RPT_INFO_AMES]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_INFO_AMES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_INFO_AMES,
           AME_AME0_MISC_CERR_RPT_INFO_AMES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_AMES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_INFO_AMES]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE,
           AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE,
           AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE]

//>> GET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE,
           AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_UE]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE,
           AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE]

//>> SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE,
           AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE]

//>> GET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_CERR_RPT_INFO));
#endif
    return i_data.extractToRight<AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE,
           AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_CERR_RPT_INFO_FIRST_CE]

//>> PREP_[AME_ATL_MISC_DEBUG_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_DEBUG_CONFIG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_DEBUG_CONFIG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_DEBUG_CONFIG2]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_DEBUG_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_DEBUG_CONFIG2;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_DEBUG_CONFIG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2]

//>> PUT_[AME_ATL_MISC_DEBUG_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_DEBUG_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_DEBUG_CONFIG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_DEBUG_CONFIG2]


//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B8_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B8_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_B8_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B9_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B9_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_B9_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_0_B10_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_1_B10_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G0_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G1_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL]

//>> SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL]

//>> GET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_DEBUG_CONFIG2));
#endif
    return i_data.extractToRight<AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL,
           AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_DEBUG_CONFIG2_B10_G2_SEL]

//>> PREP_[CS_CTL_MISC_BDF2PE_15_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_15_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_15_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_15_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_15_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_15_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_15_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_15_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_15_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_15_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_15_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_15_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_15_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_15_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_15_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_15_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_15_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_15_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_15_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_15_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_15_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_15_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_15_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_15_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_15_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_15_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_15_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_15_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_15_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_15_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_15_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_15_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_15_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_15_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_15_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_15_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_15_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_15_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_15_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_15_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_MASK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_CERR_MASK0]

//>> GET_[CS_CTL_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_MASK0;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_CERR_MASK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0]

//>> PUT_[CS_CTL_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_CERR_MASK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_CERR_MASK0]


//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NCF_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NCF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NCF_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NCF_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NCF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NCF_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NCF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NCF_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NCF_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NCF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NCF_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NCF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NCF_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NCF_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NCF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NCF_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NCF_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NCF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NCF_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NCF_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NCF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_4]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_4]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_4]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_4]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_4]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_4]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_4]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_5]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_5]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_5]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_5]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_5]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_5]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_5]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_6]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_6]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_6]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_6]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_6]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_6]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_6]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_7]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_7]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_7]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_7]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_7]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_7]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_7]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_8]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_8]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_8]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_8]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_8]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_8]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_8]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_9]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_9]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_9]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_9]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_9]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_9]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_9]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_10]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_10]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_10]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_10]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_10]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_10]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_10]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_11]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_11]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_11]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_11]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_11]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_11]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_11]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_12]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_12]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_12]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_12]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_12]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_12]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_12]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_12]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_13]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_13]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_13]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_13]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_13]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_13]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_13]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_13]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_14]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_14]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_14]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_14]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_14]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_14]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_14]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_14]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_15]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_15]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_15]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_15]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_15]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_15]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_15]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_15]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_16]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_16]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_16]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_16]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_16]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_16]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_16]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_16]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_17]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_17]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_17]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_17]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_17]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_17]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_17]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_17]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_18]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_18]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_18]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_18]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_18]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_18]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_18]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_18]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_19]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_19]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_19]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_19]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_19]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_19]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_19]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_19]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_20]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_20]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_20]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_20]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_20]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_20]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_20]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_20]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_20]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_20]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_20]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_21]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_21]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_21]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_21]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_21]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_21]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_21]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_21]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_21]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_21]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_21]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_22]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_22]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_22]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_22]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_22]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_22]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_22]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_22]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_22]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_22]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_22]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_23]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_23]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_23]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_NVF_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_23]

//>> SET_[CS_CTL_MISC_CERR_MASK0_NVF_23]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_NVF_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_NVF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_NVF_23]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_NVF_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_NVF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_NVF_23]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_23]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_NVF_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_NVF_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_23]

//>> GET_[CS_CTL_MISC_CERR_MASK0_NVF_23]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_NVF_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_NVF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_NVF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_NVF_23]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_4]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_4]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_4]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_4]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_4]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_4]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_4]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_5]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_5]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_5]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_5]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_5]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_5]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_5]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_6]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_6]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_6]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_6]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_6]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_6]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_6]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_7]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_7]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_7]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_7]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_7]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_7]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_7]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_8]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_8]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_8]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_8]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_8]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_8]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_8]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_8]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_9]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_9]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_9]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_9]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_9]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_9]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_9]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_9]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_10]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_10]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_10]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_10]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_10]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_10]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_10]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_10]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_11]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_11]

//>> SET_[CS_CTL_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_OCR_11]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_OCR_11]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_11]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_11]

//>> GET_[CS_CTL_MISC_CERR_MASK0_OCR_11]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_OCR_11]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_4]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_4]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_4]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_4]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_4]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_4]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_4]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_5]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_5]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_5]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_5]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_5]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_5]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_5]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_6]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_6]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_6]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_6]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_6]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_6]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_6]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_7]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_7]

//>> SET_[CS_CTL_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_ASBE_7]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_ASBE_7]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_7]

//>> GET_[CS_CTL_MISC_CERR_MASK0_ASBE_7]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_ASBE_7]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_PBR_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_PBR_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_PBR_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_PBR_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_PBR_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_PBR_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_PBR_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_PBR_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_PBR_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_PBR_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_PBR_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_PBR_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_PBR_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_REG_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_REG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_REG_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_REG_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_REG_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_REG_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_REG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_REG_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_REG_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_REG_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_REG_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_REG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_REG_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_REG_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_REG_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_REG_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_REG_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_REG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_REG_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_REG_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_REG_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_DUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_DUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_DUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_0]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_DUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_DUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_DUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_DUE_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_DUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_DUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_DUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_DUE_0]

//>> GET_[CS_CTL_MISC_CERR_MASK0_DUE_0]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_DUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_DUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_DUE_0]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_DUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_DUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_DUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_1]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_DUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_DUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_DUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_DUE_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_DUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_DUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_DUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_DUE_1]

//>> GET_[CS_CTL_MISC_CERR_MASK0_DUE_1]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_DUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_DUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_DUE_1]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_DUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_DUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_DUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_2]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_DUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_DUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_DUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_DUE_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_DUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_DUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_DUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_DUE_2]

//>> GET_[CS_CTL_MISC_CERR_MASK0_DUE_2]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_DUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_DUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_DUE_2]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_DUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MASK0_DUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_3]

//>> SET_[CS_CTL_MISC_CERR_MASK0_DUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MASK0_DUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_CTL_MISC_CERR_MASK0_DUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MASK0_DUE_3]

//>> CLEAR_[CS_CTL_MISC_CERR_MASK0_DUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CERR_MASK0_DUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_CTL_MISC_CERR_MASK0_DUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CERR_MASK0_DUE_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_DUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MASK0_DUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MASK0_DUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_DUE_3]

//>> GET_[CS_CTL_MISC_CERR_MASK0_DUE_3]
static inline bool GET_CS_CTL_MISC_CERR_MASK0_DUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_CTL_MISC_CERR_MASK0_DUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CERR_MASK0_DUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MASK0_DUE_3]

//>> PREP_[CS_SM0_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_FIRST0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CERR_FIRST0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_FIRST0;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_FIRST0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0]

//>> PUT_[CS_SM0_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_FIRST0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CERR_FIRST0]


//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]

//>> SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]

//>> GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]
static inline bool GET_CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_FIRST0_OCR_15]

//>> PREP_[CS_SM0_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CERR_MESSAGE4]

//>> GET_[CS_SM0_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MESSAGE4;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MESSAGE4]

//>> PUT_[CS_SM0_MCP_MISC_CERR_MESSAGE4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_MESSAGE4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE4));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_MESSAGE4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CERR_MESSAGE4]


//>> SET_[CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE4));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> SET_[CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE4));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> GET_[CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MESSAGE4));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4,
           CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MESSAGE4_CERR_MESSAGE_BITS4]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3]


//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> PREP_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_PERF_ADDR_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG]

//>> GET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_PERF_ADDR_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_PERF_ADDR_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG]

//>> PUT_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_PERF_ADDR_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG]


//>> SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR,
           CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]

//>> SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR,
           CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]

//>> GET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR,
           CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]

//>> SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR,
           CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]

//>> SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR,
           CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]

//>> GET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR,
           CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]

//>> SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1,
           CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1,
           CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1,
           CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]

//>> PREP_[CS_SM1_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_FIRST0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_FIRST0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_FIRST0;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_FIRST0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0]

//>> PUT_[CS_SM1_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_FIRST0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_FIRST0]


//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]
static inline bool GET_CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_FIRST0_OCR_15]

//>> PREP_[CS_SM1_SNP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CONFIG1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG1;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1]

//>> PUT_[CS_SM1_SNP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CONFIG1]


//>> SET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL,
           CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL,
           CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL,
           CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA,
           CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA,
           CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA,
           CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1_HOST_TAG_SIZE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY,
           CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY,
           CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY,
           CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT,
           CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT,
           CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT,
           CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME,
           CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME,
           CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME,
           CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME,
           CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME,
           CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME,
           CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH,
           CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH,
           CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH,
           CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1_THROT_ADDR_HASH]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2,
           CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2]

//>> SET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2,
           CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2]

//>> GET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2,
           CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG1_1_RESERVED2]

//>> PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0]

//>> PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0]


//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> PREP_[CS_SM2_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_FIRST0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CERR_FIRST0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_FIRST0;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_FIRST0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0]

//>> PUT_[CS_SM2_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_FIRST0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CERR_FIRST0]


//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]

//>> SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]

//>> CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]

//>> GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]
static inline bool GET_CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_FIRST0_OCR_15]

//>> PREP_[CS_SM2_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CERR_MESSAGE1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MESSAGE1]

//>> PUT_[CS_SM2_MCP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE1));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CERR_MESSAGE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CERR_MESSAGE1]


//>> SET_[CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> SET_[CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> GET_[CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CERR_MESSAGE1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> PREP_[CS_SM2_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_DEBUG1_CONFIG]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG]

//>> PUT_[CS_SM2_MCP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_DEBUG1_CONFIG]


//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> CLEAR_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]
static inline bool GET_CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_DEBUG1_CONFIG_ACT]

//>> PREP_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG]

//>> GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_PERF_MASK_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG]

//>> PUT_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_PERF_MASK_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG]


//>> SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]

//>> SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]

//>> GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]

//>> SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP]

//>> SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP]

//>> GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_CRESP]

//>> SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE]

//>> SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE]

//>> GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_SCOPE]

//>> SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD]

//>> SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD]

//>> GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_MCMD]

//>> SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]

//>> SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]

//>> GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1,
           CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]

//>> PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3]

//>> PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3]


//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_PR_DMA_INJ]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_DMA_PR_W]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_ADD]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_AND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_OR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_XOR]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMW_CAS_T]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_INC_E]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE0_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE1_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE2_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE3_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE4_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE5_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE6_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_WRENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_RDENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_AWENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_BRK3_SOURCE7_ARENA]

//>> PREP_[CS_SM2_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_MACHINE_ALLOC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_MACHINE_ALLOC]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_MACHINE_ALLOC;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_MACHINE_ALLOC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC]

//>> PUT_[CS_SM2_SNP_MISC_MACHINE_ALLOC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_MACHINE_ALLOC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_MACHINE_ALLOC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_MACHINE_ALLOC]


//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> CLEAR_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]
static inline bool GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_MACHINE_ALLOC]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> CLEAR_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]
static inline bool GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_ENABLE_EXCEED_HIGH]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_MACHINES]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_WATER_IDLE]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS1]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_MIN_SHARE]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_HIGH_BONUS2]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_MAX_HIGH_RESERVED]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL0]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL1]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL2]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_MACHINE_ALLOC));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3,
           CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_MACHINE_ALLOC_SMAL_DEBUG_SEL3]

//>> PREP_[CS_SM3_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_DIR_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_DIR_MISC_DEBUG1_CONFIG]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_DIR_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_DIR_MISC_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG]

//>> PUT_[CS_SM3_DIR_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_DIR_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_DIR_MISC_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_DIR_MISC_DEBUG1_CONFIG]


//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.setBit<CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> CLEAR_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]
static inline bool GET_CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_DIR_MISC_DEBUG1_CONFIG));
#endif
    return i_data.getBit<CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_DIR_MISC_DEBUG1_CONFIG_ACT]

//>> PREP_[CS_SM3_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_FIRST0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_FIRST0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_FIRST0;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_FIRST0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0]

//>> PUT_[CS_SM3_MCP_MISC_CERR_FIRST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_FIRST0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_FIRST0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_FIRST0]


//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_NVF_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_ASBE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_PBR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_REG_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]
static inline bool GET_CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_FIRST0));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_FIRST0_OCR_15]

//>> PREP_[CS_SM3_MCP_MISC_CERR_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_HOLD1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_HOLD1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_HOLD1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_HOLD1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_HOLD1;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_HOLD1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1]

//>> PUT_[CS_SM3_MCP_MISC_CERR_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_HOLD1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_HOLD1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_HOLD1]


//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_NLGX_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_FWD_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_AUE_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_PBF_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_LDA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_HOLD1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_HOLD1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_HOLD1));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_HOLD1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_HOLD1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_HOLD1_STA_3]

//>> PREP_[CS_SM3_MCP_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CONFIG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CONFIG2]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CONFIG2;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CONFIG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2]

//>> PUT_[CS_SM3_MCP_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CONFIG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CONFIG2]


//>> SET_[CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK,
           CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK,
           CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK,
           CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> CLEAR_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline bool GET_CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER,
           CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER,
           CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER,
           CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_DCARM_TIMER]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS,
           CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_2_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_2_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_2_RESERVED,
           CS_SM3_MCP_MISC_CONFIG2_2_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_2_RESERVED]

//>> SET_[CS_SM3_MCP_MISC_CONFIG2_2_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CONFIG2_2_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CONFIG2_2_RESERVED,
           CS_SM3_MCP_MISC_CONFIG2_2_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CONFIG2_2_RESERVED]

//>> GET_[CS_SM3_MCP_MISC_CONFIG2_2_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CONFIG2_2_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CONFIG2_2_RESERVED,
           CS_SM3_MCP_MISC_CONFIG2_2_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CONFIG2_2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CONFIG2_2_RESERVED]

//>> PREP_[CS_SM3_SNP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CERR_MASK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_CERR_MASK0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CERR_MASK0;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CERR_MASK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0]

//>> PUT_[CS_SM3_SNP_MISC_CERR_MASK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CERR_MASK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CERR_MASK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_CERR_MASK0]


//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NCF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NCF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NCF_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBR_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBP_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBP_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBP_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBC_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBC_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBC_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_4]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_5]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_6]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_7]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_8]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_9]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_10]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_11]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_12]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_13]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_14]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_15]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_16]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_17]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_18]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_19]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_20]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_21]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_22]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_NLG_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_NLG_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_NLG_23]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_0]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_1]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_2]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]

//>> SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]

//>> CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CERR_MASK0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CERR_MASK0_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]

//>> GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]
static inline bool GET_CS_SM3_SNP_MISC_CERR_MASK0_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CERR_MASK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CERR_MASK0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CERR_MASK0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CERR_MASK0_PBF_3]

//>> PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0]

//>> PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0]


//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAG]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_TAGMASK]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PAU]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_PCIE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_MASK_L2L3]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_RDEND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WRSTART]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_SRC0_WREND]

//>> PREP_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_TOPOLOGY_TABLE3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_TOPOLOGY_TABLE3;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_TOPOLOGY_TABLE3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3]

//>> PUT_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_TOPOLOGY_TABLE3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3]


//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_ABLE_24_31]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY24]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY25]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY26]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY27]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY28]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY29]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY30]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_TOPOLOGY_TABLE3));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31,
           CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_TOPOLOGY_TABLE3_TRY31]

//>> PREP_[DAT_MISC_CERR_ECC_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_CERR_ECC_HOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_ECC_HOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DAT_MISC_CERR_ECC_HOLD]

//>> GET_[DAT_MISC_CERR_ECC_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_CERR_ECC_HOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_ECC_HOLD;
#endif
    return fapi2::getScom(i_target, DAT_MISC_CERR_ECC_HOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD]

//>> PUT_[DAT_MISC_CERR_ECC_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_CERR_ECC_HOLD(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return fapi2::putScom(i_target, DAT_MISC_CERR_ECC_HOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DAT_MISC_CERR_ECC_HOLD]


//>> SET_[DAT_MISC_CERR_ECC_HOLD_PT_UE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PT_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PT_UE,
           DAT_MISC_CERR_ECC_HOLD_PT_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PT_UE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_PT_UE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PT_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PT_UE,
           DAT_MISC_CERR_ECC_HOLD_PT_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PT_UE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_PT_UE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_PT_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_PT_UE,
           DAT_MISC_CERR_ECC_HOLD_PT_UE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PT_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_PT_UE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_PR_UE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PR_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PR_UE,
           DAT_MISC_CERR_ECC_HOLD_PR_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PR_UE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_PR_UE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PR_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PR_UE,
           DAT_MISC_CERR_ECC_HOLD_PR_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PR_UE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_PR_UE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_PR_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_PR_UE,
           DAT_MISC_CERR_ECC_HOLD_PR_UE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_PR_UE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_BR_UE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_BR_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_BR_UE,
           DAT_MISC_CERR_ECC_HOLD_BR_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_BR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_BR_UE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_BR_UE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_BR_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_BR_UE,
           DAT_MISC_CERR_ECC_HOLD_BR_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_BR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_BR_UE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_BR_UE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_BR_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_BR_UE,
           DAT_MISC_CERR_ECC_HOLD_BR_UE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_BR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_BR_UE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_IR_UE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_IR_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_IR_UE,
           DAT_MISC_CERR_ECC_HOLD_IR_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_IR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_IR_UE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_IR_UE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_IR_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_IR_UE,
           DAT_MISC_CERR_ECC_HOLD_IR_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_IR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_IR_UE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_IR_UE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_IR_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_IR_UE,
           DAT_MISC_CERR_ECC_HOLD_IR_UE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_IR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_IR_UE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_OR_UE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_OR_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_OR_UE,
           DAT_MISC_CERR_ECC_HOLD_OR_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_OR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_OR_UE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_OR_UE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_OR_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_OR_UE,
           DAT_MISC_CERR_ECC_HOLD_OR_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_OR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_OR_UE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_OR_UE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_OR_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_OR_UE,
           DAT_MISC_CERR_ECC_HOLD_OR_UE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_OR_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_OR_UE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_PT_SUE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PT_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PT_SUE,
           DAT_MISC_CERR_ECC_HOLD_PT_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PT_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PT_SUE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_PT_SUE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PT_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PT_SUE,
           DAT_MISC_CERR_ECC_HOLD_PT_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PT_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PT_SUE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_PT_SUE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_PT_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_PT_SUE,
           DAT_MISC_CERR_ECC_HOLD_PT_SUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PT_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_PT_SUE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_PR_SUE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PR_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PR_SUE,
           DAT_MISC_CERR_ECC_HOLD_PR_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PR_SUE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_PR_SUE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PR_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PR_SUE,
           DAT_MISC_CERR_ECC_HOLD_PR_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PR_SUE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_PR_SUE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_PR_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_PR_SUE,
           DAT_MISC_CERR_ECC_HOLD_PR_SUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_PR_SUE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_BR_SUE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_BR_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_BR_SUE,
           DAT_MISC_CERR_ECC_HOLD_BR_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_BR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_BR_SUE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_BR_SUE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_BR_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_BR_SUE,
           DAT_MISC_CERR_ECC_HOLD_BR_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_BR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_BR_SUE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_BR_SUE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_BR_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_BR_SUE,
           DAT_MISC_CERR_ECC_HOLD_BR_SUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_BR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_BR_SUE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_IR_SUE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_IR_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_IR_SUE,
           DAT_MISC_CERR_ECC_HOLD_IR_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_IR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_IR_SUE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_IR_SUE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_IR_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_IR_SUE,
           DAT_MISC_CERR_ECC_HOLD_IR_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_IR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_IR_SUE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_IR_SUE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_IR_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_IR_SUE,
           DAT_MISC_CERR_ECC_HOLD_IR_SUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_IR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_IR_SUE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_OR_SUE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_OR_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_OR_SUE,
           DAT_MISC_CERR_ECC_HOLD_OR_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_OR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_OR_SUE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_OR_SUE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_OR_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_OR_SUE,
           DAT_MISC_CERR_ECC_HOLD_OR_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_OR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_OR_SUE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_OR_SUE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_OR_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_OR_SUE,
           DAT_MISC_CERR_ECC_HOLD_OR_SUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_OR_SUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_OR_SUE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_PT_CE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PT_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PT_CE,
           DAT_MISC_CERR_ECC_HOLD_PT_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PT_CE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_PT_CE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PT_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PT_CE,
           DAT_MISC_CERR_ECC_HOLD_PT_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PT_CE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_PT_CE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_PT_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_PT_CE,
           DAT_MISC_CERR_ECC_HOLD_PT_CE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PT_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_PT_CE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_PR_CE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PR_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PR_CE,
           DAT_MISC_CERR_ECC_HOLD_PR_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PR_CE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_PR_CE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_PR_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_PR_CE,
           DAT_MISC_CERR_ECC_HOLD_PR_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_PR_CE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_PR_CE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_PR_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_PR_CE,
           DAT_MISC_CERR_ECC_HOLD_PR_CE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_PR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_PR_CE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_BR_CE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_BR_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_BR_CE,
           DAT_MISC_CERR_ECC_HOLD_BR_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_BR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_BR_CE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_BR_CE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_BR_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_BR_CE,
           DAT_MISC_CERR_ECC_HOLD_BR_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_BR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_BR_CE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_BR_CE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_BR_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_BR_CE,
           DAT_MISC_CERR_ECC_HOLD_BR_CE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_BR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_BR_CE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_IR_CE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_IR_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_IR_CE,
           DAT_MISC_CERR_ECC_HOLD_IR_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_IR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_IR_CE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_IR_CE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_IR_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_IR_CE,
           DAT_MISC_CERR_ECC_HOLD_IR_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_IR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_IR_CE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_IR_CE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_IR_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_IR_CE,
           DAT_MISC_CERR_ECC_HOLD_IR_CE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_IR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_IR_CE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_OR_CE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_OR_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_OR_CE,
           DAT_MISC_CERR_ECC_HOLD_OR_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_OR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_OR_CE]

//>> SET_[DAT_MISC_CERR_ECC_HOLD_OR_CE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_ECC_HOLD_OR_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_ECC_HOLD_OR_CE,
           DAT_MISC_CERR_ECC_HOLD_OR_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_OR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_ECC_HOLD_OR_CE]

//>> GET_[DAT_MISC_CERR_ECC_HOLD_OR_CE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_ECC_HOLD_OR_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_ECC_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_ECC_HOLD_OR_CE,
           DAT_MISC_CERR_ECC_HOLD_OR_CE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_ECC_HOLD_OR_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_ECC_HOLD_OR_CE]

//>> PREP_[FIR_ACTION0_REG_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_ACTION0_REG_0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION0_REG_0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_ACTION0_REG_0]

//>> GET_[FIR_ACTION0_REG_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_ACTION0_REG_0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION0_REG_0;
#endif
    return fapi2::getScom(i_target, FIR_ACTION0_REG_0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_ACTION0_REG_0]

//>> PUT_[FIR_ACTION0_REG_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_ACTION0_REG_0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_0));
#endif
    return fapi2::putScom(i_target, FIR_ACTION0_REG_0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_ACTION0_REG_0]


//>> SET_[FIR_ACTION0_REG_0_FIR_ACTION0_0]
static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION0_REG_0_FIR_ACTION0_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_0));
#endif
    return o_data.insertFromRight<FIR_ACTION0_REG_0_FIR_ACTION0_0,
           FIR_ACTION0_REG_0_FIR_ACTION0_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_ACTION0_REG_0_FIR_ACTION0_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_ACTION0_REG_0_FIR_ACTION0_0]

//>> SET_[FIR_ACTION0_REG_0_FIR_ACTION0_0]
static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION0_REG_0_FIR_ACTION0_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_0));
#endif
    return o_data.insertFromRight<FIR_ACTION0_REG_0_FIR_ACTION0_0,
           FIR_ACTION0_REG_0_FIR_ACTION0_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_ACTION0_REG_0_FIR_ACTION0_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_ACTION0_REG_0_FIR_ACTION0_0]

//>> GET_[FIR_ACTION0_REG_0_FIR_ACTION0_0]
static inline fapi2::buffer<uint64_t>& GET_FIR_ACTION0_REG_0_FIR_ACTION0_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION0_REG_0));
#endif
    return i_data.extractToRight<FIR_ACTION0_REG_0_FIR_ACTION0_0,
           FIR_ACTION0_REG_0_FIR_ACTION0_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_ACTION0_REG_0_FIR_ACTION0_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_ACTION0_REG_0_FIR_ACTION0_0]

//>> PREP_[MISC_REGS_BDF2PE_12_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_12_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_12_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_BDF2PE_12_CONFIG]

//>> GET_[MISC_REGS_BDF2PE_12_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_12_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_12_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_12_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_12_CONFIG]

//>> PUT_[MISC_REGS_BDF2PE_12_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_12_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_12_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_BDF2PE_12_CONFIG]


//>> SET_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_12_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_12_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_12_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_12_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_12_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_12_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_12_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_12_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_12_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_12_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_BDF2PE_12_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_12_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_12_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_12_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_12_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_12_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_12_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_12_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_12_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_12_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_12_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_12_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_12_CONFIG_RESERVED]

//>> GET_[MISC_REGS_BDF2PE_12_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_12_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_12_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_12_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_12_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_12_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_12_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_12_CONFIG_PE,
           MISC_REGS_BDF2PE_12_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_12_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_12_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_12_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_12_CONFIG_PE,
           MISC_REGS_BDF2PE_12_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_12_CONFIG_PE]

//>> GET_[MISC_REGS_BDF2PE_12_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_12_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_12_CONFIG_PE,
           MISC_REGS_BDF2PE_12_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_12_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_12_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_12_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_12_CONFIG_BDF,
           MISC_REGS_BDF2PE_12_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_12_CONFIG_BDF]

//>> SET_[MISC_REGS_BDF2PE_12_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_12_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_12_CONFIG_BDF,
           MISC_REGS_BDF2PE_12_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_12_CONFIG_BDF]

//>> GET_[MISC_REGS_BDF2PE_12_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_12_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_12_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_12_CONFIG_BDF,
           MISC_REGS_BDF2PE_12_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_12_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_12_CONFIG_BDF]

//>> PREP_[MISC_REGS_INT_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_1_CONFIG]

//>> GET_[MISC_REGS_INT_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_1_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_1_CONFIG]

//>> PUT_[MISC_REGS_INT_1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_1_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_1_CONFIG]


//>> SET_[MISC_REGS_INT_1_CONFIG_CONFIG_INT_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_1_CONFIG_CONFIG_INT_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_1_CONFIG_CONFIG_INT_1,
           MISC_REGS_INT_1_CONFIG_CONFIG_INT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_1_CONFIG_CONFIG_INT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_1_CONFIG_CONFIG_INT_1]

//>> SET_[MISC_REGS_INT_1_CONFIG_CONFIG_INT_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_1_CONFIG_CONFIG_INT_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_1_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_1_CONFIG_CONFIG_INT_1,
           MISC_REGS_INT_1_CONFIG_CONFIG_INT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_1_CONFIG_CONFIG_INT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_1_CONFIG_CONFIG_INT_1]

//>> GET_[MISC_REGS_INT_1_CONFIG_CONFIG_INT_1]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_1_CONFIG_CONFIG_INT_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_1_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_INT_1_CONFIG_CONFIG_INT_1,
           MISC_REGS_INT_1_CONFIG_CONFIG_INT_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_1_CONFIG_CONFIG_INT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_1_CONFIG_CONFIG_INT_1]

//>> PREP_[MISC_REGS_INT_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_BAR]

//>> GET_[MISC_REGS_INT_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_BAR;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_BAR]

//>> PUT_[MISC_REGS_INT_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_BAR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_BAR));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_BAR]


//>> SET_[MISC_REGS_INT_BAR_CONFIG_INT_BAR]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_BAR_CONFIG_INT_BAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_BAR));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_BAR_CONFIG_INT_BAR,
           MISC_REGS_INT_BAR_CONFIG_INT_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_BAR_CONFIG_INT_BAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_BAR_CONFIG_INT_BAR]

//>> SET_[MISC_REGS_INT_BAR_CONFIG_INT_BAR]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_BAR_CONFIG_INT_BAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_BAR));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_BAR_CONFIG_INT_BAR,
           MISC_REGS_INT_BAR_CONFIG_INT_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_BAR_CONFIG_INT_BAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_BAR_CONFIG_INT_BAR]

//>> GET_[MISC_REGS_INT_BAR_CONFIG_INT_BAR]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_BAR_CONFIG_INT_BAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_BAR));
#endif
    return i_data.extractToRight<MISC_REGS_INT_BAR_CONFIG_INT_BAR,
           MISC_REGS_INT_BAR_CONFIG_INT_BAR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_BAR_CONFIG_INT_BAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_BAR_CONFIG_INT_BAR]

//>> PREP_[MISC_REGS_INT_LOG_0_PE11]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE11(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE11;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE11]

//>> GET_[MISC_REGS_INT_LOG_0_PE11]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE11(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE11;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE11, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE11]

//>> PUT_[MISC_REGS_INT_LOG_0_PE11]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE11(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE11, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE11]


//>> SET_[MISC_REGS_INT_LOG_0_PE11_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE11_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE11_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE11_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE11_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE11_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE11_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE11_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE11_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE11_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE11_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE11_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE11_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE11_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE11_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE11_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE11_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE11_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE11_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE11_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE11_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE11_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE11_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE11_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE11_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE11_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE11_LVL,
           MISC_REGS_INT_LOG_0_PE11_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE11_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE11_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE11_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE11_LVL,
           MISC_REGS_INT_LOG_0_PE11_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE11_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE11_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE11_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE11_LVL,
           MISC_REGS_INT_LOG_0_PE11_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE11_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE11_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE11_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE11_RSVD0,
           MISC_REGS_INT_LOG_0_PE11_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE11_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE11_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE11_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE11_RSVD0,
           MISC_REGS_INT_LOG_0_PE11_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE11_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE11_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE11_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE11));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE11_RSVD0,
           MISC_REGS_INT_LOG_0_PE11_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE11_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE11_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_0_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_0_PE3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_0_PE3]

//>> GET_[MISC_REGS_INT_LOG_0_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_0_PE3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_0_PE3;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_0_PE3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE3]

//>> PUT_[MISC_REGS_INT_LOG_0_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_0_PE3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_0_PE3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_0_PE3]


//>> SET_[MISC_REGS_INT_LOG_0_PE3_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE3_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE3_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE3_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE3_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE3_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE3_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE3_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE3_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE3_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_0_PE3_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE3_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_0_PE3_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_0_PE3_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_0_PE3_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_0_PE3_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE3_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE3_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE3_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE3_VLD]

//>> GET_[MISC_REGS_INT_LOG_0_PE3_VLD]
static inline bool GET_MISC_REGS_INT_LOG_0_PE3_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_0_PE3_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE3_VLD]

//>> SET_[MISC_REGS_INT_LOG_0_PE3_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE3_LVL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE3_LVL,
           MISC_REGS_INT_LOG_0_PE3_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE3_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE3_LVL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE3_LVL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE3_LVL,
           MISC_REGS_INT_LOG_0_PE3_LVL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE3_LVL]

//>> GET_[MISC_REGS_INT_LOG_0_PE3_LVL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE3_LVL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE3_LVL,
           MISC_REGS_INT_LOG_0_PE3_LVL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_LVL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE3_LVL]

//>> SET_[MISC_REGS_INT_LOG_0_PE3_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE3_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE3_RSVD0,
           MISC_REGS_INT_LOG_0_PE3_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE3_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_0_PE3_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_0_PE3_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_0_PE3_RSVD0,
           MISC_REGS_INT_LOG_0_PE3_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_0_PE3_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_0_PE3_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_0_PE3_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_0_PE3));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_0_PE3_RSVD0,
           MISC_REGS_INT_LOG_0_PE3_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_0_PE3_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_0_PE3_RSVD0]

//>> PREP_[MISC_REGS_INT_LOG_1_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_INT_LOG_1_PE3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_INT_LOG_1_PE3]

//>> GET_[MISC_REGS_INT_LOG_1_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_INT_LOG_1_PE3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_INT_LOG_1_PE3;
#endif
    return fapi2::getScom(i_target, MISC_REGS_INT_LOG_1_PE3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE3]

//>> PUT_[MISC_REGS_INT_LOG_1_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_INT_LOG_1_PE3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return fapi2::putScom(i_target, MISC_REGS_INT_LOG_1_PE3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_INT_LOG_1_PE3]


//>> SET_[MISC_REGS_INT_LOG_1_PE3_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE3_VLD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE3_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE3_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE3_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE3_VLD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE3_VLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE3_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE3_VLD]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE3_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return o_data.setBit<MISC_REGS_INT_LOG_1_PE3_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE3_VLD]

//>> CLEAR_[MISC_REGS_INT_LOG_1_PE3_VLD]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_INT_LOG_1_PE3_VLD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return o_data.clearBit<MISC_REGS_INT_LOG_1_PE3_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_INT_LOG_1_PE3_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE3_VLD]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE3_VLD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE3_VLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE3_VLD]

//>> GET_[MISC_REGS_INT_LOG_1_PE3_VLD]
static inline bool GET_MISC_REGS_INT_LOG_1_PE3_VLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return i_data.getBit<MISC_REGS_INT_LOG_1_PE3_VLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_VLD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE3_VLD]

//>> SET_[MISC_REGS_INT_LOG_1_PE3_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE3_DETAIL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE3_DETAIL,
           MISC_REGS_INT_LOG_1_PE3_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE3_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE3_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE3_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE3_DETAIL,
           MISC_REGS_INT_LOG_1_PE3_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE3_DETAIL]

//>> GET_[MISC_REGS_INT_LOG_1_PE3_DETAIL]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE3_DETAIL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE3_DETAIL,
           MISC_REGS_INT_LOG_1_PE3_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_DETAIL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE3_DETAIL]

//>> SET_[MISC_REGS_INT_LOG_1_PE3_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE3_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE3_CQ,
           MISC_REGS_INT_LOG_1_PE3_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE3_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE3_CQ]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE3_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE3_CQ,
           MISC_REGS_INT_LOG_1_PE3_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE3_CQ]

//>> GET_[MISC_REGS_INT_LOG_1_PE3_CQ]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE3_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE3_CQ,
           MISC_REGS_INT_LOG_1_PE3_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_CQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE3_CQ]

//>> SET_[MISC_REGS_INT_LOG_1_PE3_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE3_RSVD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE3_RSVD0,
           MISC_REGS_INT_LOG_1_PE3_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE3_RSVD0]

//>> SET_[MISC_REGS_INT_LOG_1_PE3_RSVD0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_INT_LOG_1_PE3_RSVD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_INT_LOG_1_PE3_RSVD0,
           MISC_REGS_INT_LOG_1_PE3_RSVD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_INT_LOG_1_PE3_RSVD0]

//>> GET_[MISC_REGS_INT_LOG_1_PE3_RSVD0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_INT_LOG_1_PE3_RSVD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_INT_LOG_1_PE3));
#endif
    return i_data.extractToRight<MISC_REGS_INT_LOG_1_PE3_RSVD0,
           MISC_REGS_INT_LOG_1_PE3_RSVD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_INT_LOG_1_PE3_RSVD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_INT_LOG_1_PE3_RSVD0]

//>> PREP_[MISC_REGS_OPTICAL_IO_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_OPTICAL_IO_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_OPTICAL_IO_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_OPTICAL_IO_CONFIG]

//>> GET_[MISC_REGS_OPTICAL_IO_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_OPTICAL_IO_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_OPTICAL_IO_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_OPTICAL_IO_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_OPTICAL_IO_CONFIG]

//>> PUT_[MISC_REGS_OPTICAL_IO_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_OPTICAL_IO_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_OPTICAL_IO_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_OPTICAL_IO_CONFIG]


//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]

//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]

//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]

//>> CLEAR_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]

//>> GET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]

//>> GET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]
static inline bool GET_MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL0_NOT_OTH]

//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]

//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]

//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]

//>> CLEAR_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]

//>> GET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]

//>> GET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]
static inline bool GET_MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_OPTICAL_IO_CONFIG_NTL1_NOT_OTH]

//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]

//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]

//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]

//>> CLEAR_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]

//>> GET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]

//>> GET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]
static inline bool GET_MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL0_NOT_OTH]

//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]

//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]

//>> SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]

//>> CLEAR_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]

//>> GET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]

//>> GET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]
static inline bool GET_MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_OPTICAL_IO_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_OPTICAL_IO_CONFIG_OTL1_NOT_OTH]

//>> PREP_[MISC_REGS_PESTB_ADDR_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_ADDR_PE3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_ADDR_PE3]

//>> GET_[MISC_REGS_PESTB_ADDR_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_ADDR_PE3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_ADDR_PE3;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_ADDR_PE3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE3]

//>> PUT_[MISC_REGS_PESTB_ADDR_PE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_ADDR_PE3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE3));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_ADDR_PE3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_ADDR_PE3]


//>> SET_[MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3,
           MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3]

//>> SET_[MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE3));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3,
           MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3]

//>> GET_[MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_ADDR_PE3));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3,
           MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_ADDR_PE3_DMA_STOPPED_STATE_ADDR_PE3]

//>> PREP_[MISC_REGS_PESTB_DATA_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_DATA_PE0]

//>> GET_[MISC_REGS_PESTB_DATA_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE0;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE0]

//>> PUT_[MISC_REGS_PESTB_DATA_PE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE0));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_DATA_PE0]


//>> SET_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]

//>> SET_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE0));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]

//>> SET_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE0));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]

//>> CLEAR_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE0));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]

//>> GET_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE0));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]

//>> GET_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]
static inline bool GET_MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE0));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE0_DMA_STOPPED_STATE_PE0]

//>> PREP_[OTL0_MISC_ALTER_CREDIT_COUNTERS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_ALTER_CREDIT_COUNTERS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_ALTER_CREDIT_COUNTERS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_ALTER_CREDIT_COUNTERS]

//>> GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_ALTER_CREDIT_COUNTERS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_ALTER_CREDIT_COUNTERS;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_ALTER_CREDIT_COUNTERS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS]

//>> PUT_[OTL0_MISC_ALTER_CREDIT_COUNTERS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_ALTER_CREDIT_COUNTERS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_ALTER_CREDIT_COUNTERS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_ALTER_CREDIT_COUNTERS]


//>> SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return o_data.insertFromRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]

//>> SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return o_data.insertFromRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]

//>> SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return o_data.setBit<OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]

//>> CLEAR_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return o_data.clearBit<OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]

//>> GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return i_data.extractToRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]

//>> GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]
static inline bool GET_OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return i_data.getBit<OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_ENABLE]

//>> SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return o_data.insertFromRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED,
           OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED]

//>> SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return o_data.insertFromRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED,
           OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED]

//>> GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return i_data.extractToRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED,
           OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_RESERVED]

//>> SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return o_data.insertFromRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET,
           OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET]

//>> SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return o_data.insertFromRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET,
           OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET]

//>> GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return i_data.extractToRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET,
           OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_TARGET]

//>> SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return o_data.insertFromRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE,
           OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE]

//>> SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return o_data.insertFromRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE,
           OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE]

//>> GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ALTER_CREDIT_COUNTERS));
#endif
    return i_data.extractToRight<OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE,
           OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ALTER_CREDIT_COUNTERS_VALUE]

//>> PREP_[OTL1_MISC_PSL_DSISR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_PSL_DSISR_AN(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PSL_DSISR_AN;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_PSL_DSISR_AN]

//>> GET_[OTL1_MISC_PSL_DSISR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_PSL_DSISR_AN(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PSL_DSISR_AN;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_PSL_DSISR_AN, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_PSL_DSISR_AN]

//>> PUT_[OTL1_MISC_PSL_DSISR_AN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_PSL_DSISR_AN(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_PSL_DSISR_AN, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_PSL_DSISR_AN]


//>> SET_[OTL1_MISC_PSL_DSISR_AN_TF]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_DSISR_AN_TF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_DSISR_AN_TF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_DSISR_AN_TF]

//>> SET_[OTL1_MISC_PSL_DSISR_AN_TF]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_DSISR_AN_TF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_DSISR_AN_TF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_DSISR_AN_TF]

//>> SET_[OTL1_MISC_PSL_DSISR_AN_TF]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_DSISR_AN_TF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return o_data.setBit<OTL1_MISC_PSL_DSISR_AN_TF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_DSISR_AN_TF]

//>> CLEAR_[OTL1_MISC_PSL_DSISR_AN_TF]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_PSL_DSISR_AN_TF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return o_data.clearBit<OTL1_MISC_PSL_DSISR_AN_TF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_PSL_DSISR_AN_TF]

//>> GET_[OTL1_MISC_PSL_DSISR_AN_TF]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PSL_DSISR_AN_TF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return i_data.extractToRight<OTL1_MISC_PSL_DSISR_AN_TF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_DSISR_AN_TF]

//>> GET_[OTL1_MISC_PSL_DSISR_AN_TF]
static inline bool GET_OTL1_MISC_PSL_DSISR_AN_TF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return i_data.getBit<OTL1_MISC_PSL_DSISR_AN_TF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_TF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_DSISR_AN_TF]

//>> SET_[OTL1_MISC_PSL_DSISR_AN_S]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_DSISR_AN_S(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_DSISR_AN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_DSISR_AN_S]

//>> SET_[OTL1_MISC_PSL_DSISR_AN_S]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_DSISR_AN_S(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_DSISR_AN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_DSISR_AN_S]

//>> SET_[OTL1_MISC_PSL_DSISR_AN_S]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_DSISR_AN_S(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return o_data.setBit<OTL1_MISC_PSL_DSISR_AN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_DSISR_AN_S]

//>> CLEAR_[OTL1_MISC_PSL_DSISR_AN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_PSL_DSISR_AN_S(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return o_data.clearBit<OTL1_MISC_PSL_DSISR_AN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_PSL_DSISR_AN_S]

//>> GET_[OTL1_MISC_PSL_DSISR_AN_S]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PSL_DSISR_AN_S(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return i_data.extractToRight<OTL1_MISC_PSL_DSISR_AN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_DSISR_AN_S]

//>> GET_[OTL1_MISC_PSL_DSISR_AN_S]
static inline bool GET_OTL1_MISC_PSL_DSISR_AN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return i_data.getBit<OTL1_MISC_PSL_DSISR_AN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_S chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_DSISR_AN_S]

//>> SET_[OTL1_MISC_PSL_DSISR_AN_CO_RSP]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_DSISR_AN_CO_RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_DSISR_AN_CO_RSP,
           OTL1_MISC_PSL_DSISR_AN_CO_RSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_CO_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_DSISR_AN_CO_RSP]

//>> SET_[OTL1_MISC_PSL_DSISR_AN_CO_RSP]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PSL_DSISR_AN_CO_RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return o_data.insertFromRight<OTL1_MISC_PSL_DSISR_AN_CO_RSP,
           OTL1_MISC_PSL_DSISR_AN_CO_RSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_CO_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PSL_DSISR_AN_CO_RSP]

//>> GET_[OTL1_MISC_PSL_DSISR_AN_CO_RSP]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PSL_DSISR_AN_CO_RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PSL_DSISR_AN));
#endif
    return i_data.extractToRight<OTL1_MISC_PSL_DSISR_AN_CO_RSP,
           OTL1_MISC_PSL_DSISR_AN_CO_RSP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PSL_DSISR_AN_CO_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PSL_DSISR_AN_CO_RSP]

//>> PREP_[XSL_MAIN_WRAP_ERR_MASK_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_WRAP_ERR_MASK_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_WRAP_ERR_MASK_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_WRAP_ERR_MASK_2]

//>> GET_[XSL_MAIN_WRAP_ERR_MASK_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_WRAP_ERR_MASK_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_WRAP_ERR_MASK_2;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_WRAP_ERR_MASK_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERR_MASK_2]

//>> PUT_[XSL_MAIN_WRAP_ERR_MASK_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_WRAP_ERR_MASK_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERR_MASK_2));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_WRAP_ERR_MASK_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_WRAP_ERR_MASK_2]


//>> SET_[XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERR_MASK_2));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL,
           XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL]

//>> SET_[XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERR_MASK_2));
#endif
    return o_data.insertFromRight<XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL,
           XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL]

//>> GET_[XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_WRAP_ERR_MASK_2));
#endif
    return i_data.extractToRight<XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL,
           XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_WRAP_ERR_MASK_2_XSL_WRAP_ERR_MASK_2_DIAL]

//>> PREP_[XTS_ATSD_HYP13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_ATSD_HYP13(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP13;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_ATSD_HYP13]

//>> GET_[XTS_ATSD_HYP13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_ATSD_HYP13(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP13;
#endif
    return fapi2::getScom(i_target, XTS_ATSD_HYP13, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_ATSD_HYP13]

//>> PUT_[XTS_ATSD_HYP13]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_ATSD_HYP13(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP13));
#endif
    return fapi2::putScom(i_target, XTS_ATSD_HYP13, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_ATSD_HYP13]


//>> SET_[XTS_ATSD_HYP13_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP13_MSRHV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP13));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP13_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP13_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP13_MSRHV]

//>> SET_[XTS_ATSD_HYP13_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP13_MSRHV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP13));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP13_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP13_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP13_MSRHV]

//>> SET_[XTS_ATSD_HYP13_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP13_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP13));
#endif
    return o_data.setBit<XTS_ATSD_HYP13_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_ATSD_HYP13_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP13_MSRHV]

//>> CLEAR_[XTS_ATSD_HYP13_MSRHV]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_ATSD_HYP13_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP13));
#endif
    return o_data.clearBit<XTS_ATSD_HYP13_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_ATSD_HYP13_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_ATSD_HYP13_MSRHV]

//>> GET_[XTS_ATSD_HYP13_MSRHV]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP13_MSRHV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP13));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP13_MSRHV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP13_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP13_MSRHV]

//>> GET_[XTS_ATSD_HYP13_MSRHV]
static inline bool GET_XTS_ATSD_HYP13_MSRHV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP13));
#endif
    return i_data.getBit<XTS_ATSD_HYP13_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_ATSD_HYP13_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP13_MSRHV]

//>> SET_[XTS_ATSD_HYP13_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP13_LPARID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP13));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP13_LPARID,
           XTS_ATSD_HYP13_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP13_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP13_LPARID]

//>> SET_[XTS_ATSD_HYP13_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP13_LPARID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP13));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP13_LPARID,
           XTS_ATSD_HYP13_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP13_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP13_LPARID]

//>> GET_[XTS_ATSD_HYP13_LPARID]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP13_LPARID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP13));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP13_LPARID,
           XTS_ATSD_HYP13_LPARID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP13_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP13_LPARID]

//>> PREP_[XTS_ATSD_HYP9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_ATSD_HYP9(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP9;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_ATSD_HYP9]

//>> GET_[XTS_ATSD_HYP9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_ATSD_HYP9(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP9;
#endif
    return fapi2::getScom(i_target, XTS_ATSD_HYP9, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_ATSD_HYP9]

//>> PUT_[XTS_ATSD_HYP9]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_ATSD_HYP9(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP9));
#endif
    return fapi2::putScom(i_target, XTS_ATSD_HYP9, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_ATSD_HYP9]


//>> SET_[XTS_ATSD_HYP9_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP9_MSRHV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP9));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP9_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP9_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP9_MSRHV]

//>> SET_[XTS_ATSD_HYP9_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP9_MSRHV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP9));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP9_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP9_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP9_MSRHV]

//>> SET_[XTS_ATSD_HYP9_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP9_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP9));
#endif
    return o_data.setBit<XTS_ATSD_HYP9_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_ATSD_HYP9_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP9_MSRHV]

//>> CLEAR_[XTS_ATSD_HYP9_MSRHV]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_ATSD_HYP9_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP9));
#endif
    return o_data.clearBit<XTS_ATSD_HYP9_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_ATSD_HYP9_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_ATSD_HYP9_MSRHV]

//>> GET_[XTS_ATSD_HYP9_MSRHV]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP9_MSRHV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP9));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP9_MSRHV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP9_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP9_MSRHV]

//>> GET_[XTS_ATSD_HYP9_MSRHV]
static inline bool GET_XTS_ATSD_HYP9_MSRHV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP9));
#endif
    return i_data.getBit<XTS_ATSD_HYP9_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_ATSD_HYP9_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP9_MSRHV]

//>> SET_[XTS_ATSD_HYP9_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP9_LPARID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP9));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP9_LPARID,
           XTS_ATSD_HYP9_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP9_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP9_LPARID]

//>> SET_[XTS_ATSD_HYP9_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP9_LPARID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP9));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP9_LPARID,
           XTS_ATSD_HYP9_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP9_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP9_LPARID]

//>> GET_[XTS_ATSD_HYP9_LPARID]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP9_LPARID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP9));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP9_LPARID,
           XTS_ATSD_HYP9_LPARID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP9_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP9_LPARID]

//>> PREP_[XTS_REG_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_REG_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_REG_DEBUG1_CONFIG]

//>> GET_[XTS_REG_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_REG_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, XTS_REG_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG]

//>> PUT_[XTS_REG_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_REG_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, XTS_REG_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_REG_DEBUG1_CONFIG]


//>> SET_[XTS_REG_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD0,
           XTS_REG_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD0]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD0,
           XTS_REG_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD0]

//>> GET_[XTS_REG_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_POD0,
           XTS_REG_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_POD0]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD1,
           XTS_REG_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD1]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD1,
           XTS_REG_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD1]

//>> GET_[XTS_REG_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_POD1,
           XTS_REG_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_POD1]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD2,
           XTS_REG_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD2]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD2,
           XTS_REG_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD2]

//>> GET_[XTS_REG_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_POD2,
           XTS_REG_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_POD2]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD3,
           XTS_REG_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD3]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD3,
           XTS_REG_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD3]

//>> GET_[XTS_REG_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_POD3,
           XTS_REG_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_POD3]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD4,
           XTS_REG_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD4]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD4,
           XTS_REG_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD4]

//>> GET_[XTS_REG_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_POD4,
           XTS_REG_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_POD4]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD5,
           XTS_REG_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD5]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD5,
           XTS_REG_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD5]

//>> GET_[XTS_REG_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_POD5,
           XTS_REG_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_POD5]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD6,
           XTS_REG_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD6]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD6,
           XTS_REG_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD6]

//>> GET_[XTS_REG_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_POD6,
           XTS_REG_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_POD6]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD7,
           XTS_REG_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD7]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD7,
           XTS_REG_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD7]

//>> GET_[XTS_REG_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_POD7,
           XTS_REG_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_POD7]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD8,
           XTS_REG_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD8]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD8,
           XTS_REG_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD8]

//>> GET_[XTS_REG_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_POD8,
           XTS_REG_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_POD8]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD9,
           XTS_REG_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD9]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD9,
           XTS_REG_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD9]

//>> GET_[XTS_REG_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_POD9,
           XTS_REG_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_POD9]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD10,
           XTS_REG_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD10]

//>> SET_[XTS_REG_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_POD10,
           XTS_REG_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_POD10]

//>> GET_[XTS_REG_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_POD10,
           XTS_REG_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_POD10]

//>> SET_[XTS_REG_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_RESERVED1,
           XTS_REG_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_RESERVED1]

//>> SET_[XTS_REG_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_RESERVED1,
           XTS_REG_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_RESERVED1]

//>> GET_[XTS_REG_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_RESERVED1,
           XTS_REG_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_RESERVED1]

//>> SET_[XTS_REG_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_ACT]

//>> SET_[XTS_REG_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_ACT]

//>> SET_[XTS_REG_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.setBit<XTS_REG_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_DEBUG1_CONFIG_ACT]

//>> CLEAR_[XTS_REG_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_DEBUG1_CONFIG_ACT]

//>> GET_[XTS_REG_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_ACT]

//>> GET_[XTS_REG_DEBUG1_CONFIG_ACT]
static inline bool GET_XTS_REG_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_DEBUG1_CONFIG));
#endif
    return i_data.getBit<XTS_REG_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_DEBUG1_CONFIG_ACT]

//>> PREP_[XTS_REG_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_REG_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_REG_CONFIG]

//>> GET_[XTS_REG_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_REG_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_CONFIG;
#endif
    return fapi2::getScom(i_target, XTS_REG_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_REG_CONFIG]

//>> PUT_[XTS_REG_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_REG_CONFIG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return fapi2::putScom(i_target, XTS_REG_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_REG_CONFIG]


//>> SET_[XTS_REG_CONFIG_MMIOSD]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_MMIOSD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_MMIOSD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_MMIOSD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_MMIOSD]

//>> SET_[XTS_REG_CONFIG_MMIOSD]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_MMIOSD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_MMIOSD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_MMIOSD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_MMIOSD]

//>> SET_[XTS_REG_CONFIG_MMIOSD]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_MMIOSD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_MMIOSD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_MMIOSD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_MMIOSD]

//>> CLEAR_[XTS_REG_CONFIG_MMIOSD]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_MMIOSD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_MMIOSD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_MMIOSD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_MMIOSD]

//>> GET_[XTS_REG_CONFIG_MMIOSD]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_MMIOSD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_MMIOSD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_MMIOSD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_MMIOSD]

//>> GET_[XTS_REG_CONFIG_MMIOSD]
static inline bool GET_XTS_REG_CONFIG_MMIOSD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_MMIOSD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_MMIOSD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_MMIOSD]

//>> SET_[XTS_REG_CONFIG_BIG_RSP]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_BIG_RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_BIG_RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_BIG_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_BIG_RSP]

//>> SET_[XTS_REG_CONFIG_BIG_RSP]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_BIG_RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_BIG_RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_BIG_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_BIG_RSP]

//>> SET_[XTS_REG_CONFIG_BIG_RSP]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_BIG_RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_BIG_RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_BIG_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_BIG_RSP]

//>> CLEAR_[XTS_REG_CONFIG_BIG_RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_BIG_RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_BIG_RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_BIG_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_BIG_RSP]

//>> GET_[XTS_REG_CONFIG_BIG_RSP]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_BIG_RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_BIG_RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_BIG_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_BIG_RSP]

//>> GET_[XTS_REG_CONFIG_BIG_RSP]
static inline bool GET_XTS_REG_CONFIG_BIG_RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_BIG_RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_BIG_RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_BIG_RSP]

//>> SET_[XTS_REG_CONFIG_CHOP1G]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_CHOP1G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_CHOP1G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_CHOP1G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_CHOP1G]

//>> SET_[XTS_REG_CONFIG_CHOP1G]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_CHOP1G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_CHOP1G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_CHOP1G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_CHOP1G]

//>> SET_[XTS_REG_CONFIG_CHOP1G]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_CHOP1G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_CHOP1G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_CHOP1G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_CHOP1G]

//>> CLEAR_[XTS_REG_CONFIG_CHOP1G]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_CHOP1G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_CHOP1G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_CHOP1G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_CHOP1G]

//>> GET_[XTS_REG_CONFIG_CHOP1G]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_CHOP1G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_CHOP1G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_CHOP1G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_CHOP1G]

//>> GET_[XTS_REG_CONFIG_CHOP1G]
static inline bool GET_XTS_REG_CONFIG_CHOP1G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_CHOP1G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_CHOP1G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_CHOP1G]

//>> SET_[XTS_REG_CONFIG_DIS_NCNP]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_DIS_NCNP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_DIS_NCNP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_DIS_NCNP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_DIS_NCNP]

//>> SET_[XTS_REG_CONFIG_DIS_NCNP]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_DIS_NCNP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_DIS_NCNP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_DIS_NCNP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_DIS_NCNP]

//>> SET_[XTS_REG_CONFIG_DIS_NCNP]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_DIS_NCNP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_DIS_NCNP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_DIS_NCNP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_DIS_NCNP]

//>> CLEAR_[XTS_REG_CONFIG_DIS_NCNP]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_DIS_NCNP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_DIS_NCNP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_DIS_NCNP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_DIS_NCNP]

//>> GET_[XTS_REG_CONFIG_DIS_NCNP]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_DIS_NCNP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_DIS_NCNP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_DIS_NCNP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_DIS_NCNP]

//>> GET_[XTS_REG_CONFIG_DIS_NCNP]
static inline bool GET_XTS_REG_CONFIG_DIS_NCNP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_DIS_NCNP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_DIS_NCNP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_DIS_NCNP]

//>> SET_[XTS_REG_CONFIG_OVR_PM]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_OVR_PM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_OVR_PM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_OVR_PM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_OVR_PM]

//>> SET_[XTS_REG_CONFIG_OVR_PM]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_OVR_PM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_OVR_PM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_OVR_PM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_OVR_PM]

//>> SET_[XTS_REG_CONFIG_OVR_PM]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_OVR_PM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_OVR_PM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_OVR_PM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_OVR_PM]

//>> CLEAR_[XTS_REG_CONFIG_OVR_PM]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_OVR_PM(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_OVR_PM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_OVR_PM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_OVR_PM]

//>> GET_[XTS_REG_CONFIG_OVR_PM]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_OVR_PM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_OVR_PM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_OVR_PM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_OVR_PM]

//>> GET_[XTS_REG_CONFIG_OVR_PM]
static inline bool GET_XTS_REG_CONFIG_OVR_PM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_OVR_PM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_OVR_PM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_OVR_PM]

//>> SET_[XTS_REG_CONFIG_TRY_ATR_RO]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_TRY_ATR_RO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_TRY_ATR_RO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_TRY_ATR_RO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_TRY_ATR_RO]

//>> SET_[XTS_REG_CONFIG_TRY_ATR_RO]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_TRY_ATR_RO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_TRY_ATR_RO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_TRY_ATR_RO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_TRY_ATR_RO]

//>> SET_[XTS_REG_CONFIG_TRY_ATR_RO]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_TRY_ATR_RO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_TRY_ATR_RO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_TRY_ATR_RO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_TRY_ATR_RO]

//>> CLEAR_[XTS_REG_CONFIG_TRY_ATR_RO]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_TRY_ATR_RO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_TRY_ATR_RO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_TRY_ATR_RO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_TRY_ATR_RO]

//>> GET_[XTS_REG_CONFIG_TRY_ATR_RO]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_TRY_ATR_RO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_TRY_ATR_RO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_TRY_ATR_RO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_TRY_ATR_RO]

//>> GET_[XTS_REG_CONFIG_TRY_ATR_RO]
static inline bool GET_XTS_REG_CONFIG_TRY_ATR_RO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_TRY_ATR_RO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_TRY_ATR_RO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_TRY_ATR_RO]

//>> SET_[XTS_REG_CONFIG_SPLURGE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_SPLURGE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_SPLURGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_SPLURGE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_SPLURGE]

//>> SET_[XTS_REG_CONFIG_SPLURGE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_SPLURGE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_SPLURGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_SPLURGE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_SPLURGE]

//>> SET_[XTS_REG_CONFIG_SPLURGE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_SPLURGE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_SPLURGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_SPLURGE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_SPLURGE]

//>> CLEAR_[XTS_REG_CONFIG_SPLURGE]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_SPLURGE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_SPLURGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_SPLURGE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_SPLURGE]

//>> GET_[XTS_REG_CONFIG_SPLURGE]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_SPLURGE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_SPLURGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_SPLURGE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_SPLURGE]

//>> GET_[XTS_REG_CONFIG_SPLURGE]
static inline bool GET_XTS_REG_CONFIG_SPLURGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_SPLURGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_SPLURGE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_SPLURGE]

//>> SET_[XTS_REG_CONFIG_LIM_PS]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_LIM_PS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_LIM_PS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_LIM_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_LIM_PS]

//>> SET_[XTS_REG_CONFIG_LIM_PS]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_LIM_PS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_LIM_PS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_LIM_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_LIM_PS]

//>> SET_[XTS_REG_CONFIG_LIM_PS]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_LIM_PS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_LIM_PS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_LIM_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_LIM_PS]

//>> CLEAR_[XTS_REG_CONFIG_LIM_PS]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_LIM_PS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_LIM_PS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_LIM_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_LIM_PS]

//>> GET_[XTS_REG_CONFIG_LIM_PS]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_LIM_PS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_LIM_PS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_LIM_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_LIM_PS]

//>> GET_[XTS_REG_CONFIG_LIM_PS]
static inline bool GET_XTS_REG_CONFIG_LIM_PS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_LIM_PS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_LIM_PS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_LIM_PS]

//>> SET_[XTS_REG_CONFIG_PREF2DMD]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF2DMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF2DMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_PREF2DMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF2DMD]

//>> SET_[XTS_REG_CONFIG_PREF2DMD]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF2DMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF2DMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_PREF2DMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF2DMD]

//>> SET_[XTS_REG_CONFIG_PREF2DMD]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF2DMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_PREF2DMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_PREF2DMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF2DMD]

//>> CLEAR_[XTS_REG_CONFIG_PREF2DMD]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_PREF2DMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_PREF2DMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_PREF2DMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_PREF2DMD]

//>> GET_[XTS_REG_CONFIG_PREF2DMD]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_PREF2DMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_PREF2DMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_PREF2DMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_PREF2DMD]

//>> GET_[XTS_REG_CONFIG_PREF2DMD]
static inline bool GET_XTS_REG_CONFIG_PREF2DMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_PREF2DMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_PREF2DMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_PREF2DMD]

//>> SET_[XTS_REG_CONFIG_PREFEVOD]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREFEVOD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREFEVOD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_PREFEVOD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREFEVOD]

//>> SET_[XTS_REG_CONFIG_PREFEVOD]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREFEVOD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREFEVOD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_PREFEVOD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREFEVOD]

//>> SET_[XTS_REG_CONFIG_PREFEVOD]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREFEVOD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_PREFEVOD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_PREFEVOD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREFEVOD]

//>> CLEAR_[XTS_REG_CONFIG_PREFEVOD]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_PREFEVOD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_PREFEVOD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_PREFEVOD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_PREFEVOD]

//>> GET_[XTS_REG_CONFIG_PREFEVOD]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_PREFEVOD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_PREFEVOD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_PREFEVOD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_PREFEVOD]

//>> GET_[XTS_REG_CONFIG_PREFEVOD]
static inline bool GET_XTS_REG_CONFIG_PREFEVOD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_PREFEVOD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_PREFEVOD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_PREFEVOD]

//>> SET_[XTS_REG_CONFIG_EAINJ]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_EAINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_EAINJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_EAINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_EAINJ]

//>> SET_[XTS_REG_CONFIG_EAINJ]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_EAINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_EAINJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_EAINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_EAINJ]

//>> SET_[XTS_REG_CONFIG_EAINJ]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_EAINJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_EAINJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_EAINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_EAINJ]

//>> CLEAR_[XTS_REG_CONFIG_EAINJ]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_EAINJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_EAINJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_EAINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_EAINJ]

//>> GET_[XTS_REG_CONFIG_EAINJ]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_EAINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_EAINJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_EAINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_EAINJ]

//>> GET_[XTS_REG_CONFIG_EAINJ]
static inline bool GET_XTS_REG_CONFIG_EAINJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_EAINJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_EAINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_EAINJ]

//>> SET_[XTS_REG_CONFIG_SPL_ONLY]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_SPL_ONLY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_SPL_ONLY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_SPL_ONLY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_SPL_ONLY]

//>> SET_[XTS_REG_CONFIG_SPL_ONLY]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_SPL_ONLY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_SPL_ONLY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_SPL_ONLY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_SPL_ONLY]

//>> SET_[XTS_REG_CONFIG_SPL_ONLY]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_SPL_ONLY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_SPL_ONLY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_SPL_ONLY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_SPL_ONLY]

//>> CLEAR_[XTS_REG_CONFIG_SPL_ONLY]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_SPL_ONLY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_SPL_ONLY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_SPL_ONLY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_SPL_ONLY]

//>> GET_[XTS_REG_CONFIG_SPL_ONLY]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_SPL_ONLY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_SPL_ONLY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_SPL_ONLY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_SPL_ONLY]

//>> GET_[XTS_REG_CONFIG_SPL_ONLY]
static inline bool GET_XTS_REG_CONFIG_SPL_ONLY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_SPL_ONLY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_SPL_ONLY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_SPL_ONLY]

//>> SET_[XTS_REG_CONFIG_BYPASS_CO]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_BYPASS_CO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_BYPASS_CO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_BYPASS_CO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_BYPASS_CO]

//>> SET_[XTS_REG_CONFIG_BYPASS_CO]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_BYPASS_CO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_BYPASS_CO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_BYPASS_CO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_BYPASS_CO]

//>> SET_[XTS_REG_CONFIG_BYPASS_CO]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_BYPASS_CO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_BYPASS_CO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_BYPASS_CO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_BYPASS_CO]

//>> CLEAR_[XTS_REG_CONFIG_BYPASS_CO]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_BYPASS_CO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_BYPASS_CO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_BYPASS_CO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_BYPASS_CO]

//>> GET_[XTS_REG_CONFIG_BYPASS_CO]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_BYPASS_CO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_BYPASS_CO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_BYPASS_CO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_BYPASS_CO]

//>> GET_[XTS_REG_CONFIG_BYPASS_CO]
static inline bool GET_XTS_REG_CONFIG_BYPASS_CO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_BYPASS_CO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_BYPASS_CO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_BYPASS_CO]

//>> SET_[XTS_REG_CONFIG_OPENCAPI]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_OPENCAPI(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_OPENCAPI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_OPENCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_OPENCAPI]

//>> SET_[XTS_REG_CONFIG_OPENCAPI]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_OPENCAPI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_OPENCAPI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_OPENCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_OPENCAPI]

//>> SET_[XTS_REG_CONFIG_OPENCAPI]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_OPENCAPI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_OPENCAPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_OPENCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_OPENCAPI]

//>> CLEAR_[XTS_REG_CONFIG_OPENCAPI]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_OPENCAPI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_OPENCAPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_OPENCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_OPENCAPI]

//>> GET_[XTS_REG_CONFIG_OPENCAPI]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_OPENCAPI(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_OPENCAPI,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_OPENCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_OPENCAPI]

//>> GET_[XTS_REG_CONFIG_OPENCAPI]
static inline bool GET_XTS_REG_CONFIG_OPENCAPI(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_OPENCAPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_OPENCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_OPENCAPI]

//>> SET_[XTS_REG_CONFIG_TLBIE_DEC_RATE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_TLBIE_DEC_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_TLBIE_DEC_RATE,
           XTS_REG_CONFIG_TLBIE_DEC_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_TLBIE_DEC_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_TLBIE_DEC_RATE]

//>> SET_[XTS_REG_CONFIG_TLBIE_DEC_RATE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_TLBIE_DEC_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_TLBIE_DEC_RATE,
           XTS_REG_CONFIG_TLBIE_DEC_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_TLBIE_DEC_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_TLBIE_DEC_RATE]

//>> GET_[XTS_REG_CONFIG_TLBIE_DEC_RATE]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_TLBIE_DEC_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_TLBIE_DEC_RATE,
           XTS_REG_CONFIG_TLBIE_DEC_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_TLBIE_DEC_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_TLBIE_DEC_RATE]

//>> SET_[XTS_REG_CONFIG_TLBIE_INC_RATE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_TLBIE_INC_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_TLBIE_INC_RATE,
           XTS_REG_CONFIG_TLBIE_INC_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_TLBIE_INC_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_TLBIE_INC_RATE]

//>> SET_[XTS_REG_CONFIG_TLBIE_INC_RATE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_TLBIE_INC_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_TLBIE_INC_RATE,
           XTS_REG_CONFIG_TLBIE_INC_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_TLBIE_INC_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_TLBIE_INC_RATE]

//>> GET_[XTS_REG_CONFIG_TLBIE_INC_RATE]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_TLBIE_INC_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_TLBIE_INC_RATE,
           XTS_REG_CONFIG_TLBIE_INC_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_TLBIE_INC_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_TLBIE_INC_RATE]

//>> SET_[XTS_REG_CONFIG_TLBIE_CNT_THRESH]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_TLBIE_CNT_THRESH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_TLBIE_CNT_THRESH,
           XTS_REG_CONFIG_TLBIE_CNT_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_TLBIE_CNT_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_TLBIE_CNT_THRESH]

//>> SET_[XTS_REG_CONFIG_TLBIE_CNT_THRESH]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_TLBIE_CNT_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_TLBIE_CNT_THRESH,
           XTS_REG_CONFIG_TLBIE_CNT_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_TLBIE_CNT_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_TLBIE_CNT_THRESH]

//>> GET_[XTS_REG_CONFIG_TLBIE_CNT_THRESH]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_TLBIE_CNT_THRESH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_TLBIE_CNT_THRESH,
           XTS_REG_CONFIG_TLBIE_CNT_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_TLBIE_CNT_THRESH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_TLBIE_CNT_THRESH]

//>> SET_[XTS_REG_CONFIG_WAIT_MISS]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_WAIT_MISS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_WAIT_MISS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_WAIT_MISS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_WAIT_MISS]

//>> SET_[XTS_REG_CONFIG_WAIT_MISS]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_WAIT_MISS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_WAIT_MISS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_WAIT_MISS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_WAIT_MISS]

//>> SET_[XTS_REG_CONFIG_WAIT_MISS]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_WAIT_MISS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.setBit<XTS_REG_CONFIG_WAIT_MISS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG_WAIT_MISS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_WAIT_MISS]

//>> CLEAR_[XTS_REG_CONFIG_WAIT_MISS]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG_WAIT_MISS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.clearBit<XTS_REG_CONFIG_WAIT_MISS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG_WAIT_MISS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG_WAIT_MISS]

//>> GET_[XTS_REG_CONFIG_WAIT_MISS]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_WAIT_MISS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_WAIT_MISS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_WAIT_MISS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_WAIT_MISS]

//>> GET_[XTS_REG_CONFIG_WAIT_MISS]
static inline bool GET_XTS_REG_CONFIG_WAIT_MISS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.getBit<XTS_REG_CONFIG_WAIT_MISS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG_WAIT_MISS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_WAIT_MISS]

//>> SET_[XTS_REG_CONFIG_PREF_TIMEOUT]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_TIMEOUT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_TIMEOUT,
           XTS_REG_CONFIG_PREF_TIMEOUT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_TIMEOUT]

//>> SET_[XTS_REG_CONFIG_PREF_TIMEOUT]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_TIMEOUT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_TIMEOUT,
           XTS_REG_CONFIG_PREF_TIMEOUT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_TIMEOUT]

//>> GET_[XTS_REG_CONFIG_PREF_TIMEOUT]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_PREF_TIMEOUT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_PREF_TIMEOUT,
           XTS_REG_CONFIG_PREF_TIMEOUT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_TIMEOUT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_PREF_TIMEOUT]

//>> SET_[XTS_REG_CONFIG_PREF_DEPTH]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_DEPTH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_DEPTH,
           XTS_REG_CONFIG_PREF_DEPTH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_DEPTH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_DEPTH]

//>> SET_[XTS_REG_CONFIG_PREF_DEPTH]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_DEPTH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_DEPTH,
           XTS_REG_CONFIG_PREF_DEPTH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_DEPTH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_DEPTH]

//>> GET_[XTS_REG_CONFIG_PREF_DEPTH]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_PREF_DEPTH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_PREF_DEPTH,
           XTS_REG_CONFIG_PREF_DEPTH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_DEPTH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_PREF_DEPTH]

//>> SET_[XTS_REG_CONFIG_PREF_THRSH0]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_THRSH0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_THRSH0,
           XTS_REG_CONFIG_PREF_THRSH0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_THRSH0]

//>> SET_[XTS_REG_CONFIG_PREF_THRSH0]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_THRSH0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_THRSH0,
           XTS_REG_CONFIG_PREF_THRSH0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_THRSH0]

//>> GET_[XTS_REG_CONFIG_PREF_THRSH0]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_PREF_THRSH0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_PREF_THRSH0,
           XTS_REG_CONFIG_PREF_THRSH0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_PREF_THRSH0]

//>> SET_[XTS_REG_CONFIG_PREF_THRSH1]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_THRSH1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_THRSH1,
           XTS_REG_CONFIG_PREF_THRSH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_THRSH1]

//>> SET_[XTS_REG_CONFIG_PREF_THRSH1]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_THRSH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_THRSH1,
           XTS_REG_CONFIG_PREF_THRSH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_THRSH1]

//>> GET_[XTS_REG_CONFIG_PREF_THRSH1]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_PREF_THRSH1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_PREF_THRSH1,
           XTS_REG_CONFIG_PREF_THRSH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_PREF_THRSH1]

//>> SET_[XTS_REG_CONFIG_PREF_THRSH2]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_THRSH2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_THRSH2,
           XTS_REG_CONFIG_PREF_THRSH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_THRSH2]

//>> SET_[XTS_REG_CONFIG_PREF_THRSH2]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_THRSH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_THRSH2,
           XTS_REG_CONFIG_PREF_THRSH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_THRSH2]

//>> GET_[XTS_REG_CONFIG_PREF_THRSH2]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_PREF_THRSH2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_PREF_THRSH2,
           XTS_REG_CONFIG_PREF_THRSH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_PREF_THRSH2]

//>> SET_[XTS_REG_CONFIG_PREF_THRSH3]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_THRSH3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_THRSH3,
           XTS_REG_CONFIG_PREF_THRSH3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_THRSH3]

//>> SET_[XTS_REG_CONFIG_PREF_THRSH3]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG_PREF_THRSH3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG_PREF_THRSH3,
           XTS_REG_CONFIG_PREF_THRSH3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG_PREF_THRSH3]

//>> GET_[XTS_REG_CONFIG_PREF_THRSH3]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG_PREF_THRSH3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG_PREF_THRSH3,
           XTS_REG_CONFIG_PREF_THRSH3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG_PREF_THRSH3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG_PREF_THRSH3]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
