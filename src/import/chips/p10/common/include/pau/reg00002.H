/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00002.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00002_H_
#define __PAU_REG00002_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


//>> PREP_[AME_AME0_MISC_DEBUG_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME0_MISC_DEBUG_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_DEBUG_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME0_MISC_DEBUG_CONFIG1]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME0_MISC_DEBUG_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME0_MISC_DEBUG_CONFIG1;
#endif
    return fapi2::getScom(i_target, AME_AME0_MISC_DEBUG_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1]

//>> PUT_[AME_AME0_MISC_DEBUG_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME0_MISC_DEBUG_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return fapi2::putScom(i_target, AME_AME0_MISC_DEBUG_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME0_MISC_DEBUG_CONFIG1]


//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]
static inline bool GET_AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B6_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]
static inline bool GET_AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B6_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B6_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B6_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]
static inline bool GET_AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B7_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]
static inline bool GET_AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B7_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B7_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B7_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]
static inline bool GET_AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B8_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]
static inline bool GET_AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B8_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B8_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B8_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]
static inline bool GET_AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B9_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]
static inline bool GET_AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B9_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B9_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B9_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]
static inline bool GET_AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_0_B10_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.setBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.clearBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]
static inline bool GET_AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.getBit<AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_1_B10_CSEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL0_B10_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL,
           AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_CL1_B10_SEL]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1,
           AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1]

//>> SET_[AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return o_data.insertFromRight<AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1,
           AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1]

//>> GET_[AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME0_MISC_DEBUG_CONFIG1));
#endif
    return i_data.extractToRight<AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1,
           AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME0_MISC_DEBUG_CONFIG1_RESERVED1]

//>> PREP_[AME_AME1_MISC_DEBUG_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME1_MISC_DEBUG_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_DEBUG_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME1_MISC_DEBUG_CONFIG0]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME1_MISC_DEBUG_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME1_MISC_DEBUG_CONFIG0;
#endif
    return fapi2::getScom(i_target, AME_AME1_MISC_DEBUG_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0]

//>> PUT_[AME_AME1_MISC_DEBUG_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME1_MISC_DEBUG_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return fapi2::putScom(i_target, AME_AME1_MISC_DEBUG_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME1_MISC_DEBUG_CONFIG0]


//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B0_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B0_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B0_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B0_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B1_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B1_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B1_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B1_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B2_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B2_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B2_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B2_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B3_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B3_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B3_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B3_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B4_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B4_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B4_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B4_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_B5_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_B5_CSEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL0_B5_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL,
           AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_CL1_B5_SEL]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0,
           AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0,
           AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0,
           AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_RESERVED0]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_0_ENABLE]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.insertFromRight<AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.setBit<AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return o_data.clearBit<AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.extractToRight<AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]
static inline bool GET_AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME1_MISC_DEBUG_CONFIG0));
#endif
    return i_data.getBit<AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME1_MISC_DEBUG_CONFIG0_1_ENABLE]

//>> PREP_[CS_CTL_MISC_BDF2PE_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_0_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_0_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_0_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]

//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]

//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]

//>> GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]

//>> GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]
static inline bool GET_CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_WILDCARD]

//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_0_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_0_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_0_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_0_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_0_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_0_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_0_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_0_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_0_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_0_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_0_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_0_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_0_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_0_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_0_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_0_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_0_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_0_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_0_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_MESSAGE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_CERR_MESSAGE1]

//>> GET_[CS_CTL_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CERR_MESSAGE1;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_CERR_MESSAGE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MESSAGE1]

//>> PUT_[CS_CTL_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE1));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_CERR_MESSAGE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_CERR_MESSAGE1]


//>> SET_[CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> SET_[CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> GET_[CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CERR_MESSAGE1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> PREP_[CS_CTL_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_CONFIG1]

//>> GET_[CS_CTL_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_CONFIG1;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1]

//>> PUT_[CS_CTL_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_CONFIG1]


//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]

//>> GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]

//>> GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]
static inline bool GET_CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIV2_COUNT_AT_EXP]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]

//>> GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]

//>> GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]
static inline bool GET_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_ADJ]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]

//>> GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]

//>> GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]
static inline bool GET_CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_MRBCP_DIS_DYN_LVL_ADJ]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_THRESH1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_THRESH1,
           CS_CTL_MISC_CONFIG1_MRBCP_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH1]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_THRESH1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_THRESH1,
           CS_CTL_MISC_CONFIG1_MRBCP_THRESH1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH1]

//>> GET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_MRBCP_THRESH1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_MRBCP_THRESH1,
           CS_CTL_MISC_CONFIG1_MRBCP_THRESH1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_THRESH1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH1]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_THRESH2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_THRESH2,
           CS_CTL_MISC_CONFIG1_MRBCP_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH2]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_THRESH2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_THRESH2,
           CS_CTL_MISC_CONFIG1_MRBCP_THRESH2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH2]

//>> GET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_MRBCP_THRESH2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_MRBCP_THRESH2,
           CS_CTL_MISC_CONFIG1_MRBCP_THRESH2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_THRESH2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_MRBCP_THRESH2]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL]

//>> SET_[CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL]

//>> GET_[CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL,
           CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_MRBCP_MAX_LEVEL]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK,
           CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK,
           CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK,
           CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_CTL_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE]

//>> SET_[CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE]

//>> GET_[CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_HOST_TAG_SIZE]

//>> SET_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSHT_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSHT_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]

//>> SET_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSHT_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSHT_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]

//>> SET_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSHT_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_PSHT_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_PSHT_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_PSHT_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]

//>> GET_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_PSHT_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_PSHT_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]

//>> GET_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]
static inline bool GET_CS_CTL_MISC_CONFIG1_PSHT_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_PSHT_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSHT_CORRENAB]

//>> SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]

//>> SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]

//>> SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]

//>> GET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]

//>> GET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]
static inline bool GET_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE1]

//>> SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]

//>> SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]

//>> SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]

//>> GET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]

//>> GET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]
static inline bool GET_CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSHT_INJECT_ENABLE2]

//>> SET_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSNX_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSNX_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]

//>> SET_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSNX_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSNX_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]

//>> SET_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSNX_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_PSNX_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_PSNX_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_PSNX_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]

//>> GET_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_PSNX_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_PSNX_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]

//>> GET_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]
static inline bool GET_CS_CTL_MISC_CONFIG1_PSNX_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_PSNX_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSNX_CORRENAB]

//>> SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]

//>> SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]

//>> SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]

//>> GET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]

//>> GET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]
static inline bool GET_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE1]

//>> SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]

//>> SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]

//>> SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]

//>> GET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]

//>> GET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]
static inline bool GET_CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSNX_INJECT_ENABLE2]

//>> SET_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSPV_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSPV_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]

//>> SET_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSPV_CORRENAB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSPV_CORRENAB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]

//>> SET_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSPV_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_PSPV_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_PSPV_CORRENAB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_PSPV_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]

//>> GET_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_PSPV_CORRENAB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_PSPV_CORRENAB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]

//>> GET_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]
static inline bool GET_CS_CTL_MISC_CONFIG1_PSPV_CORRENAB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_PSPV_CORRENAB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_CORRENAB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSPV_CORRENAB]

//>> SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]

//>> SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]

//>> SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]

//>> GET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]

//>> GET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]
static inline bool GET_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE1]

//>> SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]

//>> SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]

//>> SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]

//>> GET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]

//>> GET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]
static inline bool GET_CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PSPV_INJECT_ENABLE2]

//>> SET_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_XSL_QUICK_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]

//>> SET_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]

//>> SET_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]

//>> GET_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]

//>> GET_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]
static inline bool GET_CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_ENABLE_TRUSTED]

//>> SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]

//>> GET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]

//>> GET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]
static inline bool GET_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]

//>> GET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]

//>> GET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]
static inline bool GET_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]

//>> GET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]

//>> GET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]
static inline bool GET_CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_CL_DMA_INJ_PRESYNC_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]

//>> GET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]

//>> GET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]
static inline bool GET_CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_PR_DMA_INJ_PRESYNC_D_BIT]

//>> SET_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]

//>> SET_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]

//>> SET_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]

//>> GET_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]

//>> GET_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]
static inline bool GET_CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_FORCE_OW_ENA_MASK_1111]

//>> SET_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]

//>> SET_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]

//>> SET_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]

//>> CLEAR_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]

//>> GET_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]

//>> GET_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]
static inline bool GET_CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_NVLINK_16CHIP_MODE]

//>> SET_[CS_CTL_MISC_CONFIG1_1_RESERVED3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_1_RESERVED3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_1_RESERVED3,
           CS_CTL_MISC_CONFIG1_1_RESERVED3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_1_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_1_RESERVED3]

//>> SET_[CS_CTL_MISC_CONFIG1_1_RESERVED3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_CONFIG1_1_RESERVED3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_CONFIG1_1_RESERVED3,
           CS_CTL_MISC_CONFIG1_1_RESERVED3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_1_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_CONFIG1_1_RESERVED3]

//>> GET_[CS_CTL_MISC_CONFIG1_1_RESERVED3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_CONFIG1_1_RESERVED3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_CTL_MISC_CONFIG1_1_RESERVED3,
           CS_CTL_MISC_CONFIG1_1_RESERVED3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_CONFIG1_1_RESERVED3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_CONFIG1_1_RESERVED3]

//>> PREP_[CS_CTL_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_DEBUG1_CONFIG]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG]

//>> PUT_[CS_CTL_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_DEBUG1_CONFIG]


//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD0,
           CS_CTL_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD0,
           CS_CTL_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD0]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_POD0,
           CS_CTL_MISC_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD1,
           CS_CTL_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD1,
           CS_CTL_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD1]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_POD1,
           CS_CTL_MISC_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD2,
           CS_CTL_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD2,
           CS_CTL_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD2]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_POD2,
           CS_CTL_MISC_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD3,
           CS_CTL_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD3,
           CS_CTL_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD3]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_POD3,
           CS_CTL_MISC_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD4,
           CS_CTL_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD4,
           CS_CTL_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD4]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_POD4,
           CS_CTL_MISC_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD5,
           CS_CTL_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD5,
           CS_CTL_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD5]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_POD5,
           CS_CTL_MISC_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD6,
           CS_CTL_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD6,
           CS_CTL_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD6]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_POD6,
           CS_CTL_MISC_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD7,
           CS_CTL_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD7,
           CS_CTL_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD7]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_POD7,
           CS_CTL_MISC_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD8,
           CS_CTL_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD8,
           CS_CTL_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD8]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_POD8,
           CS_CTL_MISC_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD9,
           CS_CTL_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD9,
           CS_CTL_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD9]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_POD9,
           CS_CTL_MISC_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD10,
           CS_CTL_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_POD10,
           CS_CTL_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_POD10]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_POD10,
           CS_CTL_MISC_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]

//>> CLEAR_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]
static inline bool GET_CS_CTL_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_DEBUG1_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_DEBUG1_CONFIG_ACT]

//>> PREP_[CS_CTL_MISC_ELOGGER_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_ELOGGER_CONTROL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_ELOGGER_CONTROL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_ELOGGER_CONTROL]

//>> GET_[CS_CTL_MISC_ELOGGER_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_ELOGGER_CONTROL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_ELOGGER_CONTROL;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_ELOGGER_CONTROL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_CONTROL]

//>> PUT_[CS_CTL_MISC_ELOGGER_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_ELOGGER_CONTROL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_ELOGGER_CONTROL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_ELOGGER_CONTROL]


//>> SET_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_CONTROL_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_CONTROL_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]

//>> SET_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_CONTROL_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_CONTROL_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]

//>> SET_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_CONTROL_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return o_data.setBit<CS_CTL_MISC_ELOGGER_CONTROL_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]

//>> CLEAR_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_ELOGGER_CONTROL_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return o_data.clearBit<CS_CTL_MISC_ELOGGER_CONTROL_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]

//>> GET_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_ELOGGER_CONTROL_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return i_data.extractToRight<CS_CTL_MISC_ELOGGER_CONTROL_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]

//>> GET_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]
static inline bool GET_CS_CTL_MISC_ELOGGER_CONTROL_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return i_data.getBit<CS_CTL_MISC_ELOGGER_CONTROL_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_CONTROL_ENABLE]

//>> SET_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_CONTROL_FLUSH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_CONTROL_FLUSH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_FLUSH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]

//>> SET_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_CONTROL_FLUSH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_CONTROL_FLUSH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_FLUSH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]

//>> SET_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_CONTROL_FLUSH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return o_data.setBit<CS_CTL_MISC_ELOGGER_CONTROL_FLUSH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_FLUSH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]

//>> CLEAR_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_ELOGGER_CONTROL_FLUSH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return o_data.clearBit<CS_CTL_MISC_ELOGGER_CONTROL_FLUSH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_FLUSH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]

//>> GET_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_ELOGGER_CONTROL_FLUSH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return i_data.extractToRight<CS_CTL_MISC_ELOGGER_CONTROL_FLUSH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_FLUSH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]

//>> GET_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]
static inline bool GET_CS_CTL_MISC_ELOGGER_CONTROL_FLUSH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return i_data.getBit<CS_CTL_MISC_ELOGGER_CONTROL_FLUSH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_FLUSH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_CONTROL_FLUSH]

//>> SET_[CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1,
           CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1]

//>> SET_[CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1,
           CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1]

//>> GET_[CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_ELOGGER_CONTROL));
#endif
    return i_data.extractToRight<CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1,
           CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_ELOGGER_CONTROL_RESERVED1]

//>> PREP_[CS_CTL_MISC_FENCE_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_FENCE_CONTROL0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_FENCE_CONTROL0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_FENCE_CONTROL0]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_FENCE_CONTROL0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_FENCE_CONTROL0;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_FENCE_CONTROL0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL0]

//>> PUT_[CS_CTL_MISC_FENCE_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_FENCE_CONTROL0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL0));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_FENCE_CONTROL0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_FENCE_CONTROL0]


//>> SET_[CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL0_0_REQUEST_FENCE]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL0));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL0));
#endif
    return i_data.extractToRight<CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL0_CONTROL0_RESERVED]

//>> PREP_[CS_CTL_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_INHIBIT_CONFIG]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_INHIBIT_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG]

//>> PUT_[CS_CTL_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_INHIBIT_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_INHIBIT_CONFIG]


//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline bool GET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline bool GET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST0,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_DEST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST0,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST0]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST0,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline bool GET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline bool GET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST1,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_DEST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST1,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST1]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST1,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST1]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline bool GET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline bool GET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_DEST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST2,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_DEST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST2,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST2]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_DEST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST2,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST2]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_LFREQ3]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_PFREQ3]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline bool GET_CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline bool GET_CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_DEST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST3,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST3]

//>> SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_INHIBIT_CONFIG_DEST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST3,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST3]

//>> GET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_INHIBIT_CONFIG_DEST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_INHIBIT_CONFIG_DEST3,
           CS_CTL_MISC_INHIBIT_CONFIG_DEST3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_INHIBIT_CONFIG_DEST3]

//>> PREP_[CS_CTL_MISC_PERF_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_PERF_COUNT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_PERF_COUNT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_PERF_COUNT]

//>> GET_[CS_CTL_MISC_PERF_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_PERF_COUNT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_PERF_COUNT;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_PERF_COUNT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_COUNT]

//>> PUT_[CS_CTL_MISC_PERF_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_PERF_COUNT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_PERF_COUNT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_PERF_COUNT]


//>> SET_[CS_CTL_MISC_PERF_COUNT_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_COUNT_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_COUNT_0,
           CS_CTL_MISC_PERF_COUNT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_COUNT_0]

//>> SET_[CS_CTL_MISC_PERF_COUNT_0]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_COUNT_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_COUNT_0,
           CS_CTL_MISC_PERF_COUNT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_COUNT_0]

//>> GET_[CS_CTL_MISC_PERF_COUNT_0]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_COUNT_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_COUNT_0,
           CS_CTL_MISC_PERF_COUNT_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_COUNT_0]

//>> SET_[CS_CTL_MISC_PERF_COUNT_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_COUNT_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_COUNT_1,
           CS_CTL_MISC_PERF_COUNT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_COUNT_1]

//>> SET_[CS_CTL_MISC_PERF_COUNT_1]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_COUNT_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_COUNT_1,
           CS_CTL_MISC_PERF_COUNT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_COUNT_1]

//>> GET_[CS_CTL_MISC_PERF_COUNT_1]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_COUNT_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_COUNT_1,
           CS_CTL_MISC_PERF_COUNT_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_COUNT_1]

//>> SET_[CS_CTL_MISC_PERF_COUNT_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_COUNT_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_COUNT_2,
           CS_CTL_MISC_PERF_COUNT_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_COUNT_2]

//>> SET_[CS_CTL_MISC_PERF_COUNT_2]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_COUNT_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_COUNT_2,
           CS_CTL_MISC_PERF_COUNT_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_COUNT_2]

//>> GET_[CS_CTL_MISC_PERF_COUNT_2]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_COUNT_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_COUNT_2,
           CS_CTL_MISC_PERF_COUNT_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_COUNT_2]

//>> SET_[CS_CTL_MISC_PERF_COUNT_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_COUNT_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_COUNT_3,
           CS_CTL_MISC_PERF_COUNT_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_COUNT_3]

//>> SET_[CS_CTL_MISC_PERF_COUNT_3]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_PERF_COUNT_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_PERF_COUNT_3,
           CS_CTL_MISC_PERF_COUNT_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_PERF_COUNT_3]

//>> GET_[CS_CTL_MISC_PERF_COUNT_3]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_PERF_COUNT_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_PERF_COUNT));
#endif
    return i_data.extractToRight<CS_CTL_MISC_PERF_COUNT_3,
           CS_CTL_MISC_PERF_COUNT_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_PERF_COUNT_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_PERF_COUNT_3]

//>> PREP_[CS_SM0_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MASK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CERR_MASK1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CERR_MASK1;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CERR_MASK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1]

//>> PUT_[CS_SM0_MCP_MISC_CERR_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CERR_MASK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CERR_MASK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CERR_MASK1]


//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_NLGX_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_FWD_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_FWD_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_FWD_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_FWD_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_FWD_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_AUE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_AUE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_AUE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_AUE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_AUE_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_4]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_5]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_6]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_7]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_8]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_9]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_10]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_PBF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_PBF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_PBF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_PBF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_PBF_11]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_LDA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_LDA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_LDA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_LDA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_LDA_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_STA_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_0]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_STA_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_1]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_STA_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_2]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]

//>> SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]

//>> CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CERR_MASK1_STA_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]

//>> GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]
static inline bool GET_CS_SM0_MCP_MISC_CERR_MASK1_STA_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CERR_MASK1));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CERR_MASK1_STA_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CERR_MASK1_STA_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CERR_MASK1_STA_3]

//>> PREP_[CS_SM0_MCP_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CONFIG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_CONFIG2]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_CONFIG2;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_CONFIG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2]

//>> PUT_[CS_SM0_MCP_MISC_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_CONFIG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_CONFIG2]


//>> SET_[CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK,
           CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK,
           CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK,
           CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_MCP_FIR_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_FENCE_TO_INHIBIT_MASK]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_DCBF]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_CLEAN]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> CLEAR_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]
static inline bool GET_CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_ENABLE_PHASE1_AMO]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER,
           CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER,
           CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER,
           CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_DCARM_TIMER]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK0_EXT_MEM_TAGS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK1_EXT_MEM_TAGS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK2_EXT_MEM_TAGS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK3_EXT_MEM_TAGS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS,
           CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_BRK4_EXT_MEM_TAGS]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_2_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_2_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_2_RESERVED,
           CS_SM0_MCP_MISC_CONFIG2_2_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_2_RESERVED]

//>> SET_[CS_SM0_MCP_MISC_CONFIG2_2_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_CONFIG2_2_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_CONFIG2_2_RESERVED,
           CS_SM0_MCP_MISC_CONFIG2_2_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_CONFIG2_2_RESERVED]

//>> GET_[CS_SM0_MCP_MISC_CONFIG2_2_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_CONFIG2_2_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_CONFIG2));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_CONFIG2_2_RESERVED,
           CS_SM0_MCP_MISC_CONFIG2_2_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_CONFIG2_2_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_CONFIG2_2_RESERVED]

//>> PREP_[CS_SM0_MCP_MISC_DEBUG3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_DEBUG3_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_DEBUG3_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_DEBUG3_CONFIG]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_DEBUG3_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_DEBUG3_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG]

//>> PUT_[CS_SM0_MCP_MISC_DEBUG3_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_DEBUG3_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_DEBUG3_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_DEBUG3_CONFIG]


//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE0]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE1]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE2]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE3]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE4]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE5]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE6]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE7]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8,
           CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_BYTE8]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.setBit<CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> CLEAR_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]
static inline bool GET_CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG3_CONFIG));
#endif
    return i_data.getBit<CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG3_CONFIG_ACT]

//>> PREP_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG]

//>> GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_PERF_MASK_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG]

//>> PUT_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_PERF_MASK_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG]


//>> SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]

//>> SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]

//>> GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED2]

//>> SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP]

//>> SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP]

//>> GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_CRESP]

//>> SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE]

//>> SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE]

//>> GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_SCOPE]

//>> SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD]

//>> SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD]

//>> GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_MCMD]

//>> SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]

//>> GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_PERF_MASK_CONFIG_RESERVED1]

//>> PREP_[CS_SM0_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CERR_HOLD0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CERR_HOLD0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CERR_HOLD0;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CERR_HOLD0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0]

//>> PUT_[CS_SM0_SNP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CERR_HOLD0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CERR_HOLD0]


//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NCF_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBP_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_8]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_9]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_10]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBC_11]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_4]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_5]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_6]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_7]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_8]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_9]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_10]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_11]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_12]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_13]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_14]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_15]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_16]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_17]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_18]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_19]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_20]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_21]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_22]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_NLG_23]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_0]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_1]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_2]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]

//>> SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]

//>> CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]

//>> GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]
static inline bool GET_CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_HOLD0_PBF_3]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3]


//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> PREP_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_TOPOLOGY_TABLE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_TOPOLOGY_TABLE0;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_TOPOLOGY_TABLE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0]

//>> PUT_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_TOPOLOGY_TABLE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0]


//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_ABLE_0_7]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY0]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY1]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY2]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY3]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY4]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY5]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY6]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7]

//>> SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7]

//>> GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_TOPOLOGY_TABLE0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7,
           CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_TOPOLOGY_TABLE0_TRY7]

//>> PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_MESSAGE2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_MESSAGE2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE2;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE2]

//>> PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_MESSAGE2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE2));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE2]


//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2,
           CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]

//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE2));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2,
           CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE2));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2,
           CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE2_CERR_MESSAGE_BITS2]

//>> PREP_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG]

//>> GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_PERF_MATCH_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG]

//>> PUT_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_PERF_MATCH_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG]


//>> SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]

//>> SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]

//>> GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED2]

//>> SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP]

//>> SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP]

//>> GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_CRESP]

//>> SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]

//>> SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]

//>> GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_SCOPE]

//>> SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD]

//>> SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD]

//>> GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_MCMD]

//>> SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]

//>> SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]

//>> GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1,
           CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_PERF_MATCH_CONFIG_RESERVED1]

//>> PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0]

//>> PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0]


//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> PREP_[CS_SM2_SNP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CERR_MESSAGE1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CERR_MESSAGE1;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CERR_MESSAGE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MESSAGE1]

//>> PUT_[CS_SM2_SNP_MISC_CERR_MESSAGE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CERR_MESSAGE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MESSAGE1));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CERR_MESSAGE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CERR_MESSAGE1]


//>> SET_[CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> SET_[CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MESSAGE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> GET_[CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CERR_MESSAGE1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1,
           CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CERR_MESSAGE1_CERR_MESSAGE_BITS1]

//>> PREP_[CS_SM2_SNP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CONFIG1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG1;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1]

//>> PUT_[CS_SM2_SNP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CONFIG1]


//>> SET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL,
           CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL,
           CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL,
           CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_POLL]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA,
           CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA,
           CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA,
           CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1_SCALE_RPT_HANG_DATA]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE,
           CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1_HOST_TAG_SIZE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY,
           CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY,
           CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY,
           CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1_ARB_NONCRR_SAFETY]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT,
           CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT,
           CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT,
           CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1_REPLAY_IP_LIMIT]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME,
           CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME,
           CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME,
           CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_REPLAY_TIME]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME,
           CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME,
           CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME,
           CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1_BLOCK_FOR_DIRSCAN_TIME]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH,
           CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH,
           CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH,
           CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1_THROT_ADDR_HASH]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2,
           CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2]

//>> SET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2,
           CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2]

//>> GET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2,
           CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG1_1_RESERVED2]

//>> PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3]

//>> PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3]


//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC3_WREND]

//>> PREP_[CS_SM2_SNP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_DEBUG1_CONFIG]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG]

//>> PUT_[CS_SM2_SNP_MISC_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_DEBUG1_CONFIG]


//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD0]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD1]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD2]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD3]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD4]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD5]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD6]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD7]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD8]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD9]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_POD10]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1,
           CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> CLEAR_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]
static inline bool GET_CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_DEBUG1_CONFIG));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_DEBUG1_CONFIG_ACT]

//>> PREP_[CS_SM2_SNP_MISC_GENID_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GENID_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_GENID_BAR]

//>> GET_[CS_SM2_SNP_MISC_GENID_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_GENID_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_GENID_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GENID_BAR]

//>> PUT_[CS_SM2_SNP_MISC_GENID_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_GENID_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_GENID_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_GENID_BAR]


//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> CLEAR_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]
static inline bool GET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> CLEAR_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]
static inline bool GET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> CLEAR_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]
static inline bool GET_CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]

//>> GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR,
           CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_ADDR]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2]

//>> GET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2,
           CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GENID_BAR_GENID_RESERVED2]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> CLEAR_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]
static inline bool GET_CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_GENID_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_GENID_BAR_CONFIG_GENID_BAR_POISON]

//>> PREP_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_PERF_ADDR_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG]

//>> GET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_PERF_ADDR_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_PERF_ADDR_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG]

//>> PUT_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_PERF_ADDR_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG]


//>> SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR,
           CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]

//>> SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR,
           CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]

//>> GET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR,
           CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_SIZE_ADDR]

//>> SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR,
           CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]

//>> SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR,
           CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]

//>> GET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR,
           CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_MATCH_ADDR]

//>> SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1,
           CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1,
           CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_ADDR_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1,
           CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_ADDR_CONFIG_ADDR_RESERVED1]

//>> PREP_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG]

//>> GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_PERF_MATCH_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_PERF_MATCH_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG]

//>> PUT_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_PERF_MATCH_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG]


//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]

//>> GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TTYPE]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_TSIZE]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> CLEAR_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]
static inline bool GET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_NVBE]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> CLEAR_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]
static inline bool GET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_UT]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]

//>> GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ATYPE]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]

//>> SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]

//>> GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PERF_MATCH_CONFIG));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC,
           CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PERF_MATCH_CONFIG_ALLOC]

//>> PREP_[CS_SM2_SNP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_SM_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_SM_STATUS]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_SM_STATUS;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_SM_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS]

//>> PUT_[CS_SM2_SNP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_SM_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_SM_STATUS]


//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_PWR0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_PWR0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_PWR1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_PWR1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_PWR2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_PWR2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PWR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PWR2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_XATS]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_XATS]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_XATS]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_XATS]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_XATS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_XATS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_XATS]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_XATS]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_XATS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_XATS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_XATS]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_INTS]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_INTS]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_INTS]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_INTS]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_INTS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_INTS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_INTS]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_INTS]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_INTS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_INTS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_INTS]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_CREQ0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST0]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CST0]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_CST0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CST0]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CST0]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_CST0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CST0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_PRB0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_PRB0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB0]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_CREQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST1]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CST1]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_CST1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CST1]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CST1]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_CST1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CST1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_PRB1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_PRB1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_CREQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST2]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CST2]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_CST2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CST2]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CST2]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_CST2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CST2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_PRB2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_PRB2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB2]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_CREQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ3]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST3]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST3]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST3]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CST3]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_CST3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CST3]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CST3]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_CST3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CST3]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_PRB3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_PRB3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB3]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_CREQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_CREQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_CREQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CREQ4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CREQ4]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST4]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST4]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CST4]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CST4]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CST4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_CST4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CST4]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CST4]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_CST4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CST4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CST4]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_PRB4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_PRB4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_PRB4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_PRB4]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CHGRATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CHGRATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_CHGRATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]

//>> CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_CHGRATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]
static inline bool GET_CS_SM2_SNP_MISC_SM_STATUS_CHGRATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_SM_STATUS_CHGRATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_CHGRATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_CHGRATE]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM2_SNP_MISC_SM_STATUS_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_SM_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_SM_STATUS_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM2_SNP_MISC_SM_STATUS_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_SM_STATUS_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_SM_STATUS_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_SM_STATUS_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_SM_STATUS_RESERVED1,
           CS_SM2_SNP_MISC_SM_STATUS_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_SM_STATUS_RESERVED1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_SM_STATUS_RESERVED1]

//>> PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_MESSAGE7(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE7;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_MESSAGE7(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE7;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE7, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE7]

//>> PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_MESSAGE7(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE7));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE7, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE7]


//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE7));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7,
           CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE7));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7,
           CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE7));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7,
           CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE7_CERR_MESSAGE_BITS7]

//>> PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0]

//>> PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0]


//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK0_SOURCE7_ARENA]

//>> PREP_[CS_SM3_SNP_MISC_LOW_WATER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_LOW_WATER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_LOW_WATER]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_LOW_WATER;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_LOW_WATER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER]

//>> PUT_[CS_SM3_SNP_MISC_LOW_WATER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_LOW_WATER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_LOW_WATER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_LOW_WATER]


//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PWR2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XATS]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_INTS]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQ4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CST4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRB4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_XI_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_REQX_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_CSTX_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]
static inline bool GET_CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_LOW_WATER_PRBX_SHARED]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PWR2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_XATS]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_INTS]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB0]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB1]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB2]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB3]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_REQ4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_CST4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4]

//>> SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4]

//>> GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_LOW_WATER));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4,
           CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_LOW_WATER_WEIGHT_PRB4]

//>> PREP_[DAT_MISC_CERR_LOG_FIRST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_CERR_LOG_FIRST(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_LOG_FIRST;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DAT_MISC_CERR_LOG_FIRST]

//>> GET_[DAT_MISC_CERR_LOG_FIRST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_CERR_LOG_FIRST(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_LOG_FIRST;
#endif
    return fapi2::getScom(i_target, DAT_MISC_CERR_LOG_FIRST, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DAT_MISC_CERR_LOG_FIRST]

//>> PUT_[DAT_MISC_CERR_LOG_FIRST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_CERR_LOG_FIRST(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_FIRST));
#endif
    return fapi2::putScom(i_target, DAT_MISC_CERR_LOG_FIRST, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DAT_MISC_CERR_LOG_FIRST]


//>> SET_[DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_FIRST));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS,
           DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS]

//>> SET_[DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_FIRST));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS,
           DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS]

//>> GET_[DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_LOG_FIRST));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS,
           DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_LOG_FIRST_CERR_LOG_FIRST_BITS]

//>> PREP_[DAT_MISC_CERR_PTY_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DAT_MISC_CERR_PTY_HOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_PTY_HOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DAT_MISC_CERR_PTY_HOLD]

//>> GET_[DAT_MISC_CERR_PTY_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DAT_MISC_CERR_PTY_HOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DAT_MISC_CERR_PTY_HOLD;
#endif
    return fapi2::getScom(i_target, DAT_MISC_CERR_PTY_HOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD]

//>> PUT_[DAT_MISC_CERR_PTY_HOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DAT_MISC_CERR_PTY_HOLD(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return fapi2::putScom(i_target, DAT_MISC_CERR_PTY_HOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DAT_MISC_CERR_PTY_HOLD]


//>> SET_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_INHIBIT_CONFIG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_MISC_STATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_MISC_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MISC_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_MISC_STATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_MISC_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MISC_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_MISC_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_MISC_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MISC_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_MISC_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_MISC_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MISC_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_MISC_STATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_MISC_STATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MISC_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_MISC_STATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_MISC_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MISC_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_MISC_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_MRG_STATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_MRG_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MRG_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_MRG_STATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_MRG_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MRG_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_MRG_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_MRG_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MRG_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_MRG_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_MRG_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MRG_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_MRG_STATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_MRG_STATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MRG_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_MRG_STATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_MRG_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_MRG_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_MRG_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_OBUF_STATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_OBUF_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_OBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_OBUF_STATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_OBUF_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_OBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_OBUF_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_OBUF_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_OBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_OBUF_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_OBUF_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_OBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_OBUF_STATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_OBUF_STATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_OBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_OBUF_STATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_OBUF_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_OBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_OBUF_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_PBTX_STATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_PBTX_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBTX_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_PBTX_STATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_PBTX_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBTX_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_PBTX_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_PBTX_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBTX_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_PBTX_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_PBTX_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBTX_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_PBTX_STATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_PBTX_STATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBTX_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_PBTX_STATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_PBTX_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBTX_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_PBTX_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_RQIN_STATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_RQIN_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_RQIN_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_RQIN_STATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_RQIN_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_RQIN_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_RQIN_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_RQIN_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_RQIN_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_RQIN_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_RQIN_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_RQIN_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_RQIN_STATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_RQIN_STATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_RQIN_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_RQIN_STATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_RQIN_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_RQIN_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_RQIN_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_IBUF_STATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_IBUF_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_IBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_IBUF_STATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_IBUF_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_IBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_IBUF_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_IBUF_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_IBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_IBUF_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_IBUF_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_IBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_IBUF_STATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_IBUF_STATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_IBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_IBUF_STATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_IBUF_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_IBUF_STATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_IBUF_STATE]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_ERRINJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ERRINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_ERRINJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ERRINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_ERRINJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_ERRINJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ERRINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_ERRINJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_ERRINJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ERRINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_ERRINJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ERRINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_ERRINJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_ERRINJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ERRINJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_ERRINJ]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_PBTX_AMO]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_PBTX_AMO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_PBTX_AMO,
           DAT_MISC_CERR_PTY_HOLD_PBTX_AMO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBTX_AMO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_PBTX_AMO]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_PBTX_AMO]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_PBTX_AMO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_PBTX_AMO,
           DAT_MISC_CERR_PTY_HOLD_PBTX_AMO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBTX_AMO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_PBTX_AMO]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_PBTX_AMO]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_PBTX_AMO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_PBTX_AMO,
           DAT_MISC_CERR_PTY_HOLD_PBTX_AMO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBTX_AMO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_PBTX_AMO]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_IBRD]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_IBRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_IBRD,
           DAT_MISC_CERR_PTY_HOLD_IBRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_IBRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_IBRD]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_IBRD]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_IBRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_IBRD,
           DAT_MISC_CERR_PTY_HOLD_IBRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_IBRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_IBRD]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_IBRD]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_IBRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_IBRD,
           DAT_MISC_CERR_PTY_HOLD_IBRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_IBRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_IBRD]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_OBRD]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_OBRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_OBRD,
           DAT_MISC_CERR_PTY_HOLD_OBRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_OBRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_OBRD]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_OBRD]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_OBRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_OBRD,
           DAT_MISC_CERR_PTY_HOLD_OBRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_OBRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_OBRD]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_OBRD]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_OBRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_OBRD,
           DAT_MISC_CERR_PTY_HOLD_OBRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_OBRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_OBRD]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_BBRD]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_BBRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_BBRD,
           DAT_MISC_CERR_PTY_HOLD_BBRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_BBRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_BBRD]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_BBRD]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_BBRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_BBRD,
           DAT_MISC_CERR_PTY_HOLD_BBRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_BBRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_BBRD]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_BBRD]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_BBRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_BBRD,
           DAT_MISC_CERR_PTY_HOLD_BBRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_BBRD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_BBRD]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_PBRX_RTAG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_ECC_CONFIG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_CONFIG1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_CONFIG1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_CONFIG1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_CONFIG1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_CONFIG1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_CONFIG1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_CONFIG1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_CONFIG1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_CONFIG1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_CONFIG1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_CONFIG1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_CONFIG1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_CONFIG1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_CONFIG1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_CONFIG1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_CONFIG1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_CONFIG1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_CONFIG1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_CONFIG1]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_DEBUG0_CONFIG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.insertFromRight<DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]

//>> SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.setBit<DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]

//>> CLEAR_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]
static inline fapi2::buffer<uint64_t>& CLEAR_DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return o_data.clearBit<DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]
static inline fapi2::buffer<uint64_t>& GET_DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.extractToRight<DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]

//>> GET_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]
static inline bool GET_DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DAT_MISC_CERR_PTY_HOLD));
#endif
    return i_data.getBit<DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DAT_MISC_CERR_PTY_HOLD_DEBUG1_CONFIG]

//>> PREP_[FIR_ACTION1_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_ACTION1_REG_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION1_REG_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_ACTION1_REG_1]

//>> GET_[FIR_ACTION1_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_ACTION1_REG_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_ACTION1_REG_1;
#endif
    return fapi2::getScom(i_target, FIR_ACTION1_REG_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_ACTION1_REG_1]

//>> PUT_[FIR_ACTION1_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_ACTION1_REG_1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_1));
#endif
    return fapi2::putScom(i_target, FIR_ACTION1_REG_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_ACTION1_REG_1]


//>> SET_[FIR_ACTION1_REG_1_FIR_ACTION1_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION1_REG_1_FIR_ACTION1_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_1));
#endif
    return o_data.insertFromRight<FIR_ACTION1_REG_1_FIR_ACTION1_1,
           FIR_ACTION1_REG_1_FIR_ACTION1_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_ACTION1_REG_1_FIR_ACTION1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_ACTION1_REG_1_FIR_ACTION1_1]

//>> SET_[FIR_ACTION1_REG_1_FIR_ACTION1_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_ACTION1_REG_1_FIR_ACTION1_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_1));
#endif
    return o_data.insertFromRight<FIR_ACTION1_REG_1_FIR_ACTION1_1,
           FIR_ACTION1_REG_1_FIR_ACTION1_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_ACTION1_REG_1_FIR_ACTION1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_ACTION1_REG_1_FIR_ACTION1_1]

//>> GET_[FIR_ACTION1_REG_1_FIR_ACTION1_1]
static inline fapi2::buffer<uint64_t>& GET_FIR_ACTION1_REG_1_FIR_ACTION1_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_ACTION1_REG_1));
#endif
    return i_data.extractToRight<FIR_ACTION1_REG_1_FIR_ACTION1_1,
           FIR_ACTION1_REG_1_FIR_ACTION1_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_ACTION1_REG_1_FIR_ACTION1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_ACTION1_REG_1_FIR_ACTION1_1]

//>> PREP_[FIR_MASK_REG_1_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_MASK_REG_1_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_1_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_MASK_REG_1_RW]

//>> GET_[FIR_MASK_REG_1_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_MASK_REG_1_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_1_RW;
#endif
    return fapi2::getScom(i_target, FIR_MASK_REG_1_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_MASK_REG_1_RW]

//>> PUT_[FIR_MASK_REG_1_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_MASK_REG_1_RW(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_1_RW, FIR_MASK_REG_1_WO_AND, FIR_MASK_REG_1_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_MASK_REG_1_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_MASK_REG_1_RW]

//>> PREP_[FIR_MASK_REG_1_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_MASK_REG_1_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_1_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_MASK_REG_1_WO_AND]

//>> GET_[FIR_MASK_REG_1_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_MASK_REG_1_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_1_WO_AND;
#endif
    return fapi2::getScom(i_target, FIR_MASK_REG_1_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_MASK_REG_1_WO_AND]

//>> PUT_[FIR_MASK_REG_1_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_MASK_REG_1_WO_AND(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_1_RW, FIR_MASK_REG_1_WO_AND, FIR_MASK_REG_1_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_MASK_REG_1_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_MASK_REG_1_WO_AND]

//>> PREP_[FIR_MASK_REG_1_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_FIR_MASK_REG_1_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_1_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[FIR_MASK_REG_1_WO_OR]

//>> GET_[FIR_MASK_REG_1_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_FIR_MASK_REG_1_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = FIR_MASK_REG_1_WO_OR;
#endif
    return fapi2::getScom(i_target, FIR_MASK_REG_1_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[FIR_MASK_REG_1_WO_OR]

//>> PUT_[FIR_MASK_REG_1_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_FIR_MASK_REG_1_WO_OR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_1_RW, FIR_MASK_REG_1_WO_AND, FIR_MASK_REG_1_WO_OR));
#endif
    return fapi2::putScom(i_target, FIR_MASK_REG_1_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[FIR_MASK_REG_1_WO_OR]


//>> SET_[FIR_MASK_REG_1_FIR_MASK_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_MASK_REG_1_FIR_MASK_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_1_RW, FIR_MASK_REG_1_WO_AND, FIR_MASK_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_MASK_REG_1_FIR_MASK_1,
           FIR_MASK_REG_1_FIR_MASK_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access FIR_MASK_REG_1_FIR_MASK_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_MASK_REG_1_FIR_MASK_1]

//>> SET_[FIR_MASK_REG_1_FIR_MASK_1]
static inline fapi2::buffer<uint64_t>& SET_FIR_MASK_REG_1_FIR_MASK_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_1_RW, FIR_MASK_REG_1_WO_AND, FIR_MASK_REG_1_WO_OR));
#endif
    return o_data.insertFromRight<FIR_MASK_REG_1_FIR_MASK_1,
           FIR_MASK_REG_1_FIR_MASK_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access FIR_MASK_REG_1_FIR_MASK_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[FIR_MASK_REG_1_FIR_MASK_1]

//>> GET_[FIR_MASK_REG_1_FIR_MASK_1]
static inline fapi2::buffer<uint64_t>& GET_FIR_MASK_REG_1_FIR_MASK_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(FIR_MASK_REG_1_RW, FIR_MASK_REG_1_WO_AND, FIR_MASK_REG_1_WO_OR));
#endif
    return i_data.extractToRight<FIR_MASK_REG_1_FIR_MASK_1,
           FIR_MASK_REG_1_FIR_MASK_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access FIR_MASK_REG_1_FIR_MASK_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[FIR_MASK_REG_1_FIR_MASK_1]

//>> PREP_[MISC_REGS_BDF2PE_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_BDF2PE_0_CONFIG]

//>> GET_[MISC_REGS_BDF2PE_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_0_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_0_CONFIG]

//>> PUT_[MISC_REGS_BDF2PE_0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_BDF2PE_0_CONFIG]


//>> SET_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_0_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_0_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_0_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_0_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_0_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_0_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_0_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_0_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_0_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_0_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_BDF2PE_0_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_0_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_0_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_0_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_0_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_0_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_0_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_0_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_0_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_0_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_0_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_0_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_0_CONFIG_RESERVED]

//>> GET_[MISC_REGS_BDF2PE_0_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_0_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_0_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_0_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_0_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_0_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_0_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_0_CONFIG_PE,
           MISC_REGS_BDF2PE_0_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_0_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_0_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_0_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_0_CONFIG_PE,
           MISC_REGS_BDF2PE_0_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_0_CONFIG_PE]

//>> GET_[MISC_REGS_BDF2PE_0_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_0_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_0_CONFIG_PE,
           MISC_REGS_BDF2PE_0_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_0_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_0_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_0_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_0_CONFIG_BDF,
           MISC_REGS_BDF2PE_0_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_0_CONFIG_BDF]

//>> SET_[MISC_REGS_BDF2PE_0_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_0_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_0_CONFIG_BDF,
           MISC_REGS_BDF2PE_0_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_0_CONFIG_BDF]

//>> GET_[MISC_REGS_BDF2PE_0_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_0_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_0_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_0_CONFIG_BDF,
           MISC_REGS_BDF2PE_0_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_0_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_0_CONFIG_BDF]

//>> PREP_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_ERROR_BRICK_GROUP_CONFIG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_ERROR_BRICK_GROUP_CONFIG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2]

//>> GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_ERROR_BRICK_GROUP_CONFIG2;
#endif
    return fapi2::getScom(i_target, MISC_REGS_ERROR_BRICK_GROUP_CONFIG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2]

//>> PUT_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_ERROR_BRICK_GROUP_CONFIG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG2));
#endif
    return fapi2::putScom(i_target, MISC_REGS_ERROR_BRICK_GROUP_CONFIG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2]


//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG2));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG2));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0]

//>> GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG2));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_0]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG2));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1]

//>> SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG2));
#endif
    return o_data.insertFromRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1]

//>> GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_ERROR_BRICK_GROUP_CONFIG2));
#endif
    return i_data.extractToRight<MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1,
           MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_ERROR_BRICK_GROUP_CONFIG2_1]

//>> PREP_[MISC_REGS_PESTB_DATA_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_PESTB_DATA_PE8(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE8;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_PESTB_DATA_PE8]

//>> GET_[MISC_REGS_PESTB_DATA_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_PESTB_DATA_PE8(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_PESTB_DATA_PE8;
#endif
    return fapi2::getScom(i_target, MISC_REGS_PESTB_DATA_PE8, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE8]

//>> PUT_[MISC_REGS_PESTB_DATA_PE8]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_PESTB_DATA_PE8(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE8));
#endif
    return fapi2::putScom(i_target, MISC_REGS_PESTB_DATA_PE8, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_PESTB_DATA_PE8]


//>> SET_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]

//>> SET_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE8));
#endif
    return o_data.insertFromRight<MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]

//>> SET_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE8));
#endif
    return o_data.setBit<MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]

//>> CLEAR_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE8));
#endif
    return o_data.clearBit<MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]

//>> GET_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE8));
#endif
    return i_data.extractToRight<MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]

//>> GET_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]
static inline bool GET_MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_PESTB_DATA_PE8));
#endif
    return i_data.getBit<MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_PESTB_DATA_PE8_DMA_STOPPED_STATE_PE8]

//>> PREP_[OTL0_MISC_CONFIG_TLX_CREDITS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_CONFIG_TLX_CREDITS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG_TLX_CREDITS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_CONFIG_TLX_CREDITS]

//>> GET_[OTL0_MISC_CONFIG_TLX_CREDITS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_CONFIG_TLX_CREDITS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG_TLX_CREDITS;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_CONFIG_TLX_CREDITS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TLX_CREDITS]

//>> PUT_[OTL0_MISC_CONFIG_TLX_CREDITS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_CONFIG_TLX_CREDITS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_CONFIG_TLX_CREDITS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_CONFIG_TLX_CREDITS]


//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]

//>> GET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC0_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]

//>> GET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC1_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]

//>> GET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC2_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]

//>> GET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TLX_CREDITS_VC3_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]

//>> GET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP0_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_SPARE,
           OTL0_MISC_CONFIG_TLX_CREDITS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_SPARE]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_SPARE,
           OTL0_MISC_CONFIG_TLX_CREDITS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_SPARE]

//>> GET_[OTL0_MISC_CONFIG_TLX_CREDITS_SPARE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TLX_CREDITS_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TLX_CREDITS_SPARE,
           OTL0_MISC_CONFIG_TLX_CREDITS_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TLX_CREDITS_SPARE]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]

//>> GET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP2_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]

//>> SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]

//>> GET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG_TLX_CREDITS));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS,
           OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG_TLX_CREDITS_DCP3_CREDITS]

//>> PREP_[OTL0_MISC_TL_VC_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_TL_VC_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_TL_VC_CREDIT_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_TL_VC_CREDIT_STATUS]

//>> GET_[OTL0_MISC_TL_VC_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_TL_VC_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_TL_VC_CREDIT_STATUS;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_TL_VC_CREDIT_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_TL_VC_CREDIT_STATUS]

//>> PUT_[OTL0_MISC_TL_VC_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_TL_VC_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_VC_CREDIT_STATUS));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_TL_VC_CREDIT_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_TL_VC_CREDIT_STATUS]


//>> SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_VC_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT,
           OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT]

//>> SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_VC_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT,
           OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT]

//>> GET_[OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_VC_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT,
           OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TL_VC_CREDIT_STATUS_0_COUNT]

//>> SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_VC_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT,
           OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT]

//>> SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_VC_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT,
           OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT]

//>> GET_[OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_VC_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT,
           OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TL_VC_CREDIT_STATUS_1_COUNT]

//>> SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_VC_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT,
           OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT]

//>> SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_VC_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT,
           OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT]

//>> GET_[OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_TL_VC_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT,
           OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_TL_VC_CREDIT_STATUS_2_COUNT]

//>> PREP_[OTL1_MISC_CONFIG_TX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_CONFIG_TX(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_TX;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_CONFIG_TX]

//>> GET_[OTL1_MISC_CONFIG_TX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_CONFIG_TX(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_CONFIG_TX;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_CONFIG_TX, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX]

//>> PUT_[OTL1_MISC_CONFIG_TX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_CONFIG_TX(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_CONFIG_TX, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_CONFIG_TX]


//>> SET_[OTL1_MISC_CONFIG_TX_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_SPARE0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_SPARE0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_SPARE0]

//>> SET_[OTL1_MISC_CONFIG_TX_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_SPARE0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_SPARE0]

//>> SET_[OTL1_MISC_CONFIG_TX_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_SPARE0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX_SPARE0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_SPARE0]

//>> CLEAR_[OTL1_MISC_CONFIG_TX_SPARE0]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX_SPARE0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX_SPARE0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX_SPARE0]

//>> GET_[OTL1_MISC_CONFIG_TX_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_SPARE0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_SPARE0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_SPARE0]

//>> GET_[OTL1_MISC_CONFIG_TX_SPARE0]
static inline bool GET_OTL1_MISC_CONFIG_TX_SPARE0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX_SPARE0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_SPARE0]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP1_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP1_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP1_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP1_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP1_EN]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP1_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP1_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP1_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP1_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP1_EN]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP1_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP1_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX_TEMP1_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP1_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP1_EN]

//>> CLEAR_[OTL1_MISC_CONFIG_TX_TEMP1_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX_TEMP1_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX_TEMP1_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP1_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX_TEMP1_EN]

//>> GET_[OTL1_MISC_CONFIG_TX_TEMP1_EN]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_TEMP1_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_TEMP1_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP1_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_TEMP1_EN]

//>> GET_[OTL1_MISC_CONFIG_TX_TEMP1_EN]
static inline bool GET_OTL1_MISC_CONFIG_TX_TEMP1_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX_TEMP1_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP1_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_TEMP1_EN]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP2_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP2_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP2_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP2_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP2_EN]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP2_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP2_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP2_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP2_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP2_EN]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP2_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP2_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX_TEMP2_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP2_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP2_EN]

//>> CLEAR_[OTL1_MISC_CONFIG_TX_TEMP2_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX_TEMP2_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX_TEMP2_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP2_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX_TEMP2_EN]

//>> GET_[OTL1_MISC_CONFIG_TX_TEMP2_EN]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_TEMP2_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_TEMP2_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP2_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_TEMP2_EN]

//>> GET_[OTL1_MISC_CONFIG_TX_TEMP2_EN]
static inline bool GET_OTL1_MISC_CONFIG_TX_TEMP2_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX_TEMP2_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP2_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_TEMP2_EN]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP3_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP3_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP3_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP3_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP3_EN]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP3_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP3_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP3_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP3_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP3_EN]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP3_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP3_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX_TEMP3_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP3_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP3_EN]

//>> CLEAR_[OTL1_MISC_CONFIG_TX_TEMP3_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX_TEMP3_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX_TEMP3_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP3_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX_TEMP3_EN]

//>> GET_[OTL1_MISC_CONFIG_TX_TEMP3_EN]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_TEMP3_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_TEMP3_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP3_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_TEMP3_EN]

//>> GET_[OTL1_MISC_CONFIG_TX_TEMP3_EN]
static inline bool GET_OTL1_MISC_CONFIG_TX_TEMP3_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX_TEMP3_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP3_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_TEMP3_EN]

//>> SET_[OTL1_MISC_CONFIG_TX_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_SPARE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_SPARE1]

//>> SET_[OTL1_MISC_CONFIG_TX_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_SPARE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_SPARE1]

//>> SET_[OTL1_MISC_CONFIG_TX_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_SPARE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX_SPARE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_SPARE1]

//>> CLEAR_[OTL1_MISC_CONFIG_TX_SPARE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX_SPARE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX_SPARE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX_SPARE1]

//>> GET_[OTL1_MISC_CONFIG_TX_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_SPARE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_SPARE1]

//>> GET_[OTL1_MISC_CONFIG_TX_SPARE1]
static inline bool GET_OTL1_MISC_CONFIG_TX_SPARE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX_SPARE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_SPARE1]

//>> SET_[OTL1_MISC_CONFIG_TX_DRDY_WAIT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_DRDY_WAIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_DRDY_WAIT,
           OTL1_MISC_CONFIG_TX_DRDY_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_DRDY_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_DRDY_WAIT]

//>> SET_[OTL1_MISC_CONFIG_TX_DRDY_WAIT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_DRDY_WAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_DRDY_WAIT,
           OTL1_MISC_CONFIG_TX_DRDY_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_DRDY_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_DRDY_WAIT]

//>> GET_[OTL1_MISC_CONFIG_TX_DRDY_WAIT]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_DRDY_WAIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_DRDY_WAIT,
           OTL1_MISC_CONFIG_TX_DRDY_WAIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_DRDY_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_DRDY_WAIT]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP0_RATE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP0_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP0_RATE,
           OTL1_MISC_CONFIG_TX_TEMP0_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP0_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP0_RATE]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP0_RATE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP0_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP0_RATE,
           OTL1_MISC_CONFIG_TX_TEMP0_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP0_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP0_RATE]

//>> GET_[OTL1_MISC_CONFIG_TX_TEMP0_RATE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_TEMP0_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_TEMP0_RATE,
           OTL1_MISC_CONFIG_TX_TEMP0_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP0_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_TEMP0_RATE]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP1_RATE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP1_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP1_RATE,
           OTL1_MISC_CONFIG_TX_TEMP1_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP1_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP1_RATE]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP1_RATE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP1_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP1_RATE,
           OTL1_MISC_CONFIG_TX_TEMP1_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP1_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP1_RATE]

//>> GET_[OTL1_MISC_CONFIG_TX_TEMP1_RATE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_TEMP1_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_TEMP1_RATE,
           OTL1_MISC_CONFIG_TX_TEMP1_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP1_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_TEMP1_RATE]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP2_RATE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP2_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP2_RATE,
           OTL1_MISC_CONFIG_TX_TEMP2_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP2_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP2_RATE]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP2_RATE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP2_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP2_RATE,
           OTL1_MISC_CONFIG_TX_TEMP2_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP2_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP2_RATE]

//>> GET_[OTL1_MISC_CONFIG_TX_TEMP2_RATE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_TEMP2_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_TEMP2_RATE,
           OTL1_MISC_CONFIG_TX_TEMP2_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP2_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_TEMP2_RATE]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP3_RATE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP3_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP3_RATE,
           OTL1_MISC_CONFIG_TX_TEMP3_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP3_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP3_RATE]

//>> SET_[OTL1_MISC_CONFIG_TX_TEMP3_RATE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_TEMP3_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_TEMP3_RATE,
           OTL1_MISC_CONFIG_TX_TEMP3_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP3_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_TEMP3_RATE]

//>> GET_[OTL1_MISC_CONFIG_TX_TEMP3_RATE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_TEMP3_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_TEMP3_RATE,
           OTL1_MISC_CONFIG_TX_TEMP3_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_TEMP3_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_TEMP3_RATE]

//>> SET_[OTL1_MISC_CONFIG_TX_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_SPARE2,
           OTL1_MISC_CONFIG_TX_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_SPARE2]

//>> SET_[OTL1_MISC_CONFIG_TX_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_SPARE2,
           OTL1_MISC_CONFIG_TX_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_SPARE2]

//>> GET_[OTL1_MISC_CONFIG_TX_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_SPARE2,
           OTL1_MISC_CONFIG_TX_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_SPARE2]

//>> SET_[OTL1_MISC_CONFIG_TX_CRET_FREQ]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_CRET_FREQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_CRET_FREQ,
           OTL1_MISC_CONFIG_TX_CRET_FREQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_CRET_FREQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_CRET_FREQ]

//>> SET_[OTL1_MISC_CONFIG_TX_CRET_FREQ]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_CRET_FREQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_CRET_FREQ,
           OTL1_MISC_CONFIG_TX_CRET_FREQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_CRET_FREQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_CRET_FREQ]

//>> GET_[OTL1_MISC_CONFIG_TX_CRET_FREQ]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_CRET_FREQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_CRET_FREQ,
           OTL1_MISC_CONFIG_TX_CRET_FREQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_CRET_FREQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_CRET_FREQ]

//>> SET_[OTL1_MISC_CONFIG_TX_AGE_FREQ]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_AGE_FREQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_AGE_FREQ,
           OTL1_MISC_CONFIG_TX_AGE_FREQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_AGE_FREQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_AGE_FREQ]

//>> SET_[OTL1_MISC_CONFIG_TX_AGE_FREQ]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_AGE_FREQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_AGE_FREQ,
           OTL1_MISC_CONFIG_TX_AGE_FREQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_AGE_FREQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_AGE_FREQ]

//>> GET_[OTL1_MISC_CONFIG_TX_AGE_FREQ]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_AGE_FREQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_AGE_FREQ,
           OTL1_MISC_CONFIG_TX_AGE_FREQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_AGE_FREQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_AGE_FREQ]

//>> SET_[OTL1_MISC_CONFIG_TX_RS2_HPWAIT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_RS2_HPWAIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_RS2_HPWAIT,
           OTL1_MISC_CONFIG_TX_RS2_HPWAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_RS2_HPWAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_RS2_HPWAIT]

//>> SET_[OTL1_MISC_CONFIG_TX_RS2_HPWAIT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_RS2_HPWAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_RS2_HPWAIT,
           OTL1_MISC_CONFIG_TX_RS2_HPWAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_RS2_HPWAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_RS2_HPWAIT]

//>> GET_[OTL1_MISC_CONFIG_TX_RS2_HPWAIT]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_RS2_HPWAIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_RS2_HPWAIT,
           OTL1_MISC_CONFIG_TX_RS2_HPWAIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_RS2_HPWAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_RS2_HPWAIT]

//>> SET_[OTL1_MISC_CONFIG_TX_RQ4_HPWAIT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_RQ4_HPWAIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_RQ4_HPWAIT,
           OTL1_MISC_CONFIG_TX_RQ4_HPWAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_RQ4_HPWAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_RQ4_HPWAIT]

//>> SET_[OTL1_MISC_CONFIG_TX_RQ4_HPWAIT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_RQ4_HPWAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_RQ4_HPWAIT,
           OTL1_MISC_CONFIG_TX_RQ4_HPWAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_RQ4_HPWAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_RQ4_HPWAIT]

//>> GET_[OTL1_MISC_CONFIG_TX_RQ4_HPWAIT]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_RQ4_HPWAIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_RQ4_HPWAIT,
           OTL1_MISC_CONFIG_TX_RQ4_HPWAIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_RQ4_HPWAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_RQ4_HPWAIT]

//>> SET_[OTL1_MISC_CONFIG_TX_RQ6_HPWAIT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_RQ6_HPWAIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_RQ6_HPWAIT,
           OTL1_MISC_CONFIG_TX_RQ6_HPWAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_RQ6_HPWAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_RQ6_HPWAIT]

//>> SET_[OTL1_MISC_CONFIG_TX_RQ6_HPWAIT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_RQ6_HPWAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_RQ6_HPWAIT,
           OTL1_MISC_CONFIG_TX_RQ6_HPWAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_RQ6_HPWAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_RQ6_HPWAIT]

//>> GET_[OTL1_MISC_CONFIG_TX_RQ6_HPWAIT]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_RQ6_HPWAIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_RQ6_HPWAIT,
           OTL1_MISC_CONFIG_TX_RQ6_HPWAIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_RQ6_HPWAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_RQ6_HPWAIT]

//>> SET_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]

//>> SET_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]

//>> SET_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]

//>> CLEAR_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]

//>> GET_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]

//>> GET_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]
static inline bool GET_OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_CBUF_ECC_DIS]

//>> SET_[OTL1_MISC_CONFIG_TX_EVENT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_EVENT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_EVENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_EVENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_EVENT]

//>> SET_[OTL1_MISC_CONFIG_TX_EVENT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_EVENT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_EVENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_EVENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_EVENT]

//>> SET_[OTL1_MISC_CONFIG_TX_EVENT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_EVENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX_EVENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_EVENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_EVENT]

//>> CLEAR_[OTL1_MISC_CONFIG_TX_EVENT]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX_EVENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX_EVENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_EVENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX_EVENT]

//>> GET_[OTL1_MISC_CONFIG_TX_EVENT]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_EVENT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_EVENT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_EVENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_EVENT]

//>> GET_[OTL1_MISC_CONFIG_TX_EVENT]
static inline bool GET_OTL1_MISC_CONFIG_TX_EVENT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX_EVENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_EVENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_EVENT]

//>> SET_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_STOP_ON_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_STOP_ON_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_STOP_ON_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]

//>> SET_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_STOP_ON_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_STOP_ON_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_STOP_ON_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]

//>> SET_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_STOP_ON_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX_STOP_ON_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_STOP_ON_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]

//>> CLEAR_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX_STOP_ON_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX_STOP_ON_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_STOP_ON_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]

//>> GET_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_STOP_ON_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_STOP_ON_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_STOP_ON_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]

//>> GET_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]
static inline bool GET_OTL1_MISC_CONFIG_TX_STOP_ON_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX_STOP_ON_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_STOP_ON_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_STOP_ON_UE]

//>> SET_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]

//>> SET_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]

//>> SET_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]

//>> CLEAR_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]

//>> GET_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]

//>> GET_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]
static inline bool GET_OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_T0_MASK_CRTN0]

//>> SET_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]

//>> SET_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]

//>> SET_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]

//>> CLEAR_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]

//>> GET_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]

//>> GET_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]
static inline bool GET_OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_T123_MASK_CRTN0]

//>> SET_[OTL1_MISC_CONFIG_TX_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_SPARE3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_SPARE3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_SPARE3]

//>> SET_[OTL1_MISC_CONFIG_TX_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.insertFromRight<OTL1_MISC_CONFIG_TX_SPARE3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_SPARE3]

//>> SET_[OTL1_MISC_CONFIG_TX_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_CONFIG_TX_SPARE3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.setBit<OTL1_MISC_CONFIG_TX_SPARE3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_CONFIG_TX_SPARE3]

//>> CLEAR_[OTL1_MISC_CONFIG_TX_SPARE3]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_CONFIG_TX_SPARE3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return o_data.clearBit<OTL1_MISC_CONFIG_TX_SPARE3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_CONFIG_TX_SPARE3]

//>> GET_[OTL1_MISC_CONFIG_TX_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_CONFIG_TX_SPARE3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.extractToRight<OTL1_MISC_CONFIG_TX_SPARE3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_SPARE3]

//>> GET_[OTL1_MISC_CONFIG_TX_SPARE3]
static inline bool GET_OTL1_MISC_CONFIG_TX_SPARE3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_CONFIG_TX));
#endif
    return i_data.getBit<OTL1_MISC_CONFIG_TX_SPARE3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_CONFIG_TX_SPARE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_CONFIG_TX_SPARE3]

//>> PREP_[OTL1_MISC_HAPPI_BAR3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_HAPPI_BAR3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_HAPPI_BAR3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_HAPPI_BAR3]

//>> GET_[OTL1_MISC_HAPPI_BAR3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_HAPPI_BAR3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_HAPPI_BAR3;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_HAPPI_BAR3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR3]

//>> PUT_[OTL1_MISC_HAPPI_BAR3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_HAPPI_BAR3(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_HAPPI_BAR3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_HAPPI_BAR3]


//>> SET_[OTL1_MISC_HAPPI_BAR3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR3_ENABLE]

//>> SET_[OTL1_MISC_HAPPI_BAR3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR3_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR3_ENABLE]

//>> SET_[OTL1_MISC_HAPPI_BAR3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return o_data.setBit<OTL1_MISC_HAPPI_BAR3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR3_ENABLE]

//>> CLEAR_[OTL1_MISC_HAPPI_BAR3_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_HAPPI_BAR3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return o_data.clearBit<OTL1_MISC_HAPPI_BAR3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_HAPPI_BAR3_ENABLE]

//>> GET_[OTL1_MISC_HAPPI_BAR3_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR3_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR3_ENABLE]

//>> GET_[OTL1_MISC_HAPPI_BAR3_ENABLE]
static inline bool GET_OTL1_MISC_HAPPI_BAR3_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return i_data.getBit<OTL1_MISC_HAPPI_BAR3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR3_ENABLE]

//>> SET_[OTL1_MISC_HAPPI_BAR3_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR3_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR3_ADDR,
           OTL1_MISC_HAPPI_BAR3_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR3_ADDR]

//>> SET_[OTL1_MISC_HAPPI_BAR3_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR3_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR3_ADDR,
           OTL1_MISC_HAPPI_BAR3_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR3_ADDR]

//>> GET_[OTL1_MISC_HAPPI_BAR3_ADDR]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR3_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR3_ADDR,
           OTL1_MISC_HAPPI_BAR3_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR3_ADDR]

//>> SET_[OTL1_MISC_HAPPI_BAR3_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR3_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR3_MASK,
           OTL1_MISC_HAPPI_BAR3_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR3_MASK]

//>> SET_[OTL1_MISC_HAPPI_BAR3_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR3_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR3_MASK,
           OTL1_MISC_HAPPI_BAR3_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR3_MASK]

//>> GET_[OTL1_MISC_HAPPI_BAR3_MASK]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR3_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR3_MASK,
           OTL1_MISC_HAPPI_BAR3_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR3_MASK]

//>> SET_[OTL1_MISC_HAPPI_BAR3_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR3_SUB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR3_SUB,
           OTL1_MISC_HAPPI_BAR3_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR3_SUB]

//>> SET_[OTL1_MISC_HAPPI_BAR3_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_HAPPI_BAR3_SUB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return o_data.insertFromRight<OTL1_MISC_HAPPI_BAR3_SUB,
           OTL1_MISC_HAPPI_BAR3_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_HAPPI_BAR3_SUB]

//>> GET_[OTL1_MISC_HAPPI_BAR3_SUB]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_HAPPI_BAR3_SUB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_HAPPI_BAR3));
#endif
    return i_data.extractToRight<OTL1_MISC_HAPPI_BAR3_SUB,
           OTL1_MISC_HAPPI_BAR3_SUB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_HAPPI_BAR3_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_HAPPI_BAR3_SUB]

//>> PREP_[OTL1_MISC_PMU_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_PMU_CONTROL0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PMU_CONTROL0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_PMU_CONTROL0]

//>> GET_[OTL1_MISC_PMU_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_PMU_CONTROL0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_PMU_CONTROL0;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_PMU_CONTROL0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0]

//>> PUT_[OTL1_MISC_PMU_CONTROL0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_PMU_CONTROL0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_PMU_CONTROL0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_PMU_CONTROL0]


//>> SET_[OTL1_MISC_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_ENABLE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_ENABLE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.setBit<OTL1_MISC_PMU_CONTROL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_ENABLE]

//>> CLEAR_[OTL1_MISC_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.clearBit<OTL1_MISC_PMU_CONTROL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_PMU_CONTROL0_ENABLE]

//>> GET_[OTL1_MISC_PMU_CONTROL0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_ENABLE]

//>> GET_[OTL1_MISC_PMU_CONTROL0_ENABLE]
static inline bool GET_OTL1_MISC_PMU_CONTROL0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.getBit<OTL1_MISC_PMU_CONTROL0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_ENABLE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_RESETMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_RESETMODE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_RESETMODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_RESETMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_RESETMODE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.setBit<OTL1_MISC_PMU_CONTROL0_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_RESETMODE]

//>> CLEAR_[OTL1_MISC_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.clearBit<OTL1_MISC_PMU_CONTROL0_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_PMU_CONTROL0_RESETMODE]

//>> GET_[OTL1_MISC_PMU_CONTROL0_RESETMODE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_RESETMODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_RESETMODE]

//>> GET_[OTL1_MISC_PMU_CONTROL0_RESETMODE]
static inline bool GET_OTL1_MISC_PMU_CONTROL0_RESETMODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.getBit<OTL1_MISC_PMU_CONTROL0_RESETMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_RESETMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_RESETMODE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_FREEZEMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_FREEZEMODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_FREEZEMODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.setBit<OTL1_MISC_PMU_CONTROL0_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]

//>> CLEAR_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.clearBit<OTL1_MISC_PMU_CONTROL0_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]

//>> GET_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_FREEZEMODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]

//>> GET_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]
static inline bool GET_OTL1_MISC_PMU_CONTROL0_FREEZEMODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.getBit<OTL1_MISC_PMU_CONTROL0_FREEZEMODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_FREEZEMODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_FREEZEMODE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> SET_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> SET_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.setBit<OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> CLEAR_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.clearBit<OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> GET_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> GET_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]
static inline bool GET_OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.getBit<OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_DISABLE_PMISC]

//>> SET_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_PMISC_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.setBit<OTL1_MISC_PMU_CONTROL0_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]

//>> CLEAR_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.clearBit<OTL1_MISC_PMU_CONTROL0_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]

//>> GET_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_PMISC_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]

//>> GET_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]
static inline bool GET_OTL1_MISC_PMU_CONTROL0_PMISC_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.getBit<OTL1_MISC_PMU_CONTROL0_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_PMISC_MODE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_CASCADE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_CASCADE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_CASCADE,
           OTL1_MISC_PMU_CONTROL0_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_CASCADE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_CASCADE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_CASCADE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_CASCADE,
           OTL1_MISC_PMU_CONTROL0_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_CASCADE]

//>> GET_[OTL1_MISC_PMU_CONTROL0_CASCADE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_CASCADE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_CASCADE,
           OTL1_MISC_PMU_CONTROL0_CASCADE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_CASCADE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_CASCADE]

//>> SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C0,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C0]

//>> SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C0,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C0]

//>> GET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C0]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C0,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C0]

//>> SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C1,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C1]

//>> SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C1,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C1]

//>> GET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C1]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C1,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C1]

//>> SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C2,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C2]

//>> SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C2,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C2]

//>> GET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C2,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C2]

//>> SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C3,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C3]

//>> SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C3,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C3]

//>> GET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C3]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_PRESCALE_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_PRESCALE_C3,
           OTL1_MISC_PMU_CONTROL0_PRESCALE_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_PRESCALE_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_PRESCALE_C3]

//>> SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_OPERATION_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C0,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C0]

//>> SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_OPERATION_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C0,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C0]

//>> GET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C0]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_OPERATION_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C0,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C0]

//>> SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_OPERATION_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C1,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C1]

//>> SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_OPERATION_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C1,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C1]

//>> GET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C1]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_OPERATION_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C1,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C1]

//>> SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_OPERATION_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C2,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C2]

//>> SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_OPERATION_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C2,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C2]

//>> GET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_OPERATION_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C2,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C2]

//>> SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_OPERATION_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C3,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C3]

//>> SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_OPERATION_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C3,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C3]

//>> GET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C3]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_OPERATION_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_OPERATION_C3,
           OTL1_MISC_PMU_CONTROL0_OPERATION_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_OPERATION_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_OPERATION_C3]

//>> SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_EVENTS_C0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C0,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C0]

//>> SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_EVENTS_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C0,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C0]

//>> GET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C0]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_EVENTS_C0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C0,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C0]

//>> SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_EVENTS_C1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C1,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C1]

//>> SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_EVENTS_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C1,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C1]

//>> GET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C1]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_EVENTS_C1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C1,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C1]

//>> SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_EVENTS_C2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C2,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C2]

//>> SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_EVENTS_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C2,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C2]

//>> GET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_EVENTS_C2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C2,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C2]

//>> SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_EVENTS_C3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C3,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C3]

//>> SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_EVENTS_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C3,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C3]

//>> GET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C3]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_EVENTS_C3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_EVENTS_C3,
           OTL1_MISC_PMU_CONTROL0_EVENTS_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_EVENTS_C3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_EVENTS_C3]

//>> SET_[OTL1_MISC_PMU_CONTROL0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_RESERVED0,
           OTL1_MISC_PMU_CONTROL0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_RESERVED0]

//>> SET_[OTL1_MISC_PMU_CONTROL0_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_PMU_CONTROL0_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return o_data.insertFromRight<OTL1_MISC_PMU_CONTROL0_RESERVED0,
           OTL1_MISC_PMU_CONTROL0_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_PMU_CONTROL0_RESERVED0]

//>> GET_[OTL1_MISC_PMU_CONTROL0_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_PMU_CONTROL0_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_PMU_CONTROL0));
#endif
    return i_data.extractToRight<OTL1_MISC_PMU_CONTROL0_RESERVED0,
           OTL1_MISC_PMU_CONTROL0_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_PMU_CONTROL0_RESERVED0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_PMU_CONTROL0_RESERVED0]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MLPID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MPID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_MADDR_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVR_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PRS_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_PAGESIZE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVALL_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_SEGSIZE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVEA_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_ERAT_WR_INVADDR_DIAL]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_64K_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_2M_PG_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_AME_DISABLE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_XLATE_CFG2_KILL_XLATE_TYPE_DIAL]

//>> PREP_[XSL_MAIN_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_DEBUG1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_DEBUG1_CONFIG]

//>> GET_[XSL_MAIN_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_DEBUG1_CONFIG;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_DEBUG1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_DEBUG1_CONFIG]

//>> PUT_[XSL_MAIN_DEBUG1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_DEBUG1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_DEBUG1_CONFIG));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_DEBUG1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_DEBUG1_CONFIG]


//>> SET_[XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL,
           XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL]

//>> SET_[XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_DEBUG1_CONFIG));
#endif
    return o_data.insertFromRight<XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL,
           XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL]

//>> GET_[XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_DEBUG1_CONFIG));
#endif
    return i_data.extractToRight<XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL,
           XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_DEBUG1_CONFIG_XSL_DEBUG1_CONFIG_DIAL]

//>> PREP_[XTS_ATSD_HYP1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_ATSD_HYP1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_ATSD_HYP1]

//>> GET_[XTS_ATSD_HYP1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_ATSD_HYP1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP1;
#endif
    return fapi2::getScom(i_target, XTS_ATSD_HYP1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_ATSD_HYP1]

//>> PUT_[XTS_ATSD_HYP1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_ATSD_HYP1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP1));
#endif
    return fapi2::putScom(i_target, XTS_ATSD_HYP1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_ATSD_HYP1]


//>> SET_[XTS_ATSD_HYP1_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP1_MSRHV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP1));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP1_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP1_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP1_MSRHV]

//>> SET_[XTS_ATSD_HYP1_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP1_MSRHV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP1));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP1_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP1_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP1_MSRHV]

//>> SET_[XTS_ATSD_HYP1_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP1_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP1));
#endif
    return o_data.setBit<XTS_ATSD_HYP1_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_ATSD_HYP1_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP1_MSRHV]

//>> CLEAR_[XTS_ATSD_HYP1_MSRHV]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_ATSD_HYP1_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP1));
#endif
    return o_data.clearBit<XTS_ATSD_HYP1_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_ATSD_HYP1_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_ATSD_HYP1_MSRHV]

//>> GET_[XTS_ATSD_HYP1_MSRHV]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP1_MSRHV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP1));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP1_MSRHV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP1_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP1_MSRHV]

//>> GET_[XTS_ATSD_HYP1_MSRHV]
static inline bool GET_XTS_ATSD_HYP1_MSRHV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP1));
#endif
    return i_data.getBit<XTS_ATSD_HYP1_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_ATSD_HYP1_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP1_MSRHV]

//>> SET_[XTS_ATSD_HYP1_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP1_LPARID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP1));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP1_LPARID,
           XTS_ATSD_HYP1_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP1_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP1_LPARID]

//>> SET_[XTS_ATSD_HYP1_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP1_LPARID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP1));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP1_LPARID,
           XTS_ATSD_HYP1_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP1_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP1_LPARID]

//>> GET_[XTS_ATSD_HYP1_LPARID]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP1_LPARID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP1));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP1_LPARID,
           XTS_ATSD_HYP1_LPARID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP1_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP1_LPARID]

//>> PREP_[XTS_REG_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_REG_CONFIG3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_CONFIG3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_REG_CONFIG3]

//>> GET_[XTS_REG_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_REG_CONFIG3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_CONFIG3;
#endif
    return fapi2::getScom(i_target, XTS_REG_CONFIG3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_REG_CONFIG3]

//>> PUT_[XTS_REG_CONFIG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_REG_CONFIG3(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return fapi2::putScom(i_target, XTS_REG_CONFIG3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_REG_CONFIG3]


//>> SET_[XTS_REG_CONFIG3_CAP_RESERVE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_CAP_RESERVE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG3_CAP_RESERVE,
           XTS_REG_CONFIG3_CAP_RESERVE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG3_CAP_RESERVE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_CAP_RESERVE]

//>> SET_[XTS_REG_CONFIG3_CAP_RESERVE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_CAP_RESERVE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG3_CAP_RESERVE,
           XTS_REG_CONFIG3_CAP_RESERVE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG3_CAP_RESERVE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_CAP_RESERVE]

//>> GET_[XTS_REG_CONFIG3_CAP_RESERVE]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG3_CAP_RESERVE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG3_CAP_RESERVE,
           XTS_REG_CONFIG3_CAP_RESERVE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG3_CAP_RESERVE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG3_CAP_RESERVE]

//>> SET_[XTS_REG_CONFIG3_ATSD_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_ATSD_ALIGN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG3_ATSD_ALIGN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG3_ATSD_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_ATSD_ALIGN]

//>> SET_[XTS_REG_CONFIG3_ATSD_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_ATSD_ALIGN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG3_ATSD_ALIGN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG3_ATSD_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_ATSD_ALIGN]

//>> SET_[XTS_REG_CONFIG3_ATSD_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_ATSD_ALIGN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.setBit<XTS_REG_CONFIG3_ATSD_ALIGN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG3_ATSD_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_ATSD_ALIGN]

//>> CLEAR_[XTS_REG_CONFIG3_ATSD_ALIGN]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG3_ATSD_ALIGN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.clearBit<XTS_REG_CONFIG3_ATSD_ALIGN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG3_ATSD_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG3_ATSD_ALIGN]

//>> GET_[XTS_REG_CONFIG3_ATSD_ALIGN]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG3_ATSD_ALIGN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG3_ATSD_ALIGN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG3_ATSD_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG3_ATSD_ALIGN]

//>> GET_[XTS_REG_CONFIG3_ATSD_ALIGN]
static inline bool GET_XTS_REG_CONFIG3_ATSD_ALIGN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return i_data.getBit<XTS_REG_CONFIG3_ATSD_ALIGN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG3_ATSD_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG3_ATSD_ALIGN]

//>> SET_[XTS_REG_CONFIG3_MMIOSD_OCAPI]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_MMIOSD_OCAPI(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG3_MMIOSD_OCAPI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG3_MMIOSD_OCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_MMIOSD_OCAPI]

//>> SET_[XTS_REG_CONFIG3_MMIOSD_OCAPI]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_MMIOSD_OCAPI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG3_MMIOSD_OCAPI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG3_MMIOSD_OCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_MMIOSD_OCAPI]

//>> SET_[XTS_REG_CONFIG3_MMIOSD_OCAPI]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_MMIOSD_OCAPI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.setBit<XTS_REG_CONFIG3_MMIOSD_OCAPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG3_MMIOSD_OCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_MMIOSD_OCAPI]

//>> CLEAR_[XTS_REG_CONFIG3_MMIOSD_OCAPI]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG3_MMIOSD_OCAPI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.clearBit<XTS_REG_CONFIG3_MMIOSD_OCAPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG3_MMIOSD_OCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG3_MMIOSD_OCAPI]

//>> GET_[XTS_REG_CONFIG3_MMIOSD_OCAPI]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG3_MMIOSD_OCAPI(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG3_MMIOSD_OCAPI,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG3_MMIOSD_OCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG3_MMIOSD_OCAPI]

//>> GET_[XTS_REG_CONFIG3_MMIOSD_OCAPI]
static inline bool GET_XTS_REG_CONFIG3_MMIOSD_OCAPI(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return i_data.getBit<XTS_REG_CONFIG3_MMIOSD_OCAPI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG3_MMIOSD_OCAPI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG3_MMIOSD_OCAPI]

//>> SET_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]

//>> SET_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]

//>> SET_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.setBit<XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]

//>> CLEAR_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.clearBit<XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]

//>> GET_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]

//>> GET_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]
static inline bool GET_XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return i_data.getBit<XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG3_TLBIE_OVERLAP_OP2_EN]

//>> SET_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_NVLINK_16CHIP_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG3_NVLINK_16CHIP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_CONFIG3_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]

//>> SET_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_NVLINK_16CHIP_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.insertFromRight<XTS_REG_CONFIG3_NVLINK_16CHIP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_CONFIG3_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]

//>> SET_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_CONFIG3_NVLINK_16CHIP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.setBit<XTS_REG_CONFIG3_NVLINK_16CHIP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_CONFIG3_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]

//>> CLEAR_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_CONFIG3_NVLINK_16CHIP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return o_data.clearBit<XTS_REG_CONFIG3_NVLINK_16CHIP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_CONFIG3_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]

//>> GET_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_CONFIG3_NVLINK_16CHIP_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return i_data.extractToRight<XTS_REG_CONFIG3_NVLINK_16CHIP_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_CONFIG3_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]

//>> GET_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]
static inline bool GET_XTS_REG_CONFIG3_NVLINK_16CHIP_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_CONFIG3));
#endif
    return i_data.getBit<XTS_REG_CONFIG3_NVLINK_16CHIP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_CONFIG3_NVLINK_16CHIP_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_CONFIG3_NVLINK_16CHIP_MODE]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
