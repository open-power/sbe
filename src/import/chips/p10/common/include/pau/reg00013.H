/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/pau/reg00013.H $          */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PAU_REG00013_H_
#define __PAU_REG00013_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace pau
{
#endif


//>> PREP_[AME_AME2_MISC_CERR_RPT_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME2_MISC_CERR_RPT_MASK(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_CERR_RPT_MASK;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME2_MISC_CERR_RPT_MASK]

//>> GET_[AME_AME2_MISC_CERR_RPT_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME2_MISC_CERR_RPT_MASK(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_CERR_RPT_MASK;
#endif
    return fapi2::getScom(i_target, AME_AME2_MISC_CERR_RPT_MASK, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_MASK]

//>> PUT_[AME_AME2_MISC_CERR_RPT_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME2_MISC_CERR_RPT_MASK(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_MASK));
#endif
    return fapi2::putScom(i_target, AME_AME2_MISC_CERR_RPT_MASK, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME2_MISC_CERR_RPT_MASK]


//>> SET_[AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_MASK));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK,
           AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]

//>> SET_[AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_MASK));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK,
           AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]

//>> GET_[AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_CERR_RPT_MASK));
#endif
    return i_data.extractToRight<AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK,
           AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_CERR_RPT_MASK_CONFIG_CERR_RPT_MASK]

//>> PREP_[AME_AME2_MISC_ECC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_AME2_MISC_ECC_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_ECC_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_AME2_MISC_ECC_CONFIG]

//>> GET_[AME_AME2_MISC_ECC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_AME2_MISC_ECC_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_AME2_MISC_ECC_CONFIG;
#endif
    return fapi2::getScom(i_target, AME_AME2_MISC_ECC_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG]

//>> PUT_[AME_AME2_MISC_ECC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_AME2_MISC_ECC_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return fapi2::putScom(i_target, AME_AME2_MISC_ECC_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_AME2_MISC_ECC_CONFIG]


//>> SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> CLEAR_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]
static inline bool GET_AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_RA_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> CLEAR_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]
static inline bool GET_AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_ERAT_PE_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> CLEAR_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]
static inline bool GET_AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_MRQ_XCT_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]
static inline bool GET_AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL0_WB_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]
static inline bool GET_AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL0_CBA_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]
static inline bool GET_AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL0_PCT_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]
static inline bool GET_AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL1_WB_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]
static inline bool GET_AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL1_CBA_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]
static inline bool GET_AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_COREN]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ,
           AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_CL1_PCT_ERRINJ]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_ECC_SPARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ECC_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.insertFromRight<AME_AME2_MISC_ECC_CONFIG_ECC_SPARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]

//>> SET_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& SET_AME_AME2_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.setBit<AME_AME2_MISC_ECC_CONFIG_ECC_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]

//>> CLEAR_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_AME2_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return o_data.clearBit<AME_AME2_MISC_ECC_CONFIG_ECC_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]
static inline fapi2::buffer<uint64_t>& GET_AME_AME2_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.extractToRight<AME_AME2_MISC_ECC_CONFIG_ECC_SPARE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]

//>> GET_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]
static inline bool GET_AME_AME2_MISC_ECC_CONFIG_ECC_SPARE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_AME2_MISC_ECC_CONFIG));
#endif
    return i_data.getBit<AME_AME2_MISC_ECC_CONFIG_ECC_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_AME2_MISC_ECC_CONFIG_ECC_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_AME2_MISC_ECC_CONFIG_ECC_SPARE]

//>> PREP_[AME_ATL_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_INHIBIT_CONFIG]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_INHIBIT_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG]

//>> PUT_[AME_ATL_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_INHIBIT_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_INHIBIT_CONFIG]


//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0,
           AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0,
           AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0,
           AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0,
           AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> CLEAR_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline bool GET_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> CLEAR_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline bool GET_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_DEST0,
           AME_ATL_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_DEST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_DEST0,
           AME_ATL_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST0]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_DEST0,
           AME_ATL_MISC_INHIBIT_CONFIG_DEST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1,
           AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1,
           AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_RESERVED1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1,
           AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_TFREQ1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1,
           AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> CLEAR_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline bool GET_AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> CLEAR_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& CLEAR_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline bool GET_AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_DEST1,
           AME_ATL_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST1]

//>> SET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_INHIBIT_CONFIG_DEST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_INHIBIT_CONFIG_DEST1,
           AME_ATL_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST1]

//>> GET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<AME_ATL_MISC_INHIBIT_CONFIG_DEST1,
           AME_ATL_MISC_INHIBIT_CONFIG_DEST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_INHIBIT_CONFIG_DEST1]

//>> PREP_[AME_ATL_MISC_SCRATCH0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AME_ATL_MISC_SCRATCH0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_SCRATCH0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AME_ATL_MISC_SCRATCH0]

//>> GET_[AME_ATL_MISC_SCRATCH0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AME_ATL_MISC_SCRATCH0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AME_ATL_MISC_SCRATCH0;
#endif
    return fapi2::getScom(i_target, AME_ATL_MISC_SCRATCH0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AME_ATL_MISC_SCRATCH0]

//>> PUT_[AME_ATL_MISC_SCRATCH0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AME_ATL_MISC_SCRATCH0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_SCRATCH0));
#endif
    return fapi2::putScom(i_target, AME_ATL_MISC_SCRATCH0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AME_ATL_MISC_SCRATCH0]


//>> SET_[AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_SCRATCH0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED,
           AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED]

//>> SET_[AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_SCRATCH0));
#endif
    return o_data.insertFromRight<AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED,
           AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED]

//>> GET_[AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AME_ATL_MISC_SCRATCH0));
#endif
    return i_data.extractToRight<AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED,
           AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AME_ATL_MISC_SCRATCH0_SCRATCH0_RESERVED]

//>> PREP_[CS_CTL_MISC_BDF2PE_7_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_BDF2PE_7_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_7_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_BDF2PE_7_CONFIG]

//>> GET_[CS_CTL_MISC_BDF2PE_7_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_BDF2PE_7_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_BDF2PE_7_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_BDF2PE_7_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_7_CONFIG]

//>> PUT_[CS_CTL_MISC_BDF2PE_7_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_BDF2PE_7_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_BDF2PE_7_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_BDF2PE_7_CONFIG]


//>> SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return o_data.setBit<CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]

//>> CLEAR_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return o_data.clearBit<CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]

//>> GET_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]
static inline bool GET_CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return i_data.getBit<CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_7_CONFIG_ENABLE]

//>> SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED]

//>> GET_[CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED,
           CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_7_CONFIG_RESERVED]

//>> SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_7_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_7_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_7_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_7_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_7_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_7_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_PE]

//>> GET_[CS_CTL_MISC_BDF2PE_7_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_7_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_7_CONFIG_PE,
           CS_CTL_MISC_BDF2PE_7_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_7_CONFIG_PE]

//>> SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_7_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_7_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_7_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_BDF]

//>> SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_BDF2PE_7_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_BDF2PE_7_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_7_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_BDF2PE_7_CONFIG_BDF]

//>> GET_[CS_CTL_MISC_BDF2PE_7_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_BDF2PE_7_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_BDF2PE_7_CONFIG));
#endif
    return i_data.extractToRight<CS_CTL_MISC_BDF2PE_7_CONFIG_BDF,
           CS_CTL_MISC_BDF2PE_7_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_BDF2PE_7_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_BDF2PE_7_CONFIG_BDF]

//>> PREP_[CS_CTL_MISC_FENCE_CONTROL4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_CTL_MISC_FENCE_CONTROL4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_FENCE_CONTROL4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_CTL_MISC_FENCE_CONTROL4]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_CTL_MISC_FENCE_CONTROL4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_CTL_MISC_FENCE_CONTROL4;
#endif
    return fapi2::getScom(i_target, CS_CTL_MISC_FENCE_CONTROL4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL4]

//>> PUT_[CS_CTL_MISC_FENCE_CONTROL4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_CTL_MISC_FENCE_CONTROL4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL4));
#endif
    return fapi2::putScom(i_target, CS_CTL_MISC_FENCE_CONTROL4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_CTL_MISC_FENCE_CONTROL4]


//>> SET_[CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE,
           CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL4_4_REQUEST_FENCE]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED]

//>> SET_[CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL4));
#endif
    return o_data.insertFromRight<CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED]

//>> GET_[CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_CTL_MISC_FENCE_CONTROL4));
#endif
    return i_data.extractToRight<CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED,
           CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_CTL_MISC_FENCE_CONTROL4_CONTROL4_RESERVED]

//>> PREP_[CS_SM0_DIR_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_DIR_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_DIR_MISC_CONFIG0]

//>> GET_[CS_SM0_DIR_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_DIR_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, CS_SM0_DIR_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_CONFIG0]

//>> PUT_[CS_SM0_DIR_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_DIR_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, CS_SM0_DIR_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_DIR_MISC_CONFIG0]


//>> SET_[CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE]

//>> SET_[CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE]

//>> GET_[CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE,
           CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_CONFIG0_HOST_TAG_SIZE]

//>> SET_[CS_SM0_DIR_MISC_CONFIG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_CONFIG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM0_DIR_MISC_CONFIG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_CONFIG0_0_RESERVED]

//>> SET_[CS_SM0_DIR_MISC_CONFIG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_CONFIG0_0_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM0_DIR_MISC_CONFIG0_0_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_CONFIG0_0_RESERVED]

//>> GET_[CS_SM0_DIR_MISC_CONFIG0_0_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_CONFIG0_0_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_CONFIG0_0_RESERVED,
           CS_SM0_DIR_MISC_CONFIG0_0_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_0_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_CONFIG0_0_RESERVED]

//>> SET_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> SET_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> SET_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return o_data.setBit<CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> CLEAR_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return o_data.clearBit<CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> GET_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return i_data.extractToRight<CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> GET_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]
static inline bool GET_CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_DIR_MISC_CONFIG0));
#endif
    return i_data.getBit<CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_DIR_MISC_CONFIG0_DEBUG0_ACT]

//>> PREP_[CS_SM0_MCP_MISC_DEBUG4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_DEBUG4_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_DEBUG4_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_DEBUG4_CONFIG]

//>> GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_DEBUG4_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_DEBUG4_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_DEBUG4_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG]

//>> PUT_[CS_SM0_MCP_MISC_DEBUG4_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_DEBUG4_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_DEBUG4_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_DEBUG4_CONFIG]


//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9]

//>> GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE9]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10]

//>> GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE10]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11]

//>> GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE11]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12]

//>> GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE12]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13]

//>> GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE13]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14]

//>> GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE14]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15]

//>> GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_BYTE15]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1]

//>> GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_DEBUG4_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1,
           CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_DEBUG4_CONFIG_RESERVED1]

//>> PREP_[CS_SM0_MCP_MISC_XTIMER_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_MCP_MISC_XTIMER_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_XTIMER_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_MCP_MISC_XTIMER_CONFIG]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_MCP_MISC_XTIMER_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_MCP_MISC_XTIMER_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_MCP_MISC_XTIMER_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG]

//>> PUT_[CS_SM0_MCP_MISC_XTIMER_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_MCP_MISC_XTIMER_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_MCP_MISC_XTIMER_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_MCP_MISC_XTIMER_CONFIG]


//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE1]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_LONG_RATE2]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE2]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_FWD_PROG_RATE2]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_XTIMER_RESERVED1]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH0_TICK]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_INH1_TICK]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE1]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_NV_RESP_RATE2]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_POCKET_SHORT_RATE1]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_SCAN_WAIT_RATE]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]

//>> SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]

//>> GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_MCP_MISC_XTIMER_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE,
           CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_MCP_MISC_XTIMER_CONFIG_EPOCH_RATE]

//>> PREP_[CS_SM0_SNP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CERR_MESSAGE0]

//>> GET_[CS_SM0_SNP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CERR_MESSAGE0;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CERR_MESSAGE0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_MESSAGE0]

//>> PUT_[CS_SM0_SNP_MISC_CERR_MESSAGE0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CERR_MESSAGE0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_MESSAGE0));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CERR_MESSAGE0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CERR_MESSAGE0]


//>> SET_[CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> SET_[CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_MESSAGE0));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> GET_[CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CERR_MESSAGE0));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0,
           CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CERR_MESSAGE0_CERR_MESSAGE_BITS0]

//>> PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7]

//>> PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7]


//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]

//>> SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]

//>> GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND,
           CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]

//>> PREP_[CS_SM0_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_PAUMMIO_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_PAUMMIO_BAR]

//>> GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_PAUMMIO_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_PAUMMIO_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR]

//>> PUT_[CS_SM0_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_PAUMMIO_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_PAUMMIO_BAR]


//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> CLEAR_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline bool GET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> CLEAR_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline bool GET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> CLEAR_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline bool GET_CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> CLEAR_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline bool GET_CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> PREP_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM0_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG]

//>> GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM0_SNP_MISC_PERF_MASK_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM0_SNP_MISC_PERF_MASK_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG]

//>> PUT_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM0_SNP_MISC_PERF_MASK_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM0_SNP_MISC_PERF_MASK_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG]


//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]

//>> GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_CLASS]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE]

//>> GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TTYPE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE]

//>> GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_TSIZE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> CLEAR_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]
static inline bool GET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_NVBE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.setBit<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> CLEAR_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.clearBit<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]
static inline bool GET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.getBit<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_UT]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE]

//>> GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ATYPE]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC]

//>> SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& SET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC]

//>> GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC]
static inline fapi2::buffer<uint64_t>& GET_CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM0_SNP_MISC_PERF_MASK_CONFIG));
#endif
    return i_data.extractToRight<CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC,
           CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM0_SNP_MISC_PERF_MASK_CONFIG_ALLOC]

//>> PREP_[CS_SM1_MCP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_HOLD0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_HOLD0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_HOLD0;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_HOLD0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0]

//>> PUT_[CS_SM1_MCP_MISC_CERR_HOLD0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_HOLD0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_HOLD0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_HOLD0]


//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_16]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_17]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_18]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_NVF_19]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_ASBE_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_PBR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_REG_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_REG_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_REG_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_REG_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_0]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_1]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_2]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_3]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_4]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_5]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_6]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_7]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_8]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_9]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_10]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_11]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_12]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_13]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_14]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]

//>> SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]

//>> CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]

//>> GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]
static inline bool GET_CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_HOLD0));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_HOLD0_OCR_15]

//>> PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_CERR_MESSAGE6(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE6;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_CERR_MESSAGE6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_CERR_MESSAGE6(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_CERR_MESSAGE6;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE6, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE6]

//>> PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_CERR_MESSAGE6(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE6));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_CERR_MESSAGE6, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_CERR_MESSAGE6]


//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE6));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6,
           CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]

//>> SET_[CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE6));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6,
           CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]

//>> GET_[CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_CERR_MESSAGE6));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6,
           CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_CERR_MESSAGE6_CERR_MESSAGE_BITS6]

//>> PREP_[CS_SM1_MCP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_MCP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_SM_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_MCP_MISC_SM_STATUS]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_MCP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_MCP_MISC_SM_STATUS;
#endif
    return fapi2::getScom(i_target, CS_SM1_MCP_MISC_SM_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS]

//>> PUT_[CS_SM1_MCP_MISC_SM_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_MCP_MISC_SM_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return fapi2::putScom(i_target, CS_SM1_MCP_MISC_SM_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_MCP_MISC_SM_STATUS]


//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBGP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MRBGP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_MRBGP,
           CS_SM1_MCP_MISC_SM_STATUS_MRBGP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MRBGP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBGP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBGP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MRBGP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_MRBGP,
           CS_SM1_MCP_MISC_SM_STATUS_MRBGP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MRBGP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBGP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_MRBGP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_MRBGP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_MRBGP,
           CS_SM1_MCP_MISC_SM_STATUS_MRBGP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MRBGP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_MRBGP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MRBSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_MRBSP,
           CS_SM1_MCP_MISC_SM_STATUS_MRBSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MRBSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MRBSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_MRBSP,
           CS_SM1_MCP_MISC_SM_STATUS_MRBSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MRBSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_MRBSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_MRBSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_MRBSP,
           CS_SM1_MCP_MISC_SM_STATUS_MRBSP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MRBSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_MRBSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FENCE0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE0,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE0]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FENCE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE0,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE0]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_FENCE0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE0,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE0]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FENCE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE1,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE1]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FENCE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE1,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE1]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_FENCE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE1,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE1]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FENCE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE2,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE2]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FENCE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE2,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE2]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_FENCE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE2,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE2]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FENCE3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE3,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE3]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FENCE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE3,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE3]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_FENCE3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE3,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE3]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FENCE4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE4,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE4]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FENCE4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE4,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE4]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_FENCE4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_FENCE4,
           CS_SM1_MCP_MISC_SM_STATUS_FENCE4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FENCE4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_FENCE4]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_PBLN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBLN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_PBLN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_PBLN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_PBLN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_PBLN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_PBLN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_PBLN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBLN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_PBLN]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_PBNNG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBNNG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_PBNNG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_PBNNG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_PBNNG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_PBNNG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_PBNNG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_PBNNG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBNNG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_PBNNG]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_PBRNVG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBRNVG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_PBRNVG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_PBRNVG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_PBRNVG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_PBRNVG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_PBRNVG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_PBRNVG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRNVG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_PBRNVG]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B0REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B0REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B0REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B0REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B0REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B0REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B0REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B0REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B0REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B0DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B0DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B0DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B0DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B0DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B0DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B0DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B0DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B0DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B1REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B1REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B1REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B1REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B1REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B1REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B1REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B1REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B1REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B1DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B1DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B1DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B1DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B1DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B1DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B1DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B1DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B1DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B2REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B2REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B2REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B2REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B2REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B2REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B2REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B2REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B2REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B2DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B2DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B2DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B2DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B2DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B2DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B2DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B2DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B2DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B3REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B3REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B3REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B3REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B3REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B3REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B3REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B3REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B3REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B3DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B3DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B3DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B3DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B3DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B3DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B3DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B3DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B3DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B4REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B4REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B4REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B4REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B4REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B4REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B4REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B4REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B4REQ]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B4DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B4DGD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B4DGD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B4DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B4DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B4DGD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B4DGD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B4DGD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4DGD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B4DGD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MMIO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_MMIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_MMIO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_MMIO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_MMIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_MMIO]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_MMIOSUE]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_ATSXLATE]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_REPLAY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_REPLAY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_REPLAY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_REPLAY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_REPLAY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_REPLAY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_REPLAY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_REPLAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_REPLAY]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_PBRSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBRSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_PBRSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_PBRSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_PBRSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_PBRSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_PBRSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_PBRSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PBRSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_PBRSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B0RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B0RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B0RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B0RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B0RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B0RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B0RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B0RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B0RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B0RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B1RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B1RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B1RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B1RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B1RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B1RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B1RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B1RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B1RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B1RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B2RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B2RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B2RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B2RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B2RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B2RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B2RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B2RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B2RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B2RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B3RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B3RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B3RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B3RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B3RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B3RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B3RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B3RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B3RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B3RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B4RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B4RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_B4RSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_B4RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_B4RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_B4RSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_B4RSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_B4RSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_B4RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_B4RSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_XARSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_XARSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_XARSP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_XARSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_XARSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_XARSP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_XARSP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_XARSP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_XARSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_XARSP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FREE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FREE]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FREE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_FREE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FREE]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_FREE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_FREE]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_FREE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_FREE]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_FREE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_FREE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_FREE]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_FREE]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_FREE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_FREE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_FREE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_FREE]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_DIRUPD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_DIRUPD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_DIRUPD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_DIRUPD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_DIRUPD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_DIRUPD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_DIRUPD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_DIRUPD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_DIRUPD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_DIRUPD]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_SACOLL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_SACOLL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_SACOLL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.setBit<CS_SM1_MCP_MISC_SM_STATUS_SACOLL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]

//>> CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.clearBit<CS_SM1_MCP_MISC_SM_STATUS_SACOLL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_SACOLL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]
static inline bool GET_CS_SM1_MCP_MISC_SM_STATUS_SACOLL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.getBit<CS_SM1_MCP_MISC_SM_STATUS_SACOLL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_SACOLL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_SACOLL]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBCP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MRBCP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_MRBCP,
           CS_SM1_MCP_MISC_SM_STATUS_MRBCP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MRBCP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBCP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBCP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_MRBCP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_MRBCP,
           CS_SM1_MCP_MISC_SM_STATUS_MRBCP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MRBCP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_MRBCP]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_MRBCP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_MRBCP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_MRBCP,
           CS_SM1_MCP_MISC_SM_STATUS_MRBCP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_MRBCP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_MRBCP]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE,
           CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE,
           CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE,
           CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_PERF_LSTATE]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_RESERVED2,
           CS_SM1_MCP_MISC_SM_STATUS_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_RESERVED2]

//>> SET_[CS_SM1_MCP_MISC_SM_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_MCP_MISC_SM_STATUS_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return o_data.insertFromRight<CS_SM1_MCP_MISC_SM_STATUS_RESERVED2,
           CS_SM1_MCP_MISC_SM_STATUS_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_MCP_MISC_SM_STATUS_RESERVED2]

//>> GET_[CS_SM1_MCP_MISC_SM_STATUS_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_MCP_MISC_SM_STATUS_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_MCP_MISC_SM_STATUS));
#endif
    return i_data.extractToRight<CS_SM1_MCP_MISC_SM_STATUS_RESERVED2,
           CS_SM1_MCP_MISC_SM_STATUS_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_MCP_MISC_SM_STATUS_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_MCP_MISC_SM_STATUS_RESERVED2]

//>> PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4]

//>> PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4]


//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1,
           CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline bool GET_CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> PREP_[CS_SM1_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM1_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_PAUMMIO_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM1_SNP_MISC_PAUMMIO_BAR]

//>> GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM1_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM1_SNP_MISC_PAUMMIO_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM1_SNP_MISC_PAUMMIO_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR]

//>> PUT_[CS_SM1_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM1_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM1_SNP_MISC_PAUMMIO_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM1_SNP_MISC_PAUMMIO_BAR]


//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> CLEAR_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline bool GET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> CLEAR_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline bool GET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> CLEAR_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline bool GET_CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> CLEAR_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline bool GET_CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM1_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM1_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> PREP_[CS_SM2_MCP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CONFIG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_MCP_MISC_CONFIG1]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_MCP_MISC_CONFIG1;
#endif
    return fapi2::getScom(i_target, CS_SM2_MCP_MISC_CONFIG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1]

//>> PUT_[CS_SM2_MCP_MISC_CONFIG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_MCP_MISC_CONFIG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return fapi2::putScom(i_target, CS_SM2_MCP_MISC_CONFIG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_MCP_MISC_CONFIG1]


//>> SET_[CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK,
           CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_RANDOM_BACKOFF_DUR_MASK]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ,
           CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_REQ]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST,
           CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_CST]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB,
           CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_CHGRATE_HANG_SLOWDOWN_PRB]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT,
           CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_EPSILON_WLN_COUNT]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2,
           CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED2]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_CL_DMA_INJ]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_PR_DMA_INJ]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT,
           CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_MIN_COUNT]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_PCKT_LONG_USES_HANG]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_LONG_STRESSED]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_DONT_RETRY_LCO_SHORT_STRESSED]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_LN_SCOPE]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_STOP_ASB_AT_G_SCOPE]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_INITIAL_HPC_PROBE_PRIORITY]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_NVLINK_P10P10_MODE]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.setBit<CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> CLEAR_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.clearBit<CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]
static inline bool GET_CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.getBit<CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_HANG_ON_ADDRESS_ERRORS]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM2_MCP_MISC_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED]

//>> SET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_MCP_MISC_CONFIG1_1_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return o_data.insertFromRight<CS_SM2_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM2_MCP_MISC_CONFIG1_1_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED]

//>> GET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_MCP_MISC_CONFIG1_1_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_MCP_MISC_CONFIG1));
#endif
    return i_data.extractToRight<CS_SM2_MCP_MISC_CONFIG1_1_RESERVED,
           CS_SM2_MCP_MISC_CONFIG1_1_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_MCP_MISC_CONFIG1_1_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_MCP_MISC_CONFIG1_1_RESERVED]

//>> PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7]

//>> PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7]


//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAG]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_TAGMASK]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PAU]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_PCIE]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_MASK_L2L3]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]
static inline bool GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_RDEND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WRSTART]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]

//>> SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]

//>> GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND,
           CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_CONFIG_RELAXED_SRC7_WREND]

//>> PREP_[CS_SM2_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_PAUMMIO_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_PAUMMIO_BAR]

//>> GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_PAUMMIO_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_PAUMMIO_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR]

//>> PUT_[CS_SM2_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_PAUMMIO_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_PAUMMIO_BAR]


//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> CLEAR_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline bool GET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> CLEAR_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline bool GET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> CLEAR_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline bool GET_CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> CLEAR_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline bool GET_CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> PREP_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_TOPOLOGY_TABLE1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM2_SNP_MISC_TOPOLOGY_TABLE1;
#endif
    return fapi2::getScom(i_target, CS_SM2_SNP_MISC_TOPOLOGY_TABLE1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1]

//>> PUT_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return fapi2::putScom(i_target, CS_SM2_SNP_MISC_TOPOLOGY_TABLE1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1]


//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_ABLE_8_15]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY8]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY9]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY10]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY11]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY12]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY13]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY14]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15]

//>> SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return o_data.insertFromRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15]

//>> GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM2_SNP_MISC_TOPOLOGY_TABLE1));
#endif
    return i_data.extractToRight<CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15,
           CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM2_SNP_MISC_TOPOLOGY_TABLE1_TRY15]

//>> PREP_[CS_SM3_MCP_MISC_CERR_MASK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_MASK2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MASK2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_MASK2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_MASK2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MASK2;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_MASK2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2]

//>> PUT_[CS_SM3_MCP_MISC_CERR_MASK2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_MASK2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_MASK2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_MASK2]


//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_0]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_0]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_0]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_0]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_1]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_1]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_1]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_1]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_2]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_2]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_2]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_2]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_3]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_3]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_4]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_4]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_4]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_4]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_5]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_5]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_5]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_5]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_6]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_6]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_6]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_6]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_7]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_7]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_7]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_7]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_8]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_8]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_8]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_8]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_9]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_9]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_9]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_9]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_10]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_10]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_10]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_10]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_11]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_11]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_11]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_11]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_11]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_12]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_12]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_12]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_12]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_13]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_13]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_13]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_13]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_13]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_14]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_14]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_14]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_14]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_14]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_15]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_15]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_15]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_15]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_15]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_16]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_16]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_16]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_16]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_16]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_17]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_17]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_17]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_17]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_17]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_18]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_18]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_18]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_18]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_18]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_19]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_19]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_19]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_19]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_19]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_20]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_20]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_20]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_20]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_20]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_20]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_20]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_20]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_21]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_21]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_21]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_21]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_21]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_21]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_21]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_21]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_22]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_22]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_22]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_22]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_22]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_22]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_22]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_22]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_23]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_23]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_23]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_23]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_23]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_23]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_23]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_23]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_24]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_24]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_24]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_24]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_24]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_24]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_24]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_24]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_25]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_25]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_25]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_25]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_25]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_25]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_25]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_25]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_26]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_26]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_26]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_26]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_26]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_26]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_26]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_26]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_27]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_27]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_27]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_27]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_27]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_27]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_27]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_27]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_28]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_28]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_28]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_28]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_28]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_28]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_28]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_28]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_29]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_29]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_29]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_29]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_29]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_29]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_29]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_29]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_30]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_30]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_30]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_30]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_30]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_30]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_30]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_30]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_31]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_31]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_31]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_31]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_31]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_31]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_31]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_31]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_32]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_32]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_32]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_32]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_32]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_32]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_32]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_32]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_33]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_33]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_33]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_33]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_33]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_33]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_33]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_33]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_34]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_34]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_34]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_34]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_34]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_34]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_34]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_34]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_35]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_35]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_35]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_35]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_35]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_35]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_35]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_35]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_36]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_36]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_36]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_36]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_36]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_36]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_36]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_36]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_37]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_37]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_37]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_37]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_37]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_37]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_37]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_37]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_38]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_38]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_38]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_38]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_38]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_38]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_38]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_38]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_39]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_39]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_39]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_39]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_39]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_39]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_39]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_39]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_40]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_40]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_40]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_40]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_40]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_40]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_40]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_40]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_41]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_41]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_41]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_41]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_41]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_41]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_41]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_41]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_42]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_42]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_42]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_42]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_42]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_42]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_42]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_42]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_43]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_43]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_43]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_43]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_43]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_43]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_43]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_43]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_44]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_44]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_44]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_44]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_44]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_44]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_44]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_44]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_45]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_45]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_45]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_45]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_45]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_45]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_45]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_45]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_46]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_46]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_46]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_46]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_46]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_46]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_46]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_46]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_47]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_47]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_47]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_47]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_47]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_47]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_47]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_47]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_48]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_48]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_48]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_48]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_48]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_48]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_48]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_48]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_49]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_49]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_49]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_49]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_49]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_49]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_49]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_49]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_50]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_50]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_50]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_50]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_50]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_50]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_50]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_50]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_51]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_51]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_51]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_51]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_51]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_51]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_51]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_51]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_52]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_52]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_52]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_52]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_52]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_52]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_52]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_52]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_53]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_53]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_53]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_53]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_53]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_53]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_53]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_53]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_54]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_54]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_54]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_54]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_54]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_54]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_54]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_54]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_55]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_55]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_55]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_55]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_55]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_55]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_55]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_55]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_56]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_56]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_56]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_56]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_56]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_56]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_56]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_56]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_57]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_57]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_57]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_57]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_57]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_57]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_57]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_57]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_58]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_58]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_58]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_58]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_58]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_58]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_58]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_58]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_59]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_59]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_59]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_59]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_59]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_59]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_59]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_59]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_60]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_60]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_60]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_60]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_60]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_60]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_60]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_60]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_61]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_61]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_61]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_61]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_61]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_61]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_61]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_61]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_62]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_62]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_62]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_62]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_62]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_62]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_62]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_62]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_63]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MASK2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_63]

//>> SET_[CS_SM3_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_CERR_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MASK2_63]

//>> CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_CERR_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_CERR_MASK2_63]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_63]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MASK2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_63]

//>> GET_[CS_SM3_MCP_MISC_CERR_MASK2_63]
static inline bool GET_CS_SM3_MCP_MISC_CERR_MASK2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MASK2));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_CERR_MASK2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MASK2_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MASK2_63]

//>> PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_CERR_MESSAGE3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_CERR_MESSAGE3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_CERR_MESSAGE3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_CERR_MESSAGE3;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE3]

//>> PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_CERR_MESSAGE3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE3));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_CERR_MESSAGE3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_CERR_MESSAGE3]


//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE3));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3,
           CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]

//>> SET_[CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE3));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3,
           CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]

//>> GET_[CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_CERR_MESSAGE3));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3,
           CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_CERR_MESSAGE3_CERR_MESSAGE_BITS3]

//>> PREP_[CS_SM3_MCP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_MCP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_MCP_MISC_INHIBIT_CONFIG]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_MCP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_MCP_MISC_INHIBIT_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG]

//>> PUT_[CS_SM3_MCP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_MCP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_MCP_MISC_INHIBIT_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_MCP_MISC_INHIBIT_CONFIG]


//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]
static inline bool GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]
static inline bool GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST0]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]
static inline bool GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]
static inline bool GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST1]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]
static inline bool GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]
static inline bool GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST2]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_LFREQ3]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_PFREQ3]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]
static inline bool GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_BLOCKY3]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.setBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]
static inline bool GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.getBit<CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_ONESHOT3]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3]

//>> SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3]

//>> GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_MCP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3,
           CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_MCP_MISC_INHIBIT_CONFIG_DEST3]

//>> PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4]

//>> PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4]


//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_W_HP]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_PR_DMA_INJ]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_DMA_PR_W]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_CL_RD_NC_F0]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMAX_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_IMIN_S]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_ADD]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_AND]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_OR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_XOR]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_U]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMW_CAS_T]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_CAS_NE]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_INC_E]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_CMD_ARMWF_DEC_B]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1,
           CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE0_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE1_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE2_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE3_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE4_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE5_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE6_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_WRENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_RDENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_AWENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]
static inline bool GET_CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_CONFIG_RELAXED_BRK4_SOURCE7_ARENA]

//>> PREP_[CS_SM3_SNP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_DEBUG0_CONFIG]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_DEBUG0_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_DEBUG0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG]

//>> PUT_[CS_SM3_SNP_MISC_DEBUG0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_DEBUG0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_DEBUG0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_DEBUG0_CONFIG]


//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD0]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD1]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD2]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD3]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD4]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD5]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD6]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD7]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD8]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD9]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_POD10]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1,
           CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> CLEAR_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]
static inline bool GET_CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_DEBUG0_CONFIG));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_DEBUG0_CONFIG_ACT]

//>> PREP_[CS_SM3_SNP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_INHIBIT_CONFIG]

//>> GET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_INHIBIT_CONFIG;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_INHIBIT_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG]

//>> PUT_[CS_SM3_SNP_MISC_INHIBIT_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_INHIBIT_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_INHIBIT_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_INHIBIT_CONFIG]


//>> SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_0,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_0]

//>> SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_0]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_0,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_0]

//>> GET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_0]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_0,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_0]

//>> SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_1,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_1]

//>> SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_1,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_1]

//>> GET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_1,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_1]

//>> SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_2,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_2]

//>> SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_2,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_2]

//>> GET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_2,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_2]

//>> SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_3,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_3]

//>> SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_3]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_3,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_3]

//>> GET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_3]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_INHIBIT_CONFIG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_INHIBIT_CONFIG));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_INHIBIT_CONFIG_3,
           CS_SM3_SNP_MISC_INHIBIT_CONFIG_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_INHIBIT_CONFIG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_INHIBIT_CONFIG_3]

//>> PREP_[CS_SM3_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_CS_SM3_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_PAUMMIO_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[CS_SM3_SNP_MISC_PAUMMIO_BAR]

//>> GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_CS_SM3_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = CS_SM3_SNP_MISC_PAUMMIO_BAR;
#endif
    return fapi2::getScom(i_target, CS_SM3_SNP_MISC_PAUMMIO_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR]

//>> PUT_[CS_SM3_SNP_MISC_PAUMMIO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_CS_SM3_SNP_MISC_PAUMMIO_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return fapi2::putScom(i_target, CS_SM3_SNP_MISC_PAUMMIO_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[CS_SM3_SNP_MISC_PAUMMIO_BAR]


//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> CLEAR_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]
static inline bool GET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ENABLE]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> CLEAR_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]
static inline bool GET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_SECURE_A12]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> CLEAR_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]
static inline bool GET_CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED1]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR,
           CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_ADDR]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2,
           CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_PAUMMIO_RESERVED2]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.insertFromRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& SET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.setBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> CLEAR_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& CLEAR_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return o_data.clearBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline fapi2::buffer<uint64_t>& GET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.extractToRight<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]
static inline bool GET_CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(CS_SM3_SNP_MISC_PAUMMIO_BAR));
#endif
    return i_data.getBit<CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[CS_SM3_SNP_MISC_PAUMMIO_BAR_CONFIG_PAUMMIO_BAR_POISON]

//>> PREP_[MISC_REGS_BDF2PE_7_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MISC_REGS_BDF2PE_7_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_7_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MISC_REGS_BDF2PE_7_CONFIG]

//>> GET_[MISC_REGS_BDF2PE_7_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MISC_REGS_BDF2PE_7_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MISC_REGS_BDF2PE_7_CONFIG;
#endif
    return fapi2::getScom(i_target, MISC_REGS_BDF2PE_7_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_7_CONFIG]

//>> PUT_[MISC_REGS_BDF2PE_7_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MISC_REGS_BDF2PE_7_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return fapi2::putScom(i_target, MISC_REGS_BDF2PE_7_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MISC_REGS_BDF2PE_7_CONFIG]


//>> SET_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_7_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_7_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_7_CONFIG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_7_CONFIG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_7_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return o_data.setBit<MISC_REGS_BDF2PE_7_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]

//>> CLEAR_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MISC_REGS_BDF2PE_7_CONFIG_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return o_data.clearBit<MISC_REGS_BDF2PE_7_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_7_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_7_CONFIG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]

//>> GET_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]
static inline bool GET_MISC_REGS_BDF2PE_7_CONFIG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return i_data.getBit<MISC_REGS_BDF2PE_7_CONFIG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_7_CONFIG_ENABLE]

//>> SET_[MISC_REGS_BDF2PE_7_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_7_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_7_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_7_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_7_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_7_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_7_CONFIG_RESERVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_7_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_7_CONFIG_RESERVED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_7_CONFIG_RESERVED]

//>> GET_[MISC_REGS_BDF2PE_7_CONFIG_RESERVED]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_7_CONFIG_RESERVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_7_CONFIG_RESERVED,
           MISC_REGS_BDF2PE_7_CONFIG_RESERVED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_RESERVED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_7_CONFIG_RESERVED]

//>> SET_[MISC_REGS_BDF2PE_7_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_7_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_7_CONFIG_PE,
           MISC_REGS_BDF2PE_7_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_7_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_7_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_7_CONFIG_PE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_7_CONFIG_PE,
           MISC_REGS_BDF2PE_7_CONFIG_PE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_7_CONFIG_PE]

//>> GET_[MISC_REGS_BDF2PE_7_CONFIG_PE]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_7_CONFIG_PE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_7_CONFIG_PE,
           MISC_REGS_BDF2PE_7_CONFIG_PE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_PE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_7_CONFIG_PE]

//>> SET_[MISC_REGS_BDF2PE_7_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_7_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_7_CONFIG_BDF,
           MISC_REGS_BDF2PE_7_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_7_CONFIG_BDF]

//>> SET_[MISC_REGS_BDF2PE_7_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& SET_MISC_REGS_BDF2PE_7_CONFIG_BDF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return o_data.insertFromRight<MISC_REGS_BDF2PE_7_CONFIG_BDF,
           MISC_REGS_BDF2PE_7_CONFIG_BDF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MISC_REGS_BDF2PE_7_CONFIG_BDF]

//>> GET_[MISC_REGS_BDF2PE_7_CONFIG_BDF]
static inline fapi2::buffer<uint64_t>& GET_MISC_REGS_BDF2PE_7_CONFIG_BDF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MISC_REGS_BDF2PE_7_CONFIG));
#endif
    return i_data.extractToRight<MISC_REGS_BDF2PE_7_CONFIG_BDF,
           MISC_REGS_BDF2PE_7_CONFIG_BDF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access MISC_REGS_BDF2PE_7_CONFIG_BDF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MISC_REGS_BDF2PE_7_CONFIG_BDF]

//>> PREP_[OTL0_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_CONFIG0]

//>> GET_[OTL0_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_CONFIG0;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_CONFIG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0]

//>> PUT_[OTL0_MISC_CONFIG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_CONFIG0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_CONFIG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_CONFIG0]


//>> SET_[OTL0_MISC_CONFIG0_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_EN]

//>> SET_[OTL0_MISC_CONFIG0_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_EN]

//>> SET_[OTL0_MISC_CONFIG0_EN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_EN]

//>> CLEAR_[OTL0_MISC_CONFIG0_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_EN]

//>> GET_[OTL0_MISC_CONFIG0_EN]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_EN]

//>> GET_[OTL0_MISC_CONFIG0_EN]
static inline bool GET_OTL0_MISC_CONFIG0_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_EN]

//>> SET_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]

//>> SET_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]

//>> SET_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]

//>> CLEAR_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]

//>> GET_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]

//>> GET_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]
static inline bool GET_OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_BLOCK_PE_HANDLE]

//>> SET_[OTL0_MISC_CONFIG0_BRICKID]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_BRICKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_BRICKID,
           OTL0_MISC_CONFIG0_BRICKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BRICKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_BRICKID]

//>> SET_[OTL0_MISC_CONFIG0_BRICKID]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_BRICKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_BRICKID,
           OTL0_MISC_CONFIG0_BRICKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BRICKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_BRICKID]

//>> GET_[OTL0_MISC_CONFIG0_BRICKID]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_BRICKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_BRICKID,
           OTL0_MISC_CONFIG0_BRICKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BRICKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_BRICKID]

//>> SET_[OTL0_MISC_CONFIG0_PE_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_PE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_PE_MASK,
           OTL0_MISC_CONFIG0_PE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_PE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_PE_MASK]

//>> SET_[OTL0_MISC_CONFIG0_PE_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_PE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_PE_MASK,
           OTL0_MISC_CONFIG0_PE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_PE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_PE_MASK]

//>> GET_[OTL0_MISC_CONFIG0_PE_MASK]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_PE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_PE_MASK,
           OTL0_MISC_CONFIG0_PE_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_PE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_PE_MASK]

//>> SET_[OTL0_MISC_CONFIG0_RXO_RR2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RXO_RR2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RXO_RR2,
           OTL0_MISC_CONFIG0_RXO_RR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RXO_RR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RXO_RR2]

//>> SET_[OTL0_MISC_CONFIG0_RXO_RR2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RXO_RR2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RXO_RR2,
           OTL0_MISC_CONFIG0_RXO_RR2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RXO_RR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RXO_RR2]

//>> GET_[OTL0_MISC_CONFIG0_RXO_RR2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_RXO_RR2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_RXO_RR2,
           OTL0_MISC_CONFIG0_RXO_RR2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RXO_RR2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RXO_RR2]

//>> SET_[OTL0_MISC_CONFIG0_SPARE21]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_SPARE21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_SPARE21,
           OTL0_MISC_CONFIG0_SPARE21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_SPARE21]

//>> SET_[OTL0_MISC_CONFIG0_SPARE21]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_SPARE21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_SPARE21,
           OTL0_MISC_CONFIG0_SPARE21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_SPARE21]

//>> GET_[OTL0_MISC_CONFIG0_SPARE21]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_SPARE21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_SPARE21,
           OTL0_MISC_CONFIG0_SPARE21_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_SPARE21]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO0_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO0_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO1_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO1_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO1_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO1_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO1_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_CFIFO1_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_CFIFO1_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_CFIFO1_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_CFIFO1_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_CFIFO1_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_CFIFO1_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_CFIFO1_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO1_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO1_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO1_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CFIFO1_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CFIFO1_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_CFIFO1_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_CFIFO1_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_CFIFO1_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_CFIFO1_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_CFIFO1_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_CFIFO1_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_CFIFO1_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CFIFO1_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CFIFO1_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RFIFO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RFIFO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RFIFO_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RFIFO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RFIFO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_RFIFO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_RFIFO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_RFIFO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_RFIFO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_RFIFO_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_RFIFO_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_RFIFO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RFIFO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RFIFO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RFIFO_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RFIFO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RFIFO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_RFIFO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_RFIFO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_RFIFO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_RFIFO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_RFIFO_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_RFIFO_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_RFIFO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RFIFO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RFIFO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ACTAG_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_ACTAG_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ACTAG_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_ACTAG_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ACTAG_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_ACTAG_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_ACTAG_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_ACTAG_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_ACTAG_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_ACTAG_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_ACTAG_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_ACTAG_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ACTAG_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_ACTAG_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ACTAG_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_ACTAG_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ACTAG_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_ACTAG_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_ACTAG_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_ACTAG_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_ACTAG_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_ACTAG_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_ACTAG_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_ACTAG_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ACTAG_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_ACTAG_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CDFIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_CDFIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RDFIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_RDFIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]

//>> SET_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]

//>> SET_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]

//>> CLEAR_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]

//>> GET_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]

//>> GET_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]
static inline bool GET_OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_BLOCK_TID_OVERRIDE]

//>> SET_[OTL0_MISC_CONFIG0_ENABLE_4_0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ENABLE_4_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_ENABLE_4_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_4_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ENABLE_4_0]

//>> SET_[OTL0_MISC_CONFIG0_ENABLE_4_0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ENABLE_4_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_ENABLE_4_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_4_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ENABLE_4_0]

//>> SET_[OTL0_MISC_CONFIG0_ENABLE_4_0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ENABLE_4_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_ENABLE_4_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_4_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ENABLE_4_0]

//>> CLEAR_[OTL0_MISC_CONFIG0_ENABLE_4_0]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_ENABLE_4_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_ENABLE_4_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_4_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_ENABLE_4_0]

//>> GET_[OTL0_MISC_CONFIG0_ENABLE_4_0]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_ENABLE_4_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_ENABLE_4_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_4_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_ENABLE_4_0]

//>> GET_[OTL0_MISC_CONFIG0_ENABLE_4_0]
static inline bool GET_OTL0_MISC_CONFIG0_ENABLE_4_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_ENABLE_4_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_4_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_ENABLE_4_0]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC1FIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC1FIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_VC2FIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_DCP2FIFO_LO_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]

//>> CLEAR_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]

//>> GET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]
static inline bool GET_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE1]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]

//>> CLEAR_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]

//>> GET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]
static inline bool GET_OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_DCP2FIFO_HI_ENABLE2]

//>> SET_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]

//>> SET_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]

//>> SET_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]

//>> CLEAR_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]

//>> GET_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]

//>> GET_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]
static inline bool GET_OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_XLATE_RELEASE_HAS_NO_ITAG]

//>> SET_[OTL0_MISC_CONFIG0_ENABLE_5_0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ENABLE_5_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_ENABLE_5_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ENABLE_5_0]

//>> SET_[OTL0_MISC_CONFIG0_ENABLE_5_0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ENABLE_5_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.insertFromRight<OTL0_MISC_CONFIG0_ENABLE_5_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ENABLE_5_0]

//>> SET_[OTL0_MISC_CONFIG0_ENABLE_5_0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_CONFIG0_ENABLE_5_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.setBit<OTL0_MISC_CONFIG0_ENABLE_5_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_CONFIG0_ENABLE_5_0]

//>> CLEAR_[OTL0_MISC_CONFIG0_ENABLE_5_0]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_CONFIG0_ENABLE_5_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return o_data.clearBit<OTL0_MISC_CONFIG0_ENABLE_5_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_CONFIG0_ENABLE_5_0]

//>> GET_[OTL0_MISC_CONFIG0_ENABLE_5_0]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_CONFIG0_ENABLE_5_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.extractToRight<OTL0_MISC_CONFIG0_ENABLE_5_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_ENABLE_5_0]

//>> GET_[OTL0_MISC_CONFIG0_ENABLE_5_0]
static inline bool GET_OTL0_MISC_CONFIG0_ENABLE_5_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_CONFIG0));
#endif
    return i_data.getBit<OTL0_MISC_CONFIG0_ENABLE_5_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_CONFIG0_ENABLE_5_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_CONFIG0_ENABLE_5_0]

//>> PREP_[OTL0_MISC_C_ERR_RPT_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_C_ERR_RPT_HOLD1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_C_ERR_RPT_HOLD1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_C_ERR_RPT_HOLD1]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_C_ERR_RPT_HOLD1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_C_ERR_RPT_HOLD1;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_C_ERR_RPT_HOLD1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1]

//>> PUT_[OTL0_MISC_C_ERR_RPT_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_C_ERR_RPT_HOLD1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_C_ERR_RPT_HOLD1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_C_ERR_RPT_HOLD1]


//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline bool GET_OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> PREP_[OTL0_MISC_ERROR_SIG_RXO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_ERROR_SIG_RXO(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_ERROR_SIG_RXO;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_ERROR_SIG_RXO]

//>> GET_[OTL0_MISC_ERROR_SIG_RXO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_ERROR_SIG_RXO(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_ERROR_SIG_RXO;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_ERROR_SIG_RXO, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXO]

//>> PUT_[OTL0_MISC_ERROR_SIG_RXO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_ERROR_SIG_RXO(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_ERROR_SIG_RXO, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_ERROR_SIG_RXO]


//>> SET_[OTL0_MISC_ERROR_SIG_RXO_TYPE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_TYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_TYPE,
           OTL0_MISC_ERROR_SIG_RXO_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_TYPE]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_TYPE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_TYPE,
           OTL0_MISC_ERROR_SIG_RXO_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_TYPE]

//>> GET_[OTL0_MISC_ERROR_SIG_RXO_TYPE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_RXO_TYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_RXO_TYPE,
           OTL0_MISC_ERROR_SIG_RXO_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXO_TYPE]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.setBit<OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]

//>> CLEAR_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.clearBit<OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]

//>> GET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]

//>> GET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]
static inline bool GET_OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return i_data.getBit<OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP0]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_AFUTAG]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_AFUTAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_AFUTAG,
           OTL0_MISC_ERROR_SIG_RXO_AFUTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_AFUTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_AFUTAG]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_AFUTAG]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_AFUTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_AFUTAG,
           OTL0_MISC_ERROR_SIG_RXO_AFUTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_AFUTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_AFUTAG]

//>> GET_[OTL0_MISC_ERROR_SIG_RXO_AFUTAG]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_RXO_AFUTAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_RXO_AFUTAG,
           OTL0_MISC_ERROR_SIG_RXO_AFUTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_AFUTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXO_AFUTAG]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_OPCODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_OPCODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_OPCODE,
           OTL0_MISC_ERROR_SIG_RXO_OPCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_OPCODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_OPCODE]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_OPCODE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_OPCODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_OPCODE,
           OTL0_MISC_ERROR_SIG_RXO_OPCODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_OPCODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_OPCODE]

//>> GET_[OTL0_MISC_ERROR_SIG_RXO_OPCODE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_RXO_OPCODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_RXO_OPCODE,
           OTL0_MISC_ERROR_SIG_RXO_OPCODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_OPCODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXO_OPCODE]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_ACTAG]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_ACTAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_ACTAG,
           OTL0_MISC_ERROR_SIG_RXO_ACTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_ACTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_ACTAG]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_ACTAG]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_ACTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_ACTAG,
           OTL0_MISC_ERROR_SIG_RXO_ACTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_ACTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_ACTAG]

//>> GET_[OTL0_MISC_ERROR_SIG_RXO_ACTAG]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_RXO_ACTAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_RXO_ACTAG,
           OTL0_MISC_ERROR_SIG_RXO_ACTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_ACTAG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXO_ACTAG]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_QINDEX]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_QINDEX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_QINDEX,
           OTL0_MISC_ERROR_SIG_RXO_QINDEX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_QINDEX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_QINDEX]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_QINDEX]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_QINDEX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_QINDEX,
           OTL0_MISC_ERROR_SIG_RXO_QINDEX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_QINDEX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_QINDEX]

//>> GET_[OTL0_MISC_ERROR_SIG_RXO_QINDEX]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_RXO_QINDEX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_RXO_QINDEX,
           OTL0_MISC_ERROR_SIG_RXO_QINDEX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_QINDEX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXO_QINDEX]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE,
           OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE,
           OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE]

//>> GET_[OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE,
           OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXO_PE_HANDLE]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12,
           OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12]

//>> SET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return o_data.insertFromRight<OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12,
           OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12]

//>> GET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_ERROR_SIG_RXO));
#endif
    return i_data.extractToRight<OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12,
           OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_ERROR_SIG_RXO_XSL_RSP12]

//>> PREP_[OTL0_MISC_HAPPI_BAR0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL0_MISC_HAPPI_BAR0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_HAPPI_BAR0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL0_MISC_HAPPI_BAR0]

//>> GET_[OTL0_MISC_HAPPI_BAR0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL0_MISC_HAPPI_BAR0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL0_MISC_HAPPI_BAR0;
#endif
    return fapi2::getScom(i_target, OTL0_MISC_HAPPI_BAR0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR0]

//>> PUT_[OTL0_MISC_HAPPI_BAR0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL0_MISC_HAPPI_BAR0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return fapi2::putScom(i_target, OTL0_MISC_HAPPI_BAR0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL0_MISC_HAPPI_BAR0]


//>> SET_[OTL0_MISC_HAPPI_BAR0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR0_ENABLE]

//>> SET_[OTL0_MISC_HAPPI_BAR0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR0_ENABLE]

//>> SET_[OTL0_MISC_HAPPI_BAR0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return o_data.setBit<OTL0_MISC_HAPPI_BAR0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR0_ENABLE]

//>> CLEAR_[OTL0_MISC_HAPPI_BAR0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL0_MISC_HAPPI_BAR0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return o_data.clearBit<OTL0_MISC_HAPPI_BAR0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL0_MISC_HAPPI_BAR0_ENABLE]

//>> GET_[OTL0_MISC_HAPPI_BAR0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR0_ENABLE]

//>> GET_[OTL0_MISC_HAPPI_BAR0_ENABLE]
static inline bool GET_OTL0_MISC_HAPPI_BAR0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return i_data.getBit<OTL0_MISC_HAPPI_BAR0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR0_ENABLE]

//>> SET_[OTL0_MISC_HAPPI_BAR0_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR0_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR0_ADDR,
           OTL0_MISC_HAPPI_BAR0_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR0_ADDR]

//>> SET_[OTL0_MISC_HAPPI_BAR0_ADDR]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR0_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR0_ADDR,
           OTL0_MISC_HAPPI_BAR0_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR0_ADDR]

//>> GET_[OTL0_MISC_HAPPI_BAR0_ADDR]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR0_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR0_ADDR,
           OTL0_MISC_HAPPI_BAR0_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR0_ADDR]

//>> SET_[OTL0_MISC_HAPPI_BAR0_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR0_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR0_MASK,
           OTL0_MISC_HAPPI_BAR0_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR0_MASK]

//>> SET_[OTL0_MISC_HAPPI_BAR0_MASK]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR0_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR0_MASK,
           OTL0_MISC_HAPPI_BAR0_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR0_MASK]

//>> GET_[OTL0_MISC_HAPPI_BAR0_MASK]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR0_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR0_MASK,
           OTL0_MISC_HAPPI_BAR0_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR0_MASK]

//>> SET_[OTL0_MISC_HAPPI_BAR0_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR0_SUB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR0_SUB,
           OTL0_MISC_HAPPI_BAR0_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR0_SUB]

//>> SET_[OTL0_MISC_HAPPI_BAR0_SUB]
static inline fapi2::buffer<uint64_t>& SET_OTL0_MISC_HAPPI_BAR0_SUB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return o_data.insertFromRight<OTL0_MISC_HAPPI_BAR0_SUB,
           OTL0_MISC_HAPPI_BAR0_SUB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL0_MISC_HAPPI_BAR0_SUB]

//>> GET_[OTL0_MISC_HAPPI_BAR0_SUB]
static inline fapi2::buffer<uint64_t>& GET_OTL0_MISC_HAPPI_BAR0_SUB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL0_MISC_HAPPI_BAR0));
#endif
    return i_data.extractToRight<OTL0_MISC_HAPPI_BAR0_SUB,
           OTL0_MISC_HAPPI_BAR0_SUB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL0_MISC_HAPPI_BAR0_SUB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL0_MISC_HAPPI_BAR0_SUB]

//>> PREP_[OTL1_MISC_C_ERR_RPT_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_C_ERR_RPT_HOLD1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_C_ERR_RPT_HOLD1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_C_ERR_RPT_HOLD1]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_C_ERR_RPT_HOLD1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_C_ERR_RPT_HOLD1;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_C_ERR_RPT_HOLD1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1]

//>> PUT_[OTL1_MISC_C_ERR_RPT_HOLD1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_C_ERR_RPT_HOLD1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_C_ERR_RPT_HOLD1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_C_ERR_RPT_HOLD1]


//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_LO_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_HI_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_LO_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_BAD_DATA_RECIEVED_VC2]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_LO_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_CE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_HI_UE]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DCP2FIFO_OVERRUN]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC1FIFO_OVERRUN]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_VC2FIFO_OVERRUN]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC0]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC2]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_DL_VC3]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_CTL_OPCODE_ERR]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_TXI_XSL_OPCODE_ERR]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_RXI_FIELDRSVDNE0_TLVC2]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE20]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE21]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE22]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE23]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE24]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE25]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE26]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE27]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE28]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE29]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE30]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.insertFromRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.setBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return o_data.clearBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.extractToRight<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]
static inline bool GET_OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_C_ERR_RPT_HOLD1));
#endif
    return i_data.getBit<OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_C_ERR_RPT_HOLD1_1_SPARE31]

//>> PREP_[OTL1_MISC_TXI_ERR_INJ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_TXI_ERR_INJ(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_TXI_ERR_INJ;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_TXI_ERR_INJ]

//>> GET_[OTL1_MISC_TXI_ERR_INJ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_TXI_ERR_INJ(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_TXI_ERR_INJ;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_TXI_ERR_INJ, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ]

//>> PUT_[OTL1_MISC_TXI_ERR_INJ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_TXI_ERR_INJ(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_TXI_ERR_INJ, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_TXI_ERR_INJ]


//>> SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> CLEAR_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]
static inline bool GET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_CE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> CLEAR_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]
static inline bool GET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_UE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> CLEAR_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]
static inline bool GET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_CE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> CLEAR_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]
static inline bool GET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_UE]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> CLEAR_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]
static inline bool GET_OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_CTRL_ERR_INJ_PEND]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.insertFromRight<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.setBit<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> CLEAR_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& CLEAR_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return o_data.clearBit<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.extractToRight<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]
static inline bool GET_OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TXI_ERR_INJ));
#endif
    return i_data.getBit<OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TXI_ERR_INJ_DATA_ERR_INJ_PEND]

//>> PREP_[OTL1_MISC_TX_DL_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_OTL1_MISC_TX_DL_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_TX_DL_CREDIT_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[OTL1_MISC_TX_DL_CREDIT_STATUS]

//>> GET_[OTL1_MISC_TX_DL_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_OTL1_MISC_TX_DL_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = OTL1_MISC_TX_DL_CREDIT_STATUS;
#endif
    return fapi2::getScom(i_target, OTL1_MISC_TX_DL_CREDIT_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[OTL1_MISC_TX_DL_CREDIT_STATUS]

//>> PUT_[OTL1_MISC_TX_DL_CREDIT_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_OTL1_MISC_TX_DL_CREDIT_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TX_DL_CREDIT_STATUS));
#endif
    return fapi2::putScom(i_target, OTL1_MISC_TX_DL_CREDIT_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[OTL1_MISC_TX_DL_CREDIT_STATUS]


//>> SET_[OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TX_DL_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT,
           OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]

//>> SET_[OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]
static inline fapi2::buffer<uint64_t>& SET_OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TX_DL_CREDIT_STATUS));
#endif
    return o_data.insertFromRight<OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT,
           OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]

//>> GET_[OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]
static inline fapi2::buffer<uint64_t>& GET_OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(OTL1_MISC_TX_DL_CREDIT_STATUS));
#endif
    return i_data.extractToRight<OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT,
           OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[OTL1_MISC_TX_DL_CREDIT_STATUS_STATUS_DL_CREDIT_COUNT]

//>> PREP_[XSL_MAIN_PMU_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_PMU_COUNT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_PMU_COUNT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_PMU_COUNT]

//>> GET_[XSL_MAIN_PMU_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_PMU_COUNT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_PMU_COUNT;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_PMU_COUNT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_PMU_COUNT]

//>> PUT_[XSL_MAIN_PMU_COUNT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_PMU_COUNT(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_PMU_COUNT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_PMU_COUNT]


//>> SET_[XSL_MAIN_PMU_COUNT_0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_COUNT_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_COUNT_0,
           XSL_MAIN_PMU_COUNT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_COUNT_0]

//>> SET_[XSL_MAIN_PMU_COUNT_0]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_COUNT_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_COUNT_0,
           XSL_MAIN_PMU_COUNT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_COUNT_0]

//>> GET_[XSL_MAIN_PMU_COUNT_0]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_COUNT_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_COUNT_0,
           XSL_MAIN_PMU_COUNT_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_COUNT_0]

//>> SET_[XSL_MAIN_PMU_COUNT_1]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_COUNT_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_COUNT_1,
           XSL_MAIN_PMU_COUNT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_COUNT_1]

//>> SET_[XSL_MAIN_PMU_COUNT_1]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_COUNT_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_COUNT_1,
           XSL_MAIN_PMU_COUNT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_COUNT_1]

//>> GET_[XSL_MAIN_PMU_COUNT_1]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_COUNT_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_COUNT_1,
           XSL_MAIN_PMU_COUNT_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_COUNT_1]

//>> SET_[XSL_MAIN_PMU_COUNT_2]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_COUNT_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_COUNT_2,
           XSL_MAIN_PMU_COUNT_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_COUNT_2]

//>> SET_[XSL_MAIN_PMU_COUNT_2]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_COUNT_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_COUNT_2,
           XSL_MAIN_PMU_COUNT_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_COUNT_2]

//>> GET_[XSL_MAIN_PMU_COUNT_2]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_COUNT_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_COUNT_2,
           XSL_MAIN_PMU_COUNT_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_COUNT_2]

//>> SET_[XSL_MAIN_PMU_COUNT_3]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_COUNT_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_COUNT_3,
           XSL_MAIN_PMU_COUNT_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_COUNT_3]

//>> SET_[XSL_MAIN_PMU_COUNT_3]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_PMU_COUNT_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return o_data.insertFromRight<XSL_MAIN_PMU_COUNT_3,
           XSL_MAIN_PMU_COUNT_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_PMU_COUNT_3]

//>> GET_[XSL_MAIN_PMU_COUNT_3]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_PMU_COUNT_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_PMU_COUNT));
#endif
    return i_data.extractToRight<XSL_MAIN_PMU_COUNT_3,
           XSL_MAIN_PMU_COUNT_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_PMU_COUNT_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_PMU_COUNT_3]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_PID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_INV_LPP_LPID_DIAL]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL,
           XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_ADDR_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_OSL_SPAP_A1_VALID_DIAL]

//>> PREP_[XSL_MAIN_XSLOP_VLOG_RGS_FEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XSL_MAIN_XSLOP_VLOG_RGS_FEC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_FEC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XSL_MAIN_XSLOP_VLOG_RGS_FEC]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XSL_MAIN_XSLOP_VLOG_RGS_FEC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XSL_MAIN_XSLOP_VLOG_RGS_FEC;
#endif
    return fapi2::getScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_FEC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC]

//>> PUT_[XSL_MAIN_XSLOP_VLOG_RGS_FEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XSL_MAIN_XSLOP_VLOG_RGS_FEC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return fapi2::putScom(i_target, XSL_MAIN_XSLOP_VLOG_RGS_FEC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XSL_MAIN_XSLOP_VLOG_RGS_FEC]


//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return o_data.setBit<XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]

//>> CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]
static inline fapi2::buffer<uint64_t>& CLEAR_XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return o_data.clearBit<XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]
static inline bool GET_XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return i_data.getBit<XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_VT]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_T]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_FEC_T(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_FEC_T,
           XSL_MAIN_XSLOP_VLOG_RGS_FEC_T_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_T chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_T]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_T]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_FEC_T(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_FEC_T,
           XSL_MAIN_XSLOP_VLOG_RGS_FEC_T_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_T chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_T]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_T]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_FEC_T(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_FEC_T,
           XSL_MAIN_XSLOP_VLOG_RGS_FEC_T_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_T chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_T]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_I]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_FEC_I(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_FEC_I,
           XSL_MAIN_XSLOP_VLOG_RGS_FEC_I_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_I chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_I]

//>> SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_I]
static inline fapi2::buffer<uint64_t>& SET_XSL_MAIN_XSLOP_VLOG_RGS_FEC_I(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return o_data.insertFromRight<XSL_MAIN_XSLOP_VLOG_RGS_FEC_I,
           XSL_MAIN_XSLOP_VLOG_RGS_FEC_I_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_I chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_I]

//>> GET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_I]
static inline fapi2::buffer<uint64_t>& GET_XSL_MAIN_XSLOP_VLOG_RGS_FEC_I(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XSL_MAIN_XSLOP_VLOG_RGS_FEC));
#endif
    return i_data.extractToRight<XSL_MAIN_XSLOP_VLOG_RGS_FEC_I,
           XSL_MAIN_XSLOP_VLOG_RGS_FEC_I_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XSL_MAIN_XSLOP_VLOG_RGS_FEC_I chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XSL_MAIN_XSLOP_VLOG_RGS_FEC_I]

//>> PREP_[XTS_ATSD_HYP5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_ATSD_HYP5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_ATSD_HYP5]

//>> GET_[XTS_ATSD_HYP5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_ATSD_HYP5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_ATSD_HYP5;
#endif
    return fapi2::getScom(i_target, XTS_ATSD_HYP5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_ATSD_HYP5]

//>> PUT_[XTS_ATSD_HYP5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_ATSD_HYP5(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP5));
#endif
    return fapi2::putScom(i_target, XTS_ATSD_HYP5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_ATSD_HYP5]


//>> SET_[XTS_ATSD_HYP5_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP5_MSRHV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP5));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP5_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP5_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP5_MSRHV]

//>> SET_[XTS_ATSD_HYP5_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP5_MSRHV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP5));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP5_MSRHV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP5_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP5_MSRHV]

//>> SET_[XTS_ATSD_HYP5_MSRHV]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP5_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP5));
#endif
    return o_data.setBit<XTS_ATSD_HYP5_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_ATSD_HYP5_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP5_MSRHV]

//>> CLEAR_[XTS_ATSD_HYP5_MSRHV]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_ATSD_HYP5_MSRHV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP5));
#endif
    return o_data.clearBit<XTS_ATSD_HYP5_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_ATSD_HYP5_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_ATSD_HYP5_MSRHV]

//>> GET_[XTS_ATSD_HYP5_MSRHV]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP5_MSRHV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP5));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP5_MSRHV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP5_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP5_MSRHV]

//>> GET_[XTS_ATSD_HYP5_MSRHV]
static inline bool GET_XTS_ATSD_HYP5_MSRHV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP5));
#endif
    return i_data.getBit<XTS_ATSD_HYP5_MSRHV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_ATSD_HYP5_MSRHV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP5_MSRHV]

//>> SET_[XTS_ATSD_HYP5_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP5_LPARID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP5));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP5_LPARID,
           XTS_ATSD_HYP5_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_ATSD_HYP5_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP5_LPARID]

//>> SET_[XTS_ATSD_HYP5_LPARID]
static inline fapi2::buffer<uint64_t>& SET_XTS_ATSD_HYP5_LPARID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP5));
#endif
    return o_data.insertFromRight<XTS_ATSD_HYP5_LPARID,
           XTS_ATSD_HYP5_LPARID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_ATSD_HYP5_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_ATSD_HYP5_LPARID]

//>> GET_[XTS_ATSD_HYP5_LPARID]
static inline fapi2::buffer<uint64_t>& GET_XTS_ATSD_HYP5_LPARID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_ATSD_HYP5));
#endif
    return i_data.extractToRight<XTS_ATSD_HYP5_LPARID,
           XTS_ATSD_HYP5_LPARID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_ATSD_HYP5_LPARID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_ATSD_HYP5_LPARID]

//>> PREP_[XTS_REG_TEST_CERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_XTS_REG_TEST_CERR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_TEST_CERR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[XTS_REG_TEST_CERR]

//>> GET_[XTS_REG_TEST_CERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_XTS_REG_TEST_CERR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = XTS_REG_TEST_CERR;
#endif
    return fapi2::getScom(i_target, XTS_REG_TEST_CERR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[XTS_REG_TEST_CERR]

//>> PUT_[XTS_REG_TEST_CERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_XTS_REG_TEST_CERR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return fapi2::putScom(i_target, XTS_REG_TEST_CERR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[XTS_REG_TEST_CERR]


//>> SET_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.insertFromRight<XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]

//>> SET_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.insertFromRight<XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]

//>> SET_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.setBit<XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]

//>> CLEAR_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.clearBit<XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]

//>> GET_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return i_data.extractToRight<XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]

//>> GET_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]
static inline bool GET_XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return i_data.getBit<XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_TEST_CERR_ATR_ERR_INJ_PEND]

//>> SET_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.insertFromRight<XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]

//>> SET_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.insertFromRight<XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]

//>> SET_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.setBit<XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_pau Invalid dial access XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]

//>> CLEAR_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& CLEAR_XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.clearBit<XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_pau Invalid dial access XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]

//>> GET_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return i_data.extractToRight<XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]

//>> GET_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]
static inline bool GET_XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return i_data.getBit<XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_pau Invalid dial access XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_TEST_CERR_MAP_ERR_INJ_PEND]

//>> SET_[XTS_REG_TEST_CERR_TEST_CERR_REGSEL]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_TEST_CERR_TEST_CERR_REGSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.insertFromRight<XTS_REG_TEST_CERR_TEST_CERR_REGSEL,
           XTS_REG_TEST_CERR_TEST_CERR_REGSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_TEST_CERR_TEST_CERR_REGSEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_TEST_CERR_TEST_CERR_REGSEL]

//>> SET_[XTS_REG_TEST_CERR_TEST_CERR_REGSEL]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_TEST_CERR_TEST_CERR_REGSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.insertFromRight<XTS_REG_TEST_CERR_TEST_CERR_REGSEL,
           XTS_REG_TEST_CERR_TEST_CERR_REGSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_TEST_CERR_TEST_CERR_REGSEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_TEST_CERR_TEST_CERR_REGSEL]

//>> GET_[XTS_REG_TEST_CERR_TEST_CERR_REGSEL]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_TEST_CERR_TEST_CERR_REGSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return i_data.extractToRight<XTS_REG_TEST_CERR_TEST_CERR_REGSEL,
           XTS_REG_TEST_CERR_TEST_CERR_REGSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_TEST_CERR_TEST_CERR_REGSEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_TEST_CERR_TEST_CERR_REGSEL]

//>> SET_[XTS_REG_TEST_CERR_TEST_CERR_BITSEL]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_TEST_CERR_TEST_CERR_BITSEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.insertFromRight<XTS_REG_TEST_CERR_TEST_CERR_BITSEL,
           XTS_REG_TEST_CERR_TEST_CERR_BITSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_pau Invalid dial access XTS_REG_TEST_CERR_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_TEST_CERR_TEST_CERR_BITSEL]

//>> SET_[XTS_REG_TEST_CERR_TEST_CERR_BITSEL]
static inline fapi2::buffer<uint64_t>& SET_XTS_REG_TEST_CERR_TEST_CERR_BITSEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return o_data.insertFromRight<XTS_REG_TEST_CERR_TEST_CERR_BITSEL,
           XTS_REG_TEST_CERR_TEST_CERR_BITSEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_pau Invalid dial access XTS_REG_TEST_CERR_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[XTS_REG_TEST_CERR_TEST_CERR_BITSEL]

//>> GET_[XTS_REG_TEST_CERR_TEST_CERR_BITSEL]
static inline fapi2::buffer<uint64_t>& GET_XTS_REG_TEST_CERR_TEST_CERR_BITSEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(XTS_REG_TEST_CERR));
#endif
    return i_data.extractToRight<XTS_REG_TEST_CERR_TEST_CERR_BITSEL,
           XTS_REG_TEST_CERR_TEST_CERR_BITSEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_pau Invalid dial access XTS_REG_TEST_CERR_TEST_CERR_BITSEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[XTS_REG_TEST_CERR_TEST_CERR_BITSEL]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
